[{"D:\\STEVENS\\STEVENS\\SPRING + FALL + WINTER 2020\\FALL 2020\\CS 423 Senior Design I\\project\\senior-design-2020\\app\\src\\index.js":"1","D:\\STEVENS\\STEVENS\\SPRING + FALL + WINTER 2020\\FALL 2020\\CS 423 Senior Design I\\project\\senior-design-2020\\app\\src\\reportWebVitals.js":"2","D:\\STEVENS\\STEVENS\\SPRING + FALL + WINTER 2020\\FALL 2020\\CS 423 Senior Design I\\project\\senior-design-2020\\app\\src\\App.js":"3","D:\\STEVENS\\STEVENS\\SPRING + FALL + WINTER 2020\\FALL 2020\\CS 423 Senior Design I\\project\\senior-design-2020\\app\\src\\redux\\configureStore.js":"4","D:\\STEVENS\\STEVENS\\SPRING + FALL + WINTER 2020\\FALL 2020\\CS 423 Senior Design I\\project\\senior-design-2020\\app\\src\\views\\ExerciseFormFn.js":"5","D:\\STEVENS\\STEVENS\\SPRING + FALL + WINTER 2020\\FALL 2020\\CS 423 Senior Design I\\project\\senior-design-2020\\app\\src\\views\\PracticeView.js":"6","D:\\STEVENS\\STEVENS\\SPRING + FALL + WINTER 2020\\FALL 2020\\CS 423 Senior Design I\\project\\senior-design-2020\\app\\src\\views\\AssignmentFormFn.js":"7","D:\\STEVENS\\STEVENS\\SPRING + FALL + WINTER 2020\\FALL 2020\\CS 423 Senior Design I\\project\\senior-design-2020\\app\\src\\views\\ClientViewFn.js":"8","D:\\STEVENS\\STEVENS\\SPRING + FALL + WINTER 2020\\FALL 2020\\CS 423 Senior Design I\\project\\senior-design-2020\\app\\src\\redux\\reducer.js":"9","D:\\STEVENS\\STEVENS\\SPRING + FALL + WINTER 2020\\FALL 2020\\CS 423 Senior Design I\\project\\senior-design-2020\\app\\src\\api\\clientAPI.js":"10","D:\\STEVENS\\STEVENS\\SPRING + FALL + WINTER 2020\\FALL 2020\\CS 423 Senior Design I\\project\\senior-design-2020\\app\\src\\redux\\slices\\therapistSlice.js":"11","D:\\STEVENS\\STEVENS\\SPRING + FALL + WINTER 2020\\FALL 2020\\CS 423 Senior Design I\\project\\senior-design-2020\\app\\src\\redux\\slices\\clientSlice.js":"12","D:\\STEVENS\\STEVENS\\SPRING + FALL + WINTER 2020\\FALL 2020\\CS 423 Senior Design I\\project\\senior-design-2020\\app\\src\\redux\\slices\\assignmentSlice.js":"13","C:\\Users\\Btp12\\Documents\\JOB\\INTERVIEW CODE\\MIRA\\MiraTherapeutics2020\\app\\src\\index.js":"14","C:\\Users\\Btp12\\Documents\\JOB\\INTERVIEW CODE\\MIRA\\MiraTherapeutics2020\\app\\src\\reportWebVitals.js":"15","C:\\Users\\Btp12\\Documents\\JOB\\INTERVIEW CODE\\MIRA\\MiraTherapeutics2020\\app\\src\\App.js":"16","C:\\Users\\Btp12\\Documents\\JOB\\INTERVIEW CODE\\MIRA\\MiraTherapeutics2020\\app\\src\\redux\\configureStore.js":"17","C:\\Users\\Btp12\\Documents\\JOB\\INTERVIEW CODE\\MIRA\\MiraTherapeutics2020\\app\\src\\views\\PracticeView.js":"18","C:\\Users\\Btp12\\Documents\\JOB\\INTERVIEW CODE\\MIRA\\MiraTherapeutics2020\\app\\src\\views\\ExerciseFormFn.js":"19","C:\\Users\\Btp12\\Documents\\JOB\\INTERVIEW CODE\\MIRA\\MiraTherapeutics2020\\app\\src\\views\\AssignmentFormFn.js":"20","C:\\Users\\Btp12\\Documents\\JOB\\INTERVIEW CODE\\MIRA\\MiraTherapeutics2020\\app\\src\\views\\ClientViewFn.js":"21","C:\\Users\\Btp12\\Documents\\JOB\\INTERVIEW CODE\\MIRA\\MiraTherapeutics2020\\app\\src\\redux\\reducer.js":"22","C:\\Users\\Btp12\\Documents\\JOB\\INTERVIEW CODE\\MIRA\\MiraTherapeutics2020\\app\\src\\redux\\slices\\therapistSlice.js":"23","C:\\Users\\Btp12\\Documents\\JOB\\INTERVIEW CODE\\MIRA\\MiraTherapeutics2020\\app\\src\\redux\\slices\\assignmentSlice.js":"24","C:\\Users\\Btp12\\Documents\\JOB\\INTERVIEW CODE\\MIRA\\MiraTherapeutics2020\\app\\src\\api\\clientAPI.js":"25","C:\\Users\\Btp12\\Documents\\JOB\\INTERVIEW CODE\\MIRA\\MiraTherapeutics2020\\app\\src\\redux\\slices\\clientSlice.js":"26"},{"size":1478,"mtime":1618851887613,"results":"27","hashOfConfig":"28"},{"size":375,"mtime":1606947846587,"results":"29","hashOfConfig":"28"},{"size":3410,"mtime":1618851887551,"results":"30","hashOfConfig":"28"},{"size":746,"mtime":1618851887631,"results":"31","hashOfConfig":"28"},{"size":17604,"mtime":1619567499449,"results":"32","hashOfConfig":"28"},{"size":7113,"mtime":1619567043275,"results":"33","hashOfConfig":"28"},{"size":12026,"mtime":1619567336394,"results":"34","hashOfConfig":"28"},{"size":17072,"mtime":1619567043237,"results":"35","hashOfConfig":"28"},{"size":338,"mtime":1619567043173,"results":"36","hashOfConfig":"28"},{"size":1341,"mtime":1618853975172,"results":"37","hashOfConfig":"28"},{"size":2140,"mtime":1619567043209,"results":"38","hashOfConfig":"28"},{"size":1884,"mtime":1618851887634,"results":"39","hashOfConfig":"28"},{"size":2868,"mtime":1619567043189,"results":"40","hashOfConfig":"28"},{"size":1478,"mtime":1625605399413,"results":"41","hashOfConfig":"42"},{"size":375,"mtime":1625605399427,"results":"43","hashOfConfig":"42"},{"size":3423,"mtime":1627422644416,"results":"44","hashOfConfig":"42"},{"size":746,"mtime":1625605399420,"results":"45","hashOfConfig":"42"},{"size":7410,"mtime":1626317742167,"results":"46","hashOfConfig":"42"},{"size":16768,"mtime":1626305951686,"results":"47","hashOfConfig":"42"},{"size":10630,"mtime":1626318428213,"results":"48","hashOfConfig":"42"},{"size":16690,"mtime":1627422287470,"results":"49","hashOfConfig":"42"},{"size":338,"mtime":1625605399421,"results":"50","hashOfConfig":"42"},{"size":2143,"mtime":1625605399426,"results":"51","hashOfConfig":"42"},{"size":2231,"mtime":1626300911844,"results":"52","hashOfConfig":"42"},{"size":1341,"mtime":1625605399400,"results":"53","hashOfConfig":"42"},{"size":1884,"mtime":1625605399423,"results":"54","hashOfConfig":"42"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"58"},"18j4x0w",{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"58"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":27,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"58"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"87"},"w1gulr",{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"87"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"87"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"87"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"87"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"87"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"87"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"87"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},"D:\\STEVENS\\STEVENS\\SPRING + FALL + WINTER 2020\\FALL 2020\\CS 423 Senior Design I\\project\\senior-design-2020\\app\\src\\index.js",["120"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Provider} from \"react-redux\"\r\nimport {store, persistor} from \"./redux/configureStore\"\r\nimport './css/index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\nimport { PersistGate } from 'redux-persist/integration/react'\r\nimport Page1 from \"./App\";\r\nimport PracticeView from \"./views/PracticeView\";\r\nimport ExerciseForm from \"./views/ExerciseFormFn\";\r\nimport ClientView from \"./views/ClientViewFn\";\r\nimport AssignmentForm from \"./views/AssignmentFormFn\";\r\nconst rootElement = document.getElementById(\"root\");\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <PersistGate loading={null} persistor={persistor}>\r\n      <BrowserRouter>\r\n        <Switch>\r\n          <Route exact path=\"/\" component={Page1} />\r\n          <Route path=\"/PracticeView\" component={PracticeView} />\r\n          <Route path=\"/ExerciseForm\" component={ExerciseForm} />\r\n          <Route path=\"/ClientView\" component={ClientView} />\r\n          <Route path=\"/AssignmentForm\" component={AssignmentForm} />\r\n        </Switch>\r\n      </BrowserRouter>\r\n    </PersistGate>\r\n </Provider>,\r\n rootElement\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n",["121","122"],"D:\\STEVENS\\STEVENS\\SPRING + FALL + WINTER 2020\\FALL 2020\\CS 423 Senior Design I\\project\\senior-design-2020\\app\\src\\reportWebVitals.js",[],"D:\\STEVENS\\STEVENS\\SPRING + FALL + WINTER 2020\\FALL 2020\\CS 423 Senior Design I\\project\\senior-design-2020\\app\\src\\App.js",["123","124"],"import React, { Component } from \"react\";\r\nimport logo from \"./Mira.jpg\";\r\nimport banner from \"./MiraBanner.png\";\r\nimport bubble from \"./bubbles.png\";\r\nimport \"./css/App.css\";\r\nimport axios from \"axios\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport {\r\n  MDBCard,\r\n  MDBCardBody,\r\n  MDBContainer,\r\n  MDBCardTitle,\r\n  MDBCardText,\r\n} from \"mdbreact\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { apiResponse: \"\" };\r\n  }\r\n\r\n  callAPI() {\r\n    fetch(\"http://localhost:3080/\")\r\n      .then((res) => res.text())\r\n      .then((res) => this.setState({ apiResponse: res }));\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.callAPI();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"Mira-site-header\">\r\n          <img src={banner} className=\"Mira-banner\" alt=\"banner\" />\r\n        </header>\r\n\r\n        <div className=\"App-logo-container\">\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        </div>\r\n\r\n        <body>\r\n          <div className=\"App-background-container\">\r\n            <div className=\"bg\"></div>\r\n          </div>\r\n        </body>\r\n\r\n        <div className=\"Username-bubble-image\">\r\n          <img src={bubble} className=\"bubble1\" alt=\"bubble\" />\r\n        </div>\r\n\r\n        <div className=\"Password-bubble-image\">\r\n          <img src={bubble} className=\"bubble2\" alt=\"bubble\" />\r\n        </div>\r\n\r\n        <div className=\"Login-container\">\r\n          <form>\r\n            <input\r\n              className=\"Username\"\r\n              type=\"text\"\r\n              placeholder=\"Username\"\r\n              id=\"unamee\"\r\n              name=\"username\"\r\n            ></input>\r\n            <input\r\n              className=\"Password\"\r\n              type=\"text\"\r\n              placeholder=\"Password\"\r\n              id=\"pword\"\r\n              name=\"password\"\r\n            ></input>\r\n          </form>\r\n        </div>\r\n\r\n        <Link to=\"/PracticeView\">\r\n          <Button\r\n            className=\"Button\"\r\n            onClick=\"window.location.href='/PracticeView'\"\r\n            type=\"button\"\r\n          >\r\n            Log In\r\n          </Button>\r\n        </Link>\r\n\r\n        <div className=\"New-user-container\">\r\n          <a href=\"www.google.com\" className=\"user\">\r\n            New User?\r\n          </a>\r\n        </div>\r\n\r\n        <div className=\"Forgot-password-container\">\r\n          <a href=\"www.google.com\" className=\"pword\">\r\n            Forgot Password?\r\n          </a>\r\n        </div>\r\n\r\n        <div>\r\n          <MDBContainer className=\"Card\">\r\n            <MDBCard className=\"card-body\">\r\n              <MDBCardTitle className=\"Card1-title\">\r\n                Miratx Articles\r\n              </MDBCardTitle>\r\n              <MDBCardText>Articles from Miratx</MDBCardText>\r\n            </MDBCard>\r\n          </MDBContainer>\r\n        </div>\r\n\r\n        <div>\r\n          <MDBContainer className=\"Card-2\">\r\n            <MDBCard className=\"card-body-2\">\r\n              <MDBCardTitle className=\"Card2-title\">\r\n                Miratx Articles\r\n              </MDBCardTitle>\r\n              <MDBCardText>Articles from Miratx</MDBCardText>\r\n            </MDBCard>\r\n          </MDBContainer>\r\n        </div>\r\n\r\n        <p className=\"App-intro\">{this.state.apiResponse}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","D:\\STEVENS\\STEVENS\\SPRING + FALL + WINTER 2020\\FALL 2020\\CS 423 Senior Design I\\project\\senior-design-2020\\app\\src\\redux\\configureStore.js",[],"D:\\STEVENS\\STEVENS\\SPRING + FALL + WINTER 2020\\FALL 2020\\CS 423 Senior Design I\\project\\senior-design-2020\\app\\src\\views\\ExerciseFormFn.js",["125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151"],"D:\\STEVENS\\STEVENS\\SPRING + FALL + WINTER 2020\\FALL 2020\\CS 423 Senior Design I\\project\\senior-design-2020\\app\\src\\views\\PracticeView.js",["152","153","154","155"],"D:\\STEVENS\\STEVENS\\SPRING + FALL + WINTER 2020\\FALL 2020\\CS 423 Senior Design I\\project\\senior-design-2020\\app\\src\\views\\AssignmentFormFn.js",["156","157","158","159","160","161","162","163","164","165","166","167"],"D:\\STEVENS\\STEVENS\\SPRING + FALL + WINTER 2020\\FALL 2020\\CS 423 Senior Design I\\project\\senior-design-2020\\app\\src\\views\\ClientViewFn.js",["168","169","170","171","172","173","174","175","176","177","178"],"D:\\STEVENS\\STEVENS\\SPRING + FALL + WINTER 2020\\FALL 2020\\CS 423 Senior Design I\\project\\senior-design-2020\\app\\src\\redux\\reducer.js",[],"D:\\STEVENS\\STEVENS\\SPRING + FALL + WINTER 2020\\FALL 2020\\CS 423 Senior Design I\\project\\senior-design-2020\\app\\src\\api\\clientAPI.js",["179"],"import { __esModule } from \"redux-persist/lib/storage/createWebStorage\"\r\n\r\nexport const getAssignments = async (patientID) => {\r\n    let assignments = await fetch(`http://localhost:3080/assignments/patient/${patientID}`)\r\n    assignments = await assignments.json()\r\n    assignments.sort((a, b) => a.visitNumber - b.visitNumber)\r\n    return assignments\r\n}\r\n\r\nexport const closeAssignment = async (assignmentObject) => {\r\n    // mark the assignment as completed by the therapist\r\n    let closedAssignment = Object.assign({}, assignmentObject);\r\n    console.log(`Read only property: ${closedAssignment.completedByTherapist}`)\r\n    closedAssignment.completedByTherapist = true\r\n    const postSettings = {\r\n        method: 'POST',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(closedAssignment),\r\n      }\r\n\r\n      await fetch(`http://localhost:3080/assignments/${assignmentObject._id}/edit`, postSettings)\r\n}\r\n\r\nexport const postAssignment = async (assignmentObject) => {\r\n  const postSettings = {\r\n    method: 'POST',\r\n    headers: {\r\n      'Accept': 'application/json',\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify(assignmentObject),\r\n  }\r\n\r\n  await fetch(`http://localhost:3080/assignments/`, postSettings)\r\n}","D:\\STEVENS\\STEVENS\\SPRING + FALL + WINTER 2020\\FALL 2020\\CS 423 Senior Design I\\project\\senior-design-2020\\app\\src\\redux\\slices\\therapistSlice.js",["180","181"],"D:\\STEVENS\\STEVENS\\SPRING + FALL + WINTER 2020\\FALL 2020\\CS 423 Senior Design I\\project\\senior-design-2020\\app\\src\\redux\\slices\\clientSlice.js",[],"D:\\STEVENS\\STEVENS\\SPRING + FALL + WINTER 2020\\FALL 2020\\CS 423 Senior Design I\\project\\senior-design-2020\\app\\src\\redux\\slices\\assignmentSlice.js",["182","183"],"C:\\Users\\Btp12\\Documents\\JOB\\INTERVIEW CODE\\MIRA\\MiraTherapeutics2020\\app\\src\\index.js",["184"],["185","186"],"C:\\Users\\Btp12\\Documents\\JOB\\INTERVIEW CODE\\MIRA\\MiraTherapeutics2020\\app\\src\\reportWebVitals.js",[],"C:\\Users\\Btp12\\Documents\\JOB\\INTERVIEW CODE\\MIRA\\MiraTherapeutics2020\\app\\src\\App.js",["187","188"],"import React, { Component } from \"react\";\r\nimport logo from \"./mira-new-medium.png\";\r\nimport banner from \"./MiraBanner.png\";\r\nimport bubble from \"./bubbles.png\";\r\nimport \"./css/App.css\";\r\nimport axios from \"axios\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport {\r\n  MDBCard,\r\n  MDBCardBody,\r\n  MDBContainer,\r\n  MDBCardTitle,\r\n  MDBCardText,\r\n} from \"mdbreact\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { apiResponse: \"\" };\r\n  }\r\n\r\n  callAPI() {\r\n    fetch(\"http://localhost:3080/\")\r\n      .then((res) => res.text())\r\n      .then((res) => this.setState({ apiResponse: res }));\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.callAPI();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"Mira-site-header\">\r\n          <img src={banner} className=\"Mira-banner\" alt=\"banner\" />\r\n        </header>\r\n\r\n        <div className=\"App-logo-container\">\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        </div>\r\n\r\n        <body>\r\n          <div className=\"App-background-container\">\r\n            <div className=\"bg\"></div>\r\n          </div>\r\n        </body>\r\n\r\n        <div className=\"Username-bubble-image\">\r\n          <img src={bubble} className=\"bubble1\" alt=\"bubble\" />\r\n        </div>\r\n\r\n        <div className=\"Password-bubble-image\">\r\n          <img src={bubble} className=\"bubble2\" alt=\"bubble\" />\r\n        </div>\r\n\r\n        <div className=\"Login-container\">\r\n          <form>\r\n            <input\r\n              className=\"Username\"\r\n              type=\"text\"\r\n              placeholder=\"Username\"\r\n              id=\"unamee\"\r\n              name=\"username\"\r\n            ></input>\r\n            <input\r\n              className=\"Password\"\r\n              type=\"text\"\r\n              placeholder=\"Password\"\r\n              id=\"pword\"\r\n              name=\"password\"\r\n            ></input>\r\n          </form>\r\n        </div>\r\n\r\n        <Link to=\"/PracticeView\">\r\n          <Button\r\n            className=\"Button\"\r\n            onClick=\"window.location.href='/PracticeView'\"\r\n            type=\"button\"\r\n          >\r\n            Log In\r\n          </Button>\r\n        </Link>\r\n\r\n        <div className=\"New-user-container\">\r\n          <a href=\"www.google.com\" className=\"user\">\r\n            New User?\r\n          </a>\r\n        </div>\r\n\r\n        <div className=\"Forgot-password-container\">\r\n          <a href=\"www.google.com\" className=\"pword\">\r\n            Forgot Password?\r\n          </a>\r\n        </div>\r\n\r\n        <div>\r\n          <MDBContainer className=\"Card\">\r\n            <MDBCard className=\"card-body-1\">\r\n              <MDBCardTitle className=\"Card1-title\">\r\n                Miratx Articles\r\n              </MDBCardTitle>\r\n              <MDBCardText>Articles from Miratx</MDBCardText>\r\n            </MDBCard>\r\n          </MDBContainer>\r\n        </div>\r\n\r\n        <div>\r\n          <MDBContainer className=\"Card-2\">\r\n            <MDBCard className=\"card-body-2\">\r\n              <MDBCardTitle className=\"Card2-title\">\r\n                Miratx Articles\r\n              </MDBCardTitle>\r\n              <MDBCardText>Articles from Miratx</MDBCardText>\r\n            </MDBCard>\r\n          </MDBContainer>\r\n        </div>\r\n\r\n        <p className=\"App-intro\">{this.state.apiResponse}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\Btp12\\Documents\\JOB\\INTERVIEW CODE\\MIRA\\MiraTherapeutics2020\\app\\src\\redux\\configureStore.js",[],"C:\\Users\\Btp12\\Documents\\JOB\\INTERVIEW CODE\\MIRA\\MiraTherapeutics2020\\app\\src\\views\\PracticeView.js",["189","190","191","192"],"import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\"; //\r\nimport green from \"../Green.PNG\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport acasterPicture from \"../james-acaster.jpg\";\r\nimport fakePerson from '../fakePerson.jfif'\r\nimport Image from \"react-bootstrap/Image\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"../css/PracticeView.css\";\r\nimport { openClient } from \"../redux/slices/clientSlice\"; //\r\nimport { updateTherapistClientList } from \"../redux/slices/therapistSlice\" //\r\n\r\nconst PracticeView = () => {\r\n  \r\n  const dispatch = useDispatch();\r\n\r\n\r\n\r\n  const { client } = useSelector((state) => state.client);\r\n\r\n  const [patient, setPatient] = useState(\r\n    client.name.length == 0\r\n      ? {\r\n          name: \"Bruce Wayne\",\r\n          id: \"PjohnDoe1\",\r\n          trackedSymptoms: 3,\r\n          groundingExercises: 5,\r\n          assignments: [true, false],\r\n          nextSession: \"3/4\",\r\n          status: \"Ongoing\",\r\n        }\r\n      : client\r\n  );\r\n\r\n  const [patientList, setPatientList] = useState([\r\n    {\r\n      name: \"Bruce Wayne\",\r\n      id: \"PjohnDoe1\",\r\n      trackedSymptoms: 3,\r\n      groundingExercises: 5,\r\n      assignments: [true, false],\r\n      nextSession: \"3/4\",\r\n      status: \"Ongoing\",\r\n    },\r\n    {\r\n      name: \"Craig Ferguson\",\r\n      id: \"PjohnDoe1\",\r\n      trackedSymptoms: 3,\r\n      groundingExercises: 5,\r\n      assignments: [true, false],\r\n      nextSession: \"2/8\",\r\n      status: \"Ongoing\",\r\n    },\r\n    {\r\n      name: \"John Doe\",\r\n      id: \"PjohnDoe1\",\r\n      trackedSymptoms: 3,\r\n      groundingExercises: 5,\r\n      assignments: [true, false],\r\n      nextSession: \"12/24\",\r\n      status: \"Ongoing\",\r\n    },\r\n    {\r\n      name: \"James Acaster\",\r\n      id: \"PjohnDoe1\",\r\n      trackedSymptoms: 3,\r\n      groundingExercises: 5,\r\n      assignments: [true, true],\r\n      nextSession: \"11/20\",\r\n      status: \"Completed\",\r\n    },\r\n    {\r\n      name: \"Scooby Doo\",\r\n      id: \"PjohnDoe1\",\r\n      trackedSymptoms: 3,\r\n      groundingExercises: 5,\r\n      assignments: [true, false],\r\n      nextSession: \"3/14\",\r\n      status: \"Ongoing\",\r\n    },\r\n  ]);\r\n\r\n  const [fetchedTherapistClientInfo, setFetchedTherapistClientInfo] = useState(false)\r\n\r\n  useEffect(() => {\r\n    // Only set the therapist slice once\r\n    if (!fetchedTherapistClientInfo){\r\n      updateTherapistStore()\r\n      setFetchedTherapistClientInfo(true)\r\n    }\r\n    // window.onpopstate = function(event) {\r\n    //   // Allows back and forth action by refreshing the page if it was reached using the browser's back button\r\n    //   if (event.currentTarget.location.pathname == \"/PracticeView\") window.location.reload()\r\n    // }\r\n  });\r\n\r\n  // Updates the client slice by fetching all client assignment lists from the database\r\n   const updateTherapistStore = async () => {\r\n    const postSettings = {\r\n      method: 'POST',\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({patientIds: [\"PjohnDoe1\"]})\r\n    }\r\n  \r\n    let clientInfoObj = await fetch(`http://localhost:3080/assignments/patient/batch/`, postSettings)\r\n    clientInfoObj = await clientInfoObj.json()\r\n\r\n    dispatch(\r\n      updateTherapistClientList({\r\n        clientInfo: clientInfoObj\r\n      })\r\n    )\r\n  \r\n  }\r\n\r\n  function clientClick(client) {\r\n    //fires each time we click on a different client\r\n    setPatient(client); //updates the local state with the currently selected client's information\r\n  }\r\n\r\n  const updateCurrentClient = (client) => {\r\n    //updates the client global store with the selected client info\r\n    //fires when we click the \"go to client view\" button\r\n    dispatch(\r\n      openClient({\r\n        id: client.id,\r\n        name: client.name,\r\n        nextSession: client.nextSession,\r\n        status: client.status,\r\n      })\r\n    );\r\n  };\r\n\r\n  function getRow(patients) {\r\n    //maps all patient information into a table\r\n    //each patient is clickable, changing which patient shows up on the left hand side bar\r\n    const rowItems = patients.map((patient) => (\r\n      <tr onClick={() => clientClick(patient)}>\r\n        <td className=\"Patient-name\">Client: {patient.name}</td>\r\n        <p className=\"Tab\"></p>\r\n        <td className=\"Tracked-symptoms\">\r\n          Tracked Symptoms {patient.trackedSymptoms} times\r\n        </td>\r\n        <p className=\"Tab\"></p>\r\n        <td className=\"Exercise-use\">\r\n          Grounding Exercises used {patient.groundingExercises} times\r\n        </td>\r\n        <p className=\"Tab\"></p>\r\n        <td className=\"Completion\">\r\n          Completed {getCompleted(patient.assignments)}/\r\n          {patient.assignments.length} homework assignments\r\n        </td>\r\n        <p className=\"Tab\"></p>\r\n        <td className=\"Completion-indicator\">\r\n          <Image src={green} Green />\r\n        </td>\r\n      </tr>\r\n    ));\r\n    return rowItems;\r\n  }\r\n\r\n  function getCompleted(assignments) {\r\n    //increments as patients complete assignments\r\n    let count = 0;\r\n    for (let assignment of assignments) {\r\n      if (assignment) {\r\n        count++;\r\n      }\r\n    }\r\n    return count;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Container className=\"Profile\">\r\n        <Row>\r\n          <Col>\r\n            <div className=\"border\">\r\n              <div className=\"Profile-info\">\r\n                <Row className=\"Name-Row justify-content-md-center\">\r\n                  <Image\r\n                    src={fakePerson}\r\n                    roundedCircle\r\n                    className=\"picture\"\r\n                  />\r\n                </Row>\r\n                <Row className=\"Name-Row justify-content-md-center\">\r\n                  <Card className=\"Name-Card\">{patient.name}</Card>\r\n                </Row>\r\n                <Row className=\"Name-Row justify-content-md-center\">\r\n                  <Card className=\"Next-Session-Date\">\r\n                    {patient.nextSession}\r\n                  </Card>\r\n                </Row>\r\n                <Row className=\"Name-Row justify-content-md-center\">\r\n                  <Card className=\"Status\">{patient.status}</Card>\r\n                </Row>\r\n                <Row className=\"Name-Row justify-content-md-center\">\r\n                  <Link\r\n                    to={{\r\n                      pathname: \"/ClientView\",\r\n                      data: { name: patient.name }, // your data array of objects\r\n                    }}\r\n                  >\r\n                    <Button\r\n                      onClick={() => updateCurrentClient(patient)}\r\n                      variant=\"info\"\r\n                      className=\"Client-View-Button\"\r\n                    >\r\n                      Go To Client View\r\n                    </Button>\r\n                  </Link>\r\n                </Row>\r\n              </div>\r\n            </div>\r\n          </Col>\r\n\r\n          <Col xs={8}>\r\n            <h1 className=\"Practice-view-title\">Practice View</h1>\r\n            <Table className=\"Table\">\r\n              <tbody>\r\n                {getRow(patientList)}\r\n              </tbody>\r\n            </Table>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PracticeView;\r\n","C:\\Users\\Btp12\\Documents\\JOB\\INTERVIEW CODE\\MIRA\\MiraTherapeutics2020\\app\\src\\views\\ExerciseFormFn.js",["193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213"],"import React, { useContext, useState, useEffect, Component } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\" //\r\nimport '../css/ExerciseForm.css';\r\nimport { MDBCard, MDBCardTitle } from \"mdbreact\";\r\nimport logo from '../mira-new-medium.png';\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Container from 'react-bootstrap/Container'\r\nimport Form from 'react-bootstrap/Form'\r\nimport Button from 'react-bootstrap/Button'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {Link, Redirect} from 'react-router-dom';\r\nimport { useHistory } from 'react-router' //\r\nimport { addExercise, editExercise } from '../redux/slices/assignmentSlice' //methods to add and edit exercises in the global store\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nfunction ExerciseForm() {\r\n    const dispatch = useDispatch();\r\n    let history = useHistory()\r\n  \r\n    const [redirect, setRedirect] = useState(false)\r\n    \r\n    const [exerciseDueNextSession, setExerciseDueNextSession] = useState(false) \r\n    //local state to keep track of users choice to use/not use next session date\r\n\r\n    const [setAssignment, setAssignmentState] = useState(useSelector((state) => state.assignment.currentAssignment))\r\n\r\n    const exerciseList = setAssignment.exerciseList\r\n\r\n    const [chosenExercise, setChosenExercise] = useState(setAssignment.chosenExercise) \r\n    //receive empty exercise template from assignment form if we are adding, or exercise to be edited if the edit icon was clicked (chosenExercise)\r\n    //setChosenExercise used to update currently chosen exercise\r\n    \r\n    const [userDueByChoice, setUserDueByChoice] = useState('Choose Date') \r\n    //value used in daysWeeksCustomInput function, updated in updateChosenExerciseDueDate\r\n\r\n    \r\n    const [customExerciseFrequency, setCustomExerciseFrequency] = useState(chosenExercise.frequency != \"Daily\" && chosenExercise.frequency != \"Weekly\" && chosenExercise.frequency != \"Bi-Weekly\")\r\n    // Indicates if therapist wants custom frequency on an exercise\r\n    // If so, the condition will pass and the custom input field will show\r\n\r\n    const [dateState, setDateState] = useState(new Date(chosenExercise.dueDate))\r\n\r\n    \r\n    var exercises = [];\r\n    const exerciseTypes = { //dictionary of exercise types and their possible titles\r\n        \"Grounding\": [\"Flashback Grounding\", \"Color Finder\", \"Breathing Exercise\", \"Vibration Tool\", \"Bilateral Simulation\", \"5, 4, 3, 2, 1 Grounding\", \"Any\", \"All\"],\r\n        \"Reading\": [\"PTSD Content\", \"Trauma Story\"],\r\n        \"Writing\": [\"Write About Trauma\", \"Free Writing\"],\r\n        \"Worksheets\": [\"CPT Worksheet\", \"PTP Worksheet\", \"Upload Your Own\"],\r\n        \"Assessments\": [\"PCL-5 Questionnaire\", \"PHQ-9 Questionnaire\"],\r\n        \"Lists\": [\"Gratefullness List\", \"Self-Care\", \"Stuck Points\", \"Create Your Own List\", \"Track Symptoms\", \"Track Triggers\"]      \r\n    }\r\n    const dueByChoices = [\"Next Session\", \"Custom Days\", \"Custom Weeks\", \"Choose Date\"];\r\n    const frequenceyChoices = [\"Daily\", \"Weekly\", \"Bi-Weekly\", \"Custom per Week\"];\r\n    if (setAssignment.added == [] || !setAssignment.added){\r\n        exercises = [];\r\n    } else {\r\n        exercises = setAssignment.added;\r\n    }\r\n    \r\n    useEffect(async () => {\r\n        \r\n    });    \r\n    \r\n    function getExercises(exercises) { //populates sidebar with already added exercises, and exercise chosen to edit for comparison purposes\r\n        const result = exercises.map((exercise, idx) =>\r\n        <Row key = {idx}>\r\n            <div className = \"Exercise-card-row\" key = {idx}>\r\n                <MDBCard className = \"Exercise-card-body\" key = {idx}>\r\n                    <p className=\"exerciseTitle\">{exercise.exerciseTitle}</p>\r\n                    <p className=\"exerciseCard\">{exercise[5]}</p>\r\n                    <p className=\"exerciseCard\">Due By: {formatDateToString(exercise.dueDate)}</p>\r\n                    <p className=\"exerciseCard\">Special Instructions: {exercise.specialInstructions}</p >\r\n                </MDBCard>\r\n            </div>\r\n        </Row>\r\n        );\r\n        return result;\r\n    }\r\n\r\n    function getExerciseFormData(data){  //sets up choices for exercise type\r\n        const result = Object.keys(data).map((d) =>\r\n            <option>{d}</option>\r\n        );      \r\n        return result;\r\n    }\r\n    function getExerciseTitle(data, choice){  //sets up choices for exercise title based on type chosen previously\r\n        if(data[choice] == undefined){\r\n            return <option>undef</option>\r\n        }\r\n        const result = data[choice].map((d) =>\r\n            <option>{d}</option>\r\n        );\r\n        return result;\r\n    }\r\n\r\n    const addNewExercise = (exercise) => {\r\n        //fires when we're done editing or adding\r\n        let exerciseToAdd = Object.assign({}, exercise)\r\n        exerciseToAdd.goal = getGoal(exercise.dueDate, exercise.frequency) //set exercise's unique goal based on frequency of completion within the due date\r\n        if (exerciseToAdd.editing) {\r\n            dispatch(\r\n                editExercise({ //reducer method from assignment slice\r\n                    exercise: exerciseToAdd\r\n                })\r\n            )\r\n        }\r\n        else {\r\n            exerciseToAdd.editing = true\r\n            dispatch(\r\n                addExercise({ //reducer method from assignment slice\r\n                    exercise: exerciseToAdd\r\n                })\r\n            )   \r\n        }\r\n        history.push('/assignmentform')\r\n    }\r\n\r\n    const updateChosenExercise = (targetKey, newValue) => {\r\n        //updates the chosenExercise locally based on whatever key value is passed in\r\n\r\n        // If they're changing the due date, state can't be updated immediately if they select days, weeks, or customDate\r\n\r\n        let newChosenExercise = {}\r\n        for (let key in chosenExercise) { //copies the old chosenExercise key for key\r\n            newChosenExercise[key] = chosenExercise[key]\r\n        }\r\n\r\n        newChosenExercise[targetKey] = newValue //updated based on the new key-value pair\r\n\r\n        if (targetKey == \"exerciseType\") {\r\n            newChosenExercise.exerciseTitle = exerciseTypes[newValue][0]\r\n        }\r\n\r\n        //Add necessary string corrections and change custom frequency state variable to reflect the choice\r\n        //changing the state variable here allows the additional custom input field to show up later - showCustomFrequencyInput function\r\n        if (targetKey == \"frequency\") {\r\n            if (newValue == '[x] per week' || !isNaN(newValue)) {\r\n                newChosenExercise.frequency = String(newValue) + ' per week'\r\n                setCustomExerciseFrequency(true)\r\n            }\r\n            else {\r\n                setCustomExerciseFrequency(false)\r\n            }\r\n        }\r\n\r\n        setChosenExercise(newChosenExercise) //update chosenExercise state\r\n    }\r\n\r\n    const updateChosenExerciseDueDate = (dueDateSelection, newValue) => {\r\n        //method to update the due date for a particular exercise\r\n        //with options like Days, Weeks, and Choose Date (for each exercise), due date calculations can get complex\r\n        //this method does those calculations to set the correct due date, and update the necessary local states\r\n        setUserDueByChoice(dueDateSelection)\r\n        let newDueDate\r\n        let today = new Date()\r\n        let millisecondsInADay = 1000 * 60 * 60 * 24\r\n        if (dueDateSelection == \"Next Session\") {\r\n            setExerciseDueNextSession(true)\r\n            newDueDate = setAssignment.nextSession\r\n            setUserDueByChoice(newDueDate)\r\n            updateChosenExercise(\"dueDate\", newDueDate)\r\n        } else {\r\n            setExerciseDueNextSession(false)\r\n            if (newValue) {\r\n                switch (dueDateSelection) {\r\n                    case \"Days\":\r\n                        setUserDueByChoice(\"Days\")\r\n                        newDueDate = new Date(today.getTime() + (millisecondsInADay * newValue))\r\n                        break\r\n                    case \"Weeks\":\r\n                        setUserDueByChoice(\"Weeks\")\r\n                        newDueDate = new Date(today.getTime() + (millisecondsInADay * newValue * 7))\r\n                        break\r\n                    case \"Choose Date\":\r\n                        setUserDueByChoice(\"Choose Date\")\r\n                        newDueDate = newValue\r\n                        break\r\n                }\r\n                updateChosenExercise(\"dueDate\", newDueDate) //update chosenExercise state with new date information\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    const showCustomFrequencyInput = () => {\r\n        if (customExerciseFrequency) { //checks state variable for if we are doing a custom frequency.  if not, custom input field does not show up\r\n            return (\r\n                <Form.Group controlId=\"customExerciseFrequency\">\r\n                    <Form.Control onChange = {event => updateChosenExercise(\"frequency\", event.target.value)} \r\n                        as = \"textarea\" defaultValue={chosenExercise.frequency.split(' ').includes('[x]') ? \"\" : chosenExercise.frequency.split(' ')[0]} placeholder={`Enter frequency`}  rows = {1} \r\n                    />\r\n                </Form.Group>\r\n            )\r\n        }\r\n    }\r\n\r\n    const formatDateToString = (dateString) => {\r\n        let date = new Date(dateString)\r\n        return `${date.getMonth() + 1}/${date.getDate()}/${date.getFullYear()}`\r\n    }\r\n    \r\n    function getGoal(dueDate,frequency){ //calcualtes goal for given exercise. the goal is the number of times an exercise should be completed, and depends on the frequency of completion within the due date\r\n        var today = new Date();\r\n        const difference = Math.abs(dueDate - today);\r\n        let dayDiff =  difference / (1000 * 60 * 60 * 24);\r\n        dayDiff = Math.ceil(dayDiff);\r\n        switch(frequency) {\r\n            // Take the max of the expected goal and 1 to prevent the goal being 0\r\n            case \"Daily\":\r\n                return Math.max(1, dayDiff);\r\n            case \"Weekly\":\r\n              // code block\r\n                return Math.max(1, Math.floor(dayDiff/7));\r\n            case \"Bi-Weekly\":\r\n              // code block\r\n                return Math.max(1, Math.floor(dayDiff/3.5));\r\n            default:\r\n                let customFrequency = frequency.split(' ')[0]\r\n                return Math.max(1, Math.floor(dayDiff/(7/customFrequency)));\r\n        } \r\n    }\r\n\r\n    function daysWeeksCustomInput(){\r\n        //method that displays the custom input selected based on the user choice stored in the userDueByChoice local state variable\r\n        //updates the due date on form change.  updateChosenExerciseDueDate does some date calculations then calls updateChosenExercise\r\n        //which in turn updates the local state for the chosenExercise. \r\n        if (!exerciseDueNextSession) {\r\n            switch (userDueByChoice) {\r\n                case \"Days\":\r\n                    return (\r\n                        <Form.Group controlId=\"daysOrWeeks\">\r\n                            <Form.Control onChange = {event => updateChosenExerciseDueDate(\"Days\", event.target.value)} as = \"textarea\" placeholder={`Enter number of ${userDueByChoice}`}  rows = {1} />\r\n                        </Form.Group>\r\n                    )\r\n                case \"Weeks\":\r\n                    return (\r\n                        <Form.Group controlId=\"daysOrWeeks\">\r\n                            <Form.Control onChange = {event => updateChosenExerciseDueDate(\"Weeks\", event.target.value)} as = \"textarea\" placeholder={`Enter number of ${userDueByChoice}`}  rows = {1} />\r\n                        </Form.Group>\r\n                    )\r\n                case \"Choose Date\":\r\n                    return (\r\n                        <Form.Group controlId=\"daysOrWeeks\">\r\n                            <DatePicker\r\n                                    selected= {dateState}\r\n                                    onSelect={selected => {\r\n                                        setDateState(new Date(selected.getFullYear(), selected.getMonth(), selected.getDate()))\r\n                                        updateChosenExerciseDueDate(\"Choose Date\", selected)\r\n                                    }}\r\n                                    \r\n                                    name=\"startDate\"\r\n                                />\r\n                        </Form.Group>\r\n                    )\r\n            }\r\n            \r\n        }\r\n    }\r\n\r\n    function doRedirect(){\r\n        if(redirect){\r\n            <Redirect to='/AssignmentForm'/>\r\n        } \r\n    }\r\n\r\n\r\nreturn(\r\n    <div>\r\n        <div className = \"App-logo-container\">\r\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        </div>\r\n        <div className = \"Exercise-form-title-container\">\r\n            <p className = \"Exercise-form-title-text\">Exercise Form</p>\r\n        </div> \r\n        <Container fluid className = \"background-container\">\r\n        <Row className = \"background\">\r\n            <Col className = \"Added-exercise-list\">\r\n                <Row className = \"Added-exercise-list-text\">Added Exercises:</Row>\r\n                {getExercises(setAssignment.exerciseList)}\r\n            </Col>\r\n            <Col>\r\n            <div className = \"Exercise-form-container\">\r\n                <Form>\r\n                    <Form.Group controlId=\"exerciseType\">\r\n                        <Form.Label>Exercise Type</Form.Label>\r\n                        <Form.Control  onChange = {event => updateChosenExercise(\"exerciseType\", event.target.value)} as=\"select\" defaultValue = {chosenExercise.exerciseType} custom>\r\n                        {getExerciseFormData(exerciseTypes)}\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"exerciseTitle\">\r\n                        <Form.Label>Exercise Title</Form.Label>\r\n                        <Form.Control  onChange = {event => updateChosenExercise(\"exerciseTitle\", event.target.value)} as=\"select\" defaultValue = {chosenExercise.exerciseTitle} custom>\r\n                        {getExerciseTitle(exerciseTypes, chosenExercise.exerciseType)}\r\n                        </Form.Control>\r\n                    </Form.Group> \r\n                    <Form.Group controlId=\"dueBy\">\r\n                        <Form.Label>Due By</Form.Label>\r\n                        <Form.Control  onChange = {event => updateChosenExerciseDueDate(event.target.value)} as=\"select\" defaultValue = {\"Choose Date\"} custom>\r\n                        <option>Next Session</option>\r\n                        <option>Days</option>\r\n                        <option>Weeks</option>\r\n                        <option>Choose Date</option>\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n                    {daysWeeksCustomInput()}\r\n                    <Form.Group controlId=\"frequency\">\r\n                        <Form.Label>Frequency</Form.Label>\r\n                        <Form.Control onChange = {event => updateChosenExercise(\"frequency\", event.target.value)} as=\"select\" defaultValue = {customExerciseFrequency ? '[x] per week' : 'Daily'} custom>\r\n                        <option>Daily</option>\r\n                        <option>Weekly</option>\r\n                        <option>Bi-Weekly</option>\r\n                        <option>[x] per week</option>\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n                    {showCustomFrequencyInput()}\r\n                    <Form.Group controlId=\"specialInstructions\">\r\n                        <Form.Label>Special Instructions</Form.Label>\r\n                        <Form.Control onChange = {event => updateChosenExercise(\"specialInstructions\", event.target.value)} as = \"textarea\" defaultValue = {chosenExercise.specialInstructions.length == 0 ? \"\" : chosenExercise.specialInstructions} placeholder = {\"Enter special instructions\"} rows = {1} />\r\n                    </Form.Group>\r\n                    \r\n                    <Link to = {{\r\n                        pathname: \"/AssignmentForm\",\r\n                        data: {editedExerciseList: exercises,\r\n                                nextSession: setAssignment.nextSession} \r\n                    }}>\r\n                        {/* Add exercise to assignment here */}\r\n                        <Button onClick={() => addNewExercise(chosenExercise)} variant=\"primary\" type=\"Submit\">\r\n                        {chosenExercise.editing ? \"Update\" : \"Add\"}\r\n                        </Button>\r\n                    </Link>\r\n                </Form>\r\n            </div>\r\n            </Col>\r\n        </Row>\r\n        </Container> \r\n    {doRedirect}\r\n    \r\n</div>\r\n)\r\n}\r\nexport default ExerciseForm;\r\n","C:\\Users\\Btp12\\Documents\\JOB\\INTERVIEW CODE\\MIRA\\MiraTherapeutics2020\\app\\src\\views\\AssignmentFormFn.js",["214","215","216","217","218","219","220"],"import React, { useContext, useState, useEffect, Component } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\"; //\r\nimport '../css/ExerciseForm.css';  \r\nimport { MDBCard, MDBCardBody, MDBContainer,MDBCardTitle,MDBCardText } from \"mdbreact\";\r\nimport logo from '../mira-new-medium.png';\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Container from 'react-bootstrap/Container'\r\nimport Form from 'react-bootstrap/Form'\r\nimport Button from 'react-bootstrap/Button'\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport '../css/AssignmentForm.css'\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport { Link } from \"react-router-dom\";\r\nimport { postAssignment } from '../api/clientAPI'; //post method from clientAPI. Updates database\r\nimport { openAssignment, clearAssignment } from '../redux/slices/assignmentSlice'; //methods for updating the assignment store\r\nimport { addAssignmentToClient } from \"../redux/slices/therapistSlice\"; //method that pushes assignment data to therapist store on SUBMIT\r\nimport { useHistory } from 'react-router'; //\r\n\r\n\r\nfunction AssignmentForm() {\r\n    const dispatch = useDispatch();\r\n    let history = useHistory();\r\n    var today = new Date();\r\n    var dd = String(today.getDate()).padStart(2, '0');\r\n    var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\r\n    var yyyy = today.getFullYear();\r\n    today = mm + '/' + dd + '/' + yyyy;\r\n\r\n    const [{client}] = useState(\r\n        useSelector((state) => state.client) //need correct id for updating store\r\n      )\r\n\r\n    const [{therapist}] = useState(\r\n        useSelector((state) => state.therapist) //need correct id for updating store\r\n      )\r\n\r\n    let [assignments] = useState(useSelector((state) => state.therapist.therapist.clientInfo[\"PjohnDoe1\"])) //gets the assignments of a client with id PjohnDoe1\r\n   \r\n    const [setAssignment, setAssignmentState] = useState(useSelector((state) => state.assignment.currentAssignment)) \r\n        //holds current assignment data in setAssignment\r\n        //can change current assignment data by using setAssignmentState.  Takes an object of similar dimensions    \r\n        //With this we can grab the part of the store we need. Updates automatically as the store is changed as well (does a comparison, if diff -> changes and re-renders components involved)\r\n\r\n    const [dateState, setDateState] = useState({\r\n        startDate: new Date(setAssignment.nextSession)\r\n    })\r\n\r\n    const defaultExercise = {\r\n        exerciseTitle: \"Flashback Grounding\",\r\n        exerciseType: \"Grounding\",\r\n        dueDate: setAssignment.nextSession,\r\n        frequency: \"Daily\",\r\n        patientName: client.name,\r\n        patientId: client.id,\r\n        progress: 0,\r\n        specialInstructions: \"\",\r\n        goal: 0,\r\n        id: setAssignment.exerciseList.length,\r\n        // false means adding an exercise to the assignment, true means editing an existing one\r\n        editing: false\r\n    }\r\n\r\n    useEffect(async () => {\r\n        \r\n    });\r\n\r\n    const updateCurrentAssignment = () => { \r\n        //method is called when submitting form (assigning the assignment)\r\n        //Set assignment visit number to reflect number of assignments\r\n        let finalAssignment = Object.assign({}, setAssignment)\r\n        finalAssignment.visitNumber = assignments.length + 1\r\n        finalAssignment.patientId = client.id\r\n        finalAssignment.therapistName = \"Jane Doe\"\r\n        //assign assignment\r\n        postAssignment(finalAssignment)\r\n\r\n        dispatch(\r\n            //update therapist information in global store\r\n            addAssignmentToClient({\r\n                assignment: finalAssignment\r\n            })\r\n        );\r\n\r\n        dispatch(\r\n            //place an empty assignment in the assignment store for the next new assignment\r\n            clearAssignment()\r\n        )\r\n        //update assignment state with newly created assignment\r\n        setAssignmentState(finalAssignment)\r\n    }\r\n\r\n                                    \r\n    function getExercises(exercises, next) {\r\n        //populates the page with exercise cards\r\n        if (exercises.length != 0){   \r\n            const result = exercises.map((exercise) =>\r\n            <Row>\r\n                <div className = \"Exercise-card-row\">\r\n                    <MDBCard className = \"Exercise-card-body\">\r\n                        <p className=\"exerciseTitle\">{exercise.exerciseTitle} <EditIcon onClick={() => goToExerciseForm(exercise)} className = \"Edit-icon\"/></p>\r\n                        <p className=\"exerciseCard\">{exercise.frequency}</p>\r\n                        <p className=\"exerciseCard\">Due By: {formatDateToString(exercise.dueDate)}</p>\r\n                        <p className=\"exerciseCard\">Special Instructions: {exercise.specialInstructions}</p>\r\n                    </MDBCard>\r\n                </div>\r\n            </Row>\r\n            );\r\n                            \r\n            return result;\r\n        }\r\n                \r\n    }\r\n\r\n    const goToExerciseForm = (exercise) => {\r\n        //fires when we want to go to the exercise form page\r\n        let newAssignmentState = {};\r\n        for (let key in setAssignment) {\r\n            newAssignmentState[key] = setAssignment[key];\r\n        }\r\n\r\n        // If exercise title field is empty, this means we are adding (edit icon was not pressed). update assignment state to include empty exercise as chosen exercise\r\n        if (!exercise.exerciseTitle) {\r\n            newAssignmentState.chosenExercise = defaultExercise;\r\n        } else {\r\n            // Otherwise, update assignment state to include exercise to be edited\r\n            newAssignmentState.chosenExercise = exercise;\r\n        }\r\n        setAssignmentState(() => newAssignmentState) // Update assignment state to include empty exercise to be added\r\n\r\n        // Update assignment store with current assignment data\r\n        dispatch(\r\n            openAssignment({\r\n                assignment: setAssignment,\r\n                chosenExercise: newAssignmentState.chosenExercise\r\n            })\r\n        )\r\n\r\n        history.push(\"/ExerciseForm\")\r\n    }\r\n\r\n    const formatDateToString = (dateString) => {\r\n        let date = new Date(dateString)\r\n        return `${date.getMonth() + 1}/${date.getDate()}/${date.getFullYear()}`\r\n    }\r\n        \r\n    return(\r\n    <div>\r\n        <div className = \"App-logo-container\">\r\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        </div>\r\n        <div className = \"Client-view-title-container\">\r\n            <p className = \"Client-view-title-text\">Assignment Form</p> \r\n        </div>\r\n        <Container fluid className = \"Assignment-information-background-container\">\r\n            <Row className = \"Assignment-information-background\">\r\n            <div className = \"Assignment-information-container\">\r\n                <Col>\r\n                <MDBContainer className = \"Assignment-information-card\">\r\n                    <MDBCard className = \"Assignment-information-body\">\r\n                        <p className = \"Assignment-information-top\">Date Created: {formatDateToString(setAssignment.dateAssigned)} Visit Number: {assignments.length + 1}</p>\r\n                        <p className = \"Assignment-information-top\">Next Session: \r\n                                <div>\r\n                                    <DatePicker\r\n                                        selected={dateState.startDate}\r\n                                        onSelect={selected => {\r\n                                            setDateState({startDate: new Date(selected.getFullYear(), selected.getMonth(), selected.getDate())})\r\n                                            let newAssignmentState = Object.assign({}, setAssignment)\r\n                                            newAssignmentState.nextSession = selected\r\n                                            setAssignmentState(newAssignmentState) //adjusts the assignment state based on date selection\r\n                                        }}\r\n                                        \r\n                                        name=\"startDate\"\r\n                                    />\r\n                                </div>\r\n                        </p>\r\n                        <p className = \"Assignment-information-top\">Therapist: {\"Miranda Cosgrove\"}</p>\r\n                        <p className = \"Assignment-information-top\">Client Name: {client.name}</p>\r\n                        <h2>Exercises</h2>\r\n                        <div className = \"Exercise-card-container\">\r\n                        {getExercises(setAssignment.exerciseList, dateState.startDate)}\r\n                            <Row>\r\n                                <MDBCard className = \"Add-exercise\">\r\n                                    <Button variant=\"link\" size=\"lg\" onClick = { () => goToExerciseForm({}) }>\r\n                                        Add Exercise\r\n                                    </Button>\r\n                                </MDBCard>\r\n                            </Row>\r\n                        </div>\r\n                    </MDBCard>          \r\n                </MDBContainer>\r\n                </Col>\r\n            </div>\r\n            <div className = \"Overall-instructions-container\">\r\n                <Col>\r\n                    <MDBContainer className = \"Overall-instructions-card\">\r\n                        <MDBCard className = \"Overall-instructions-body\">\r\n                            <MDBCardTitle className = \"Overall-instructions-title\">Overall Instructions</MDBCardTitle>\r\n                                <Form>\r\n                                    <Form.Group controlId=\"exerciseTitle\">\r\n                                        <Form.Control placeholder=\"\" />\r\n                                    </Form.Group>\r\n                                    <div className = \"Assignment-form-finish-button\">\r\n                                        <Link to = \"/ClientView\">\r\n                                            <Button onClick = {updateCurrentAssignment}variant=\"primary\" type=\"submit\" >\r\n                                                Assign\r\n                                            </Button>\r\n                                        </Link>\r\n                                    </div>\r\n                                </Form>\r\n                        </MDBCard>          \r\n                    </MDBContainer>\r\n                </Col>\r\n            </div>\r\n            </Row>\r\n        </Container> \r\n    </div>\r\n    )\r\n\r\n}\r\n\r\nexport default AssignmentForm;\r\n","C:\\Users\\Btp12\\Documents\\JOB\\INTERVIEW CODE\\MIRA\\MiraTherapeutics2020\\app\\src\\views\\ClientViewFn.js",["221","222","223","224","225","226","227","228","229"],"import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from \"react-redux\" //\r\nimport '../css/ClientView.css';\r\nimport { completeClientAssignment } from \"../redux/slices/therapistSlice\"; //\r\nimport { MDBCard, MDBCardTitle } from \"mdbreact\";\r\nimport logo from '../mira-new-medium.png';\r\nimport {Row, Col, Container, Image, Card, /*Button*/} from 'react-bootstrap'\r\nimport picture from '../fakePerson.jfif';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {\r\n  CircularProgressbar,\r\n  buildStyles\r\n} from \"react-circular-progressbar\";\r\nimport \"react-circular-progressbar/dist/styles.css\";\r\nimport { LinearProgress } from '@material-ui/core';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\nimport {closeAssignment} from \"../api/clientAPI\" //\r\nimport { useHistory } from 'react-router';\r\n\r\nfunction ClientView() {\r\n\r\n  let history = useHistory();\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const [{client}] = useState(\r\n    useSelector((state) => state.client)\r\n  )\r\n\r\n  const {therapist} = useSelector((state) => state.therapist)\r\n\r\n  const [assignments, setAssignments] = useState(therapist.clientInfo['PjohnDoe1'])\r\n\r\n  const [selectedAssignment, setSelectedAssignment] = useState({ //locally keeps track of whatever assignment we have selected\r\n    due: \"\"\r\n  })\r\n\r\n    const [assignmentCompletionDialogOpen, setAssignmentCompletionDialogOpen] = useState(false) //boolean state variable that keeps track of if we have the completion dialog box open or not\r\n\r\n    const [assignmentsFetched, setAssignmentsFetched] = useState(false) //keeps track of if we have successfully fetched the assignments from the database\r\n\r\n    useEffect(async () => {\r\n      // Sort assignments once\r\n      if (!assignmentsFetched) {\r\n        //let assignments = useSelector((state) => state.therapist['PjohnDoe1'])\r\n            // add an extra assignment to allow for a new one to be created if the most recent assignment has been closed\r\n            if (assignments[0].completedByTherapist) {\r\n              let newAssignmentForNewBubble = {\r\n                visitNumber: assignments.length + 1,\r\n                due: undefined,\r\n                assignmentProgress: 0,\r\n                status: 0 \r\n                }\r\n\r\n                let newAssignmentList = assignments.slice()\r\n                newAssignmentList.unshift(newAssignmentForNewBubble)\r\n                setAssignments(newAssignmentList)\r\n            }\r\n            // update the state with the assignments in the right order\r\n            setAssignmentsFetched(true)\r\n            setSelectedAssignment(assignments[0])\r\n          }\r\n      \r\n    });\r\n    \r\n\r\n// Take in an exercise and calculate expected progress. Due date is in model, assigned date is in exercise\r\n// Use the frequency to see how many times it should have been done by now\r\nfunction calculateExpectedExerciseProgress(exercise) {\r\n  // Return 100 if past the due date\r\n  if (new Date().getTime() > new Date(exercise.dueDate).getTime()) return 100\r\n  const millisecondsInADay = 1000*60*60*42\r\n  // frequency is included in the model. Will be Daily, Weekly, Bi-Weekly, or X times per week\r\n  const frequency = exercise.frequency\r\n  // progress is included in the model. It indicates how many times the exercise has been completed\r\n  const totalCompletions = exercise.goal\r\n  // Get the day the exercise was assigned\r\n  const assignmentDate = new Date(selectedAssignment.dateAssigned)\r\n  // Get the day the exercise is due\r\n  const dueDate = new Date(exercise.dueDate)\r\n  // Get today's date as a reference point\r\n  const today = new Date()\r\n  // Calculate how many days have passed since the exercise was assigned\r\n  let daysSinceAssignment;\r\n  daysSinceAssignment = (today.getTime() - assignmentDate.getTime()) / millisecondsInADay\r\n  // Calculate how many days there were to complete the assignment\r\n  // let daysToCompleteExercise;\r\n  // daysToCompleteExercise = (dueDate.getTime() - assignmentDate.getTime()) / millisecondsInADay\r\n  // Will indicate how many times the exercise should have been completed\r\n  let expectedCompletions = 0\r\n  switch (frequency) {\r\n    case \"Daily\":\r\n      expectedCompletions = daysSinceAssignment\r\n      break\r\n    case \"Weekly\":\r\n      expectedCompletions = daysSinceAssignment/7\r\n      break\r\n    case \"Bi-Weekly\":\r\n      expectedCompletions = daysSinceAssignment/3.5\r\n      break\r\n    default:\r\n      // X per week case\r\n      const completionsPerWeek = Number(frequency.split(' ')[0])\r\n      expectedCompletions = daysSinceAssignment/(7/completionsPerWeek)\r\n      break\r\n  }\r\n\r\n  // Return it as a percent\r\n  return 100 * expectedCompletions/totalCompletions\r\n\r\n}\r\n\r\n\r\nfunction completeAssignmentButton() {\r\n  //handles closing an assignment\r\n  //opens up a dialog box to confirm completion\r\n\r\n  const handleClickOpen = () => {\r\n      setAssignmentCompletionDialogOpen(true)\r\n  }\r\n\r\n  const handleClose = () => {\r\n      setAssignmentCompletionDialogOpen(false)\r\n  }\r\n\r\n  // if flag to redirect to assignment form is true, redirect to assignment form. Otherwise, render the page\r\n  \r\n  \r\n  return (\r\n  <div className = \"Complete-assignment-button-div\">\r\n  <Button className = \"Complete-assignment-button\" variant=\"outlined\" color=\"primary\" onClick={handleClickOpen} disabled = {selectedAssignment.completedByTherapist}>\r\n        {selectedAssignment.completedByTherapist != undefined ? \"Complete Assignment\" : \"Create Assignment\"}\r\n      </Button>\r\n      <Dialog\r\n        open = {assignmentCompletionDialogOpen}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n      >\r\n        <DialogTitle id=\"alert-dialog-title\">{selectedAssignment.due != undefined ? \"Complete Assignment?\" : \"Create Assignment?\"}</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id=\"alert-dialog-description\">\r\n            {selectedAssignment.due != undefined ? \"Are you sure you want to complete the selected assignment?\" : \"Would you like to create a new assignment?\"}\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={selectedAssignment.due != undefined ? completeAssignment : createAssignment} color=\"primary\">\r\n            Yes\r\n          </Button>\r\n          <Button onClick={handleClose} color=\"primary\" autoFocus>\r\n            No\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n      </div>)\r\n}\r\n\r\nasync function completeAssignment() {\r\n  // Assignments are sorted in descending order of visitNumber (whatever nth visit during which they were assigned)\r\n  // change status of selected assignment to \"Complete\"\r\n  let targetVisitNumber = selectedAssignment.visitNumber\r\n  let data = assignments.slice()\r\n  for (let assignment of data) {\r\n    if (assignment.visitNumber == targetVisitNumber) {\r\n      // Update database\r\n      await closeAssignment(assignment)\r\n      console.log(\"Updating global store\")\r\n      // Update global store\r\n      dispatch(\r\n        completeClientAssignment({\r\n          assignment: assignment\r\n        })\r\n      )\r\n      \r\n      let completedAssignment = Object.assign({}, data[0])\r\n      completedAssignment.completedByTherapist = true\r\n      data[0] = completedAssignment\r\n\r\n      break;\r\n    }\r\n  }\r\n\r\n\r\n  // Check if the newest assignment is an actual assignment. If not, make a new barebones assignment so that a new bubbble can be made. Just exists with required fields for visuals\r\n  if (data[0].completedByTherapist) {\r\n    let newAssignmentForNewBubble = {\r\n    visitNumber: data.length + 1,\r\n    due: undefined,\r\n    assignmentProgress: 0,\r\n    status: 0\r\n    \r\n    }\r\n    data.unshift(newAssignmentForNewBubble)\r\n  }\r\n    setAssignments(data)\r\n    setSelectedAssignment(data[0])\r\n    setAssignmentCompletionDialogOpen(false)\r\n}\r\n\r\n// Sets up redirect to assignment form if therapist wants to make new assignment\r\nconst createAssignment = () => {\r\n  // setRedirectToAssignmentForm(true)\r\n  history.push('/AssignmentForm')\r\n}\r\n\r\nfunction changeVisibleAssignment(visitNumber) {\r\n  // change the assignment being shown to a new one based on the visitNumber provided by the assignment bubble\r\n  for (let assignment of assignments) {\r\n    if (assignment.visitNumber == visitNumber) {\r\n      setSelectedAssignment(assignment)\r\n      break\r\n    }\r\n  }\r\n\r\n}\r\n\r\n// Take in an assignment. Return the total progress as a percent. Divide assignment progress (completions so far) by total amount of completions expected\r\nfunction calculateAssignmentProgressAsPercent(assignment) {\r\n  if (assignment.due) {\r\n    let totalCompletions = 0;\r\n    for (let exercise of assignment.exerciseList) {\r\n      totalCompletions += exercise.goal\r\n    }\r\n    return 100 * assignment.assignmentProgress / totalCompletions\r\n  }\r\n  return 0\r\n}\r\n\r\nfunction getBubbleInfo(assignmentsList) {\r\n  //populates progress bubbles on screen. takes in list of assignments \r\n  const ongoingBubbleColor = '#00b5d9'\r\n  const completedBubbleColor = '#20315f'\r\n  const completedBubblePathColor = '#FFFFFF'\r\n  const ongoingBubblePathColor = '#ac6ef3'\r\n    let progressBubbleComponents = []\r\n    // 7 Assignments on the row at a time\r\n    for (let assignmentIndex = 0; assignmentIndex < 7; assignmentIndex++) {\r\n      // Make an invisible assignment bubble so the spacing still works out\r\n      if (assignmentsList.length <= assignmentIndex) {\r\n        progressBubbleComponents.push(\r\n          <div className = \"Progress-bubble-column-hidden\">\r\n            <CircularProgressbar  className = \"Progress-bubbles\"\r\n            background\r\n            backgroundPadding={6}/>\r\n          </div>\r\n        )\r\n      } else {\r\n        //let targetIndex = assignmentsList.length - assignmentIndex - 1\r\n        let targetAssignment = assignmentsList[assignmentIndex]\r\n        progressBubbleComponents.unshift(\r\n          <div className = \"Progress-bubble-column\" onClick = {() => changeVisibleAssignment(targetAssignment.visitNumber)}>\r\n            <CircularProgressbar  className = \"Progress-bubbles\" value={calculateAssignmentProgressAsPercent(targetAssignment)}\r\n            text={targetAssignment.due ? `${new Date(targetAssignment.due).getMonth()+1}/${new Date(targetAssignment.due).getDate()}` : 'New'}\r\n            background\r\n            backgroundPadding={6}\r\n            styles={buildStyles({\r\n              backgroundColor: `${targetAssignment.completedByTherapist ? completedBubbleColor : ongoingBubbleColor}`,\r\n              textColor: \"#fff\",\r\n              pathColor: `${targetAssignment.completedByTherapist ? completedBubblePathColor : ongoingBubblePathColor}`,\r\n              trailColor: \"transparent\"\r\n            })}/>\r\n          </div>)\r\n      }\r\n    }\r\n  return (<div className = \"Progress-bubbles-container\">\r\n    {progressBubbleComponents}\r\n  </div>)\r\n}\r\n\r\nfunction getClientInfo(client) {\r\n  //gets client info passed in from practice view\r\n  const result = \r\n    <Row>\r\n      <MDBCard className = \"Client-information\">\r\n        <Image src={picture} roundedCircle className=\"picture\"/>\r\n        <div className=\"clientInfoCardContainer\">\r\n          <p className=\"clientInfoCard\">{client.name}</p>\r\n          <p className=\"clientInfoCard\">Client Since: {'1/14'}</p>\r\n          <p className=\"clientInfoCard\">Next Session: {client.nextSession}</p>\r\n        </div>\r\n      </MDBCard>\r\n    </Row>\r\n  return result;\r\n}\r\n\r\n function getExercises(exercises) {\r\n   //sets up exercises on page with expected and actual progress bars\r\n      if (exercises) \r\n      {\r\n        const ActualLinearProgress = withStyles((theme) => ({\r\n          root: {\r\n            height: 30,\r\n            borderRadius: 10\r\n          },\r\n          colorPrimary: {\r\n            backgroundColor: \"#FFFFFF\"\r\n          },\r\n          bar: {\r\n            backgroundColor: \"#ac6ef3\"\r\n          }\r\n        }))(LinearProgress);\r\n\r\n        const ExpectedLinearProgress = withStyles((theme) => ({\r\n          root: {\r\n            height: 30,\r\n            borderRadius: 10\r\n          },\r\n          colorPrimary: {\r\n            backgroundColor: \"#FFFFFF\"\r\n          },\r\n          bar: {\r\n            backgroundColor: \"#20315f\"\r\n          }\r\n        }))(LinearProgress);\r\n        \r\n      const result = exercises.map((exercise) =>\r\n      <div className = \"Exercise-data\">\r\n        <Row>\r\n            <Col className='Linear-progress-bar' lg={4}>\r\n              <ActualLinearProgress className = \"Linear-progress-bar\" variant = {\"determinate\"} value = {100*exercise.progress/exercise.goal} color = \"primary\" thickness={5}/>\r\n              <ExpectedLinearProgress className = \"Linear-progress-bar\" variant = {\"determinate\"} value = {calculateExpectedExerciseProgress(exercise)} color = \"primary\"/>\r\n            </Col>\r\n            <Col className='Exercise-title'>\r\n                <p className=\"Exercise-title\">{exercise.exerciseTitle}<br></br>{`${new Date(exercise.dueDate).getMonth()+1}/${new Date(exercise.dueDate).getDate()}`}</p>\r\n            </Col>\r\n        </Row>\r\n        <br></br>\r\n      </div>\r\n      );\r\n      return result;\r\n      }\r\n    }\r\n\r\n    return(\r\n      <div>\r\n          <div className = \"App-logo-container\">\r\n              <img src={logo} className=\"App-logo\" alt=\"logo\"/>\r\n          </div>\r\n          <div className = \"Client-view-title-container\">\r\n              <p className = \"Client-view-title-text\">  {client.name}</p> {/*Get this from previous page*/}\r\n          </div>\r\n            \r\n          <Container fluid className = \"background-container\">\r\n            <Row className = \"background\">\r\n              <div className = \"Client-information-container\">\r\n                <Col>\r\n                  {getClientInfo(client)}\r\n                </Col>\r\n              </div>\r\n              <Col>\r\n                    <Row>\r\n                    </Row>\r\n                    <Row>\r\n                      {getBubbleInfo(assignments)}\r\n                    </Row>\r\n                    <Row>\r\n                        <Col>\r\n                        <Card className=\"Assignment-completion-body\">\r\n                            <Card.Body>\r\n                                <Row>\r\n                                    <Col>\r\n                                      <div className = \"Assignment-completion-status-text-container\">\r\n                                        <MDBCardTitle className=\"Assignment-completion-status-text\">{selectedAssignment.completedByTherapist ? 'Completed' : 'Ongoing'}</MDBCardTitle> {/*Get this from patient data*/}\r\n                                      </div>\r\n                                    </Col>\r\n                                    <Col className = \"Assignment-due-date-col\">\r\n                                      <div className = \"Assignment-due-date-container\">\r\n                                        <MDBCardTitle className=\"Assignment-due-date-text\">\r\n                                          Due by: <u>{selectedAssignment.due ? `${new Date(selectedAssignment.due).getMonth() + 1}/${new Date(selectedAssignment.due).getDate()}` : ''}</u>\r\n                                        </MDBCardTitle> {/*Get this from patient data*/}\r\n                                      </div>\r\n                                    </Col>\r\n                                    <Col className = \"Complete-assignment-button-col\">\r\n                                        {completeAssignmentButton()}\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row>\r\n                                    <Col>\r\n                                      <div className = \"Assignment-progress-container\">\r\n                                        <MDBCardTitle className=\"Assignment-completion-title-text\">Assignment Completion</MDBCardTitle>\r\n                                        <div className=\"Exercise-data-container\">\r\n                                          {getExercises(selectedAssignment.exerciseList)}\r\n                                        </div>\r\n                                      </div>\r\n                                    </Col>\r\n                                </Row>\r\n                            </Card.Body>\r\n                        </Card>\r\n                      </Col>\r\n                    </Row>      \r\n              </Col>\r\n            </Row>\r\n          </Container> \r\n     </div>\r\n     )\r\n\r\n}\r\n\r\n\r\n\r\nexport default ClientView;","C:\\Users\\Btp12\\Documents\\JOB\\INTERVIEW CODE\\MIRA\\MiraTherapeutics2020\\app\\src\\redux\\reducer.js",[],"C:\\Users\\Btp12\\Documents\\JOB\\INTERVIEW CODE\\MIRA\\MiraTherapeutics2020\\app\\src\\redux\\slices\\therapistSlice.js",["230","231"],"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\n//import { postRecord } from \"../../utils/lssApi\";\r\n// create postClient equivalent of this\r\n\r\n\r\n/*\r\n    id: \"\",\r\n    name: \"initial name\",\r\n    clientSince: \"\",\r\n    nextSession: \"\",\r\n    loading: \"idle\",\r\n    currentRequestId: undefined\r\n\r\n    {\r\n        \"PjohnDoe1\": [\r\n            {\r\n                Assignment1\r\n            },\r\n            {\r\n                Assignment2\r\n            }\r\n        ],\r\n\r\n        \"PpattyPancakes1\": [\r\n            {\r\n                Assignment1\r\n            },\r\n            {\r\n                Assignment2\r\n            }\r\n        ]\r\n    }\r\n\r\n*/\r\n\r\n\r\nconst therapistSlice = createSlice({\r\n  name: \"therapist\",\r\n  initialState: {\r\n    therapist: {\r\n      id: \"\",\r\n      name: \"Miranda Cosgrove\",\r\n      clientInfo: {} //client list mapped by patient ids\r\n    },\r\n  },\r\n  reducers: {\r\n    updateTherapistClientList: (state, action) => {\r\n      state.therapist.clientInfo = action.payload.clientInfo;\r\n    },\r\n\r\n    addAssignmentToClient: (state, action) => {\r\n        let patientId = action.payload.assignment.patientId;\r\n        let assignment = action.payload.assignment;\r\n        state.therapist.clientInfo[patientId].unshift(assignment)\r\n    },\r\n\r\n    completeClientAssignment: (state, action) => {\r\n        let patientId = action.payload.assignment.patientId;\r\n        // Find the index of the assignment that matches the supplied assignment ID for the supplied patient ID\r\n        console.log(state.therapist.therapist)\r\n        console.log(action.payload)\r\n        let targetIndex = state.therapist.clientInfo[patientId].findIndex((assignment) => assignment._id == action.payload.assignment._id);\r\n        // Update the completedByTherapist field of the assignment at targetIndex to indicate that the therapist marked it as completed\r\n        state.therapist.clientInfo[patientId][targetIndex].completedByTherapist = true;\r\n\r\n    }\r\n  },\r\n  extraReducers: {\r\n    \r\n  },\r\n});\r\n\r\nexport const { updateTherapistClientList, addAssignmentToClient, completeClientAssignment } = therapistSlice.actions;\r\n\r\nexport default therapistSlice.reducer;\r\n","C:\\Users\\Btp12\\Documents\\JOB\\INTERVIEW CODE\\MIRA\\MiraTherapeutics2020\\app\\src\\redux\\slices\\assignmentSlice.js",["232"],"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport { closeClient } from \"./clientSlice\";\r\n\r\ncloseClient()\r\n\r\nconst emptyAssignment = {\r\n  assignmentProgress: 0,\r\n  dateAssigned: new Date(),\r\n  overallInstructions: \"\",\r\n  visitNumber: 0,\r\n  therapistName: \"Jane Doe\",\r\n  therapistId: \"TjaneDoe1\",\r\n  completedByTherapist: false,\r\n  patientId: \"\",\r\n  patientName: \"\",\r\n  clientName: \"\",\r\n  due: new Date(),\r\n  status: '',\r\n  nextSession: new Date(),\r\n  exerciseList: [],\r\n  chosenExercise: {}\r\n}\r\n\r\nconst assignmentSlice = createSlice({\r\n  name: \"assignment\",\r\n  initialState: {\r\n    currentAssignment: emptyAssignment,\r\n  },\r\n  reducers: {\r\n    openAssignment: (state, action) => {\r\n      state.currentAssignment = action.payload.assignment;\r\n      state.currentAssignment.chosenExercise = action.payload.chosenExercise\r\n    },\r\n    addExercise: (state, action) => {\r\n      let exercise = action.payload.exercise;\r\n      state.currentAssignment.exerciseList.push(exercise);\r\n    },\r\n    editExercise: (state, action) => {\r\n      let exerciseIndexInList = action.payload.exercise.id\r\n      state.currentAssignment.exerciseList[exerciseIndexInList] = action.payload.exercise\r\n    },\r\n    clearAssignment: (state, action) => {\r\n      state.currentAssignment = emptyAssignment\r\n    }\r\n  },\r\n  extraReducers: {\r\n    [closeClient.pending]: (state, action) => {\r\n      if (state.loading === \"idle\") {\r\n        state.loading = \"pending\";\r\n        state.currentRequestId = action.meta.requestId;\r\n      }\r\n    },\r\n    [closeClient.fulfilled]: (state, action) => {\r\n      if (\r\n        state.loading === \"pending\" &&\r\n        state.currentRequestId === action.meta.requestId\r\n      ) {\r\n        state.loading = \"idle\";\r\n        state.currentRequestId = undefined;\r\n      }\r\n    },\r\n    [closeClient.rejected]: (state, action) => {\r\n      if (\r\n        state.loading === \"pending\" &&\r\n        state.currentRequestId === action.meta.requestId\r\n      ) {\r\n        state.loading = \"idle\";\r\n        state.currentRequestId = undefined;\r\n      }\r\n    }\r\n  }\r\n});\r\n\r\nexport const {\r\n  openAssignment,\r\n  addExercise,\r\n  editExercise,\r\n  clearAssignment\r\n} = assignmentSlice.actions;\r\n\r\nexport default assignmentSlice.reducer;\r\n","C:\\Users\\Btp12\\Documents\\JOB\\INTERVIEW CODE\\MIRA\\MiraTherapeutics2020\\app\\src\\api\\clientAPI.js",["233"],"import { __esModule } from \"redux-persist/lib/storage/createWebStorage\"\r\n\r\nexport const getAssignments = async (patientID) => {\r\n    let assignments = await fetch(`http://localhost:3080/assignments/patient/${patientID}`)\r\n    assignments = await assignments.json()\r\n    assignments.sort((a, b) => b.visitNumber - a.visitNumber)\r\n    return assignments\r\n}\r\n\r\nexport const closeAssignment = async (assignmentObject) => {\r\n    // mark the assignment as completed by the therapist\r\n    let closedAssignment = Object.assign({}, assignmentObject);\r\n    console.log(`Read only property: ${closedAssignment.completedByTherapist}`)\r\n    closedAssignment.completedByTherapist = true\r\n    const postSettings = {\r\n        method: 'POST',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(closedAssignment),\r\n      }\r\n\r\n      await fetch(`http://localhost:3080/assignments/${assignmentObject._id}/edit`, postSettings)\r\n}\r\n\r\nexport const postAssignment = async (assignmentObject) => {\r\n  const postSettings = {\r\n    method: 'POST',\r\n    headers: {\r\n      'Accept': 'application/json',\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify(assignmentObject),\r\n  }\r\n\r\n  await fetch(`http://localhost:3080/assignments/`, postSettings)\r\n}","C:\\Users\\Btp12\\Documents\\JOB\\INTERVIEW CODE\\MIRA\\MiraTherapeutics2020\\app\\src\\redux\\slices\\clientSlice.js",[],{"ruleId":"234","severity":1,"message":"235","line":6,"column":8,"nodeType":"236","messageId":"237","endLine":6,"endColumn":11},{"ruleId":"238","replacedBy":"239"},{"ruleId":"240","replacedBy":"241"},{"ruleId":"234","severity":1,"message":"242","line":6,"column":8,"nodeType":"236","messageId":"237","endLine":6,"endColumn":13},{"ruleId":"234","severity":1,"message":"243","line":11,"column":3,"nodeType":"236","messageId":"237","endLine":11,"endColumn":14},{"ruleId":"234","severity":1,"message":"244","line":5,"column":17,"nodeType":"236","messageId":"237","endLine":5,"endColumn":27},{"ruleId":"234","severity":1,"message":"245","line":5,"column":50,"nodeType":"236","messageId":"237","endLine":5,"endColumn":59},{"ruleId":"234","severity":1,"message":"246","line":8,"column":19,"nodeType":"236","messageId":"237","endLine":8,"endColumn":31},{"ruleId":"234","severity":1,"message":"247","line":18,"column":10,"nodeType":"236","messageId":"237","endLine":18,"endColumn":24},{"ruleId":"234","severity":1,"message":"248","line":40,"column":22,"nodeType":"236","messageId":"237","endLine":40,"endColumn":33},{"ruleId":"234","severity":1,"message":"249","line":66,"column":27,"nodeType":"236","messageId":"237","endLine":66,"endColumn":45},{"ruleId":"234","severity":1,"message":"250","line":68,"column":11,"nodeType":"236","messageId":"237","endLine":68,"endColumn":23},{"ruleId":"251","severity":1,"message":"252","line":76,"column":101,"nodeType":"253","messageId":"254","endLine":76,"endColumn":103},{"ruleId":"251","severity":1,"message":"252","line":76,"column":140,"nodeType":"253","messageId":"254","endLine":76,"endColumn":142},{"ruleId":"251","severity":1,"message":"252","line":76,"column":180,"nodeType":"253","messageId":"254","endLine":76,"endColumn":182},{"ruleId":"234","severity":1,"message":"255","line":90,"column":11,"nodeType":"236","messageId":"237","endLine":90,"endColumn":23},{"ruleId":"234","severity":1,"message":"256","line":91,"column":11,"nodeType":"236","messageId":"237","endLine":91,"endColumn":28},{"ruleId":"251","severity":1,"message":"257","line":92,"column":29,"nodeType":"253","messageId":"254","endLine":92,"endColumn":31},{"ruleId":"258","severity":1,"message":"259","line":98,"column":15,"nodeType":"260","endLine":101,"endColumn":6},{"ruleId":"251","severity":1,"message":"257","line":106,"column":46,"nodeType":"253","messageId":"254","endLine":106,"endColumn":48},{"ruleId":"251","severity":1,"message":"257","line":106,"column":104,"nodeType":"253","messageId":"254","endLine":106,"endColumn":106},{"ruleId":"251","severity":1,"message":"257","line":106,"column":157,"nodeType":"253","messageId":"254","endLine":106,"endColumn":159},{"ruleId":"251","severity":1,"message":"257","line":106,"column":206,"nodeType":"253","messageId":"254","endLine":106,"endColumn":208},{"ruleId":"251","severity":1,"message":"257","line":106,"column":267,"nodeType":"253","messageId":"254","endLine":106,"endColumn":269},{"ruleId":"251","severity":1,"message":"257","line":148,"column":25,"nodeType":"253","messageId":"254","endLine":148,"endColumn":27},{"ruleId":"251","severity":1,"message":"257","line":190,"column":23,"nodeType":"253","messageId":"254","endLine":190,"endColumn":25},{"ruleId":"251","severity":1,"message":"257","line":191,"column":26,"nodeType":"253","messageId":"254","endLine":191,"endColumn":28},{"ruleId":"251","severity":1,"message":"257","line":211,"column":30,"nodeType":"253","messageId":"254","endLine":211,"endColumn":32},{"ruleId":"261","severity":1,"message":"262","line":220,"column":17,"nodeType":"263","messageId":"264","endLine":233,"endColumn":18},{"ruleId":"234","severity":1,"message":"265","line":253,"column":11,"nodeType":"236","messageId":"237","endLine":253,"endColumn":29},{"ruleId":"261","severity":1,"message":"262","line":281,"column":13,"nodeType":"263","messageId":"264","endLine":311,"endColumn":14},{"ruleId":"251","severity":1,"message":"257","line":383,"column":209,"nodeType":"253","messageId":"254","endLine":383,"endColumn":211},{"ruleId":"234","severity":1,"message":"266","line":10,"column":8,"nodeType":"236","messageId":"237","endLine":10,"endColumn":22},{"ruleId":"251","severity":1,"message":"257","line":27,"column":24,"nodeType":"253","messageId":"254","endLine":27,"endColumn":26},{"ruleId":"234","severity":1,"message":"267","line":40,"column":23,"nodeType":"236","messageId":"237","endLine":40,"endColumn":37},{"ruleId":"258","severity":1,"message":"268","line":90,"column":3,"nodeType":"236","endLine":90,"endColumn":12,"suggestions":"269"},{"ruleId":"234","severity":1,"message":"244","line":1,"column":17,"nodeType":"236","messageId":"237","endLine":1,"endColumn":27},{"ruleId":"234","severity":1,"message":"245","line":1,"column":50,"nodeType":"236","messageId":"237","endLine":1,"endColumn":59},{"ruleId":"234","severity":1,"message":"270","line":3,"column":10,"nodeType":"236","messageId":"237","endLine":3,"endColumn":21},{"ruleId":"234","severity":1,"message":"243","line":5,"column":19,"nodeType":"236","messageId":"237","endLine":5,"endColumn":30},{"ruleId":"234","severity":1,"message":"271","line":5,"column":58,"nodeType":"236","messageId":"237","endLine":5,"endColumn":69},{"ruleId":"234","severity":1,"message":"272","line":20,"column":10,"nodeType":"236","messageId":"237","endLine":20,"endColumn":20},{"ruleId":"234","severity":1,"message":"273","line":38,"column":13,"nodeType":"236","messageId":"237","endLine":38,"endColumn":22},{"ruleId":"258","severity":1,"message":"259","line":107,"column":15,"nodeType":"260","endLine":109,"endColumn":6},{"ruleId":"234","severity":1,"message":"274","line":134,"column":7,"nodeType":"236","messageId":"237","endLine":134,"endColumn":29},{"ruleId":"251","severity":1,"message":"252","line":151,"column":26,"nodeType":"253","messageId":"254","endLine":151,"endColumn":28},{"ruleId":"234","severity":1,"message":"275","line":202,"column":16,"nodeType":"236","messageId":"237","endLine":202,"endColumn":32},{"ruleId":"234","severity":1,"message":"276","line":213,"column":16,"nodeType":"236","messageId":"237","endLine":213,"endColumn":24},{"ruleId":"234","severity":1,"message":"247","line":24,"column":26,"nodeType":"236","messageId":"237","endLine":24,"endColumn":40},{"ruleId":"258","severity":1,"message":"277","line":53,"column":5,"nodeType":"236","endLine":53,"endColumn":14,"suggestions":"278"},{"ruleId":"258","severity":1,"message":"259","line":53,"column":15,"nodeType":"260","endLine":75,"endColumn":6},{"ruleId":"234","severity":1,"message":"279","line":91,"column":9,"nodeType":"236","messageId":"237","endLine":91,"endColumn":16},{"ruleId":"251","severity":1,"message":"252","line":141,"column":50,"nodeType":"253","messageId":"254","endLine":141,"endColumn":52},{"ruleId":"251","severity":1,"message":"252","line":149,"column":70,"nodeType":"253","messageId":"254","endLine":149,"endColumn":72},{"ruleId":"251","severity":1,"message":"252","line":152,"column":37,"nodeType":"253","messageId":"254","endLine":152,"endColumn":39},{"ruleId":"251","severity":1,"message":"252","line":156,"column":51,"nodeType":"253","messageId":"254","endLine":156,"endColumn":53},{"ruleId":"251","severity":1,"message":"257","line":173,"column":32,"nodeType":"253","messageId":"254","endLine":173,"endColumn":34},{"ruleId":"251","severity":1,"message":"257","line":218,"column":32,"nodeType":"253","messageId":"254","endLine":218,"endColumn":34},{"ruleId":"234","severity":1,"message":"280","line":415,"column":9,"nodeType":"236","messageId":"237","endLine":415,"endColumn":21},{"ruleId":"234","severity":1,"message":"281","line":1,"column":10,"nodeType":"236","messageId":"237","endLine":1,"endColumn":20},{"ruleId":"234","severity":1,"message":"282","line":1,"column":23,"nodeType":"236","messageId":"237","endLine":1,"endColumn":39},{"ruleId":"251","severity":1,"message":"257","line":62,"column":106,"nodeType":"253","messageId":"254","endLine":62,"endColumn":108},{"ruleId":"234","severity":1,"message":"282","line":1,"column":23,"nodeType":"236","messageId":"237","endLine":1,"endColumn":39},{"ruleId":"234","severity":1,"message":"283","line":2,"column":10,"nodeType":"236","messageId":"237","endLine":2,"endColumn":25},{"ruleId":"234","severity":1,"message":"235","line":6,"column":8,"nodeType":"236","messageId":"237","endLine":6,"endColumn":11},{"ruleId":"238","replacedBy":"284"},{"ruleId":"240","replacedBy":"285"},{"ruleId":"234","severity":1,"message":"242","line":6,"column":8,"nodeType":"236","messageId":"237","endLine":6,"endColumn":13},{"ruleId":"234","severity":1,"message":"243","line":11,"column":3,"nodeType":"236","messageId":"237","endLine":11,"endColumn":14},{"ruleId":"234","severity":1,"message":"286","line":10,"column":8,"nodeType":"236","messageId":"237","endLine":10,"endColumn":22},{"ruleId":"251","severity":1,"message":"257","line":27,"column":24,"nodeType":"253","messageId":"254","endLine":27,"endColumn":26},{"ruleId":"234","severity":1,"message":"267","line":40,"column":23,"nodeType":"236","messageId":"237","endLine":40,"endColumn":37},{"ruleId":"258","severity":1,"message":"268","line":90,"column":3,"nodeType":"236","endLine":90,"endColumn":12,"suggestions":"287"},{"ruleId":"234","severity":1,"message":"244","line":1,"column":17,"nodeType":"236","messageId":"237","endLine":1,"endColumn":27},{"ruleId":"234","severity":1,"message":"245","line":1,"column":50,"nodeType":"236","messageId":"237","endLine":1,"endColumn":59},{"ruleId":"234","severity":1,"message":"246","line":4,"column":19,"nodeType":"236","messageId":"237","endLine":4,"endColumn":31},{"ruleId":"234","severity":1,"message":"248","line":22,"column":22,"nodeType":"236","messageId":"237","endLine":22,"endColumn":33},{"ruleId":"234","severity":1,"message":"249","line":27,"column":27,"nodeType":"236","messageId":"237","endLine":27,"endColumn":45},{"ruleId":"234","severity":1,"message":"250","line":29,"column":11,"nodeType":"236","messageId":"237","endLine":29,"endColumn":23},{"ruleId":"251","severity":1,"message":"252","line":39,"column":101,"nodeType":"253","messageId":"254","endLine":39,"endColumn":103},{"ruleId":"251","severity":1,"message":"252","line":39,"column":140,"nodeType":"253","messageId":"254","endLine":39,"endColumn":142},{"ruleId":"251","severity":1,"message":"252","line":39,"column":180,"nodeType":"253","messageId":"254","endLine":39,"endColumn":182},{"ruleId":"234","severity":1,"message":"255","line":55,"column":11,"nodeType":"236","messageId":"237","endLine":55,"endColumn":23},{"ruleId":"234","severity":1,"message":"256","line":56,"column":11,"nodeType":"236","messageId":"237","endLine":56,"endColumn":28},{"ruleId":"251","severity":1,"message":"257","line":57,"column":29,"nodeType":"253","messageId":"254","endLine":57,"endColumn":31},{"ruleId":"258","severity":1,"message":"259","line":63,"column":15,"nodeType":"260","endLine":65,"endColumn":6},{"ruleId":"251","severity":1,"message":"257","line":90,"column":25,"nodeType":"253","messageId":"254","endLine":90,"endColumn":27},{"ruleId":"251","severity":1,"message":"257","line":133,"column":23,"nodeType":"253","messageId":"254","endLine":133,"endColumn":25},{"ruleId":"251","severity":1,"message":"257","line":139,"column":23,"nodeType":"253","messageId":"254","endLine":139,"endColumn":25},{"ruleId":"251","severity":1,"message":"257","line":140,"column":26,"nodeType":"253","messageId":"254","endLine":140,"endColumn":28},{"ruleId":"251","severity":1,"message":"257","line":160,"column":30,"nodeType":"253","messageId":"254","endLine":160,"endColumn":32},{"ruleId":"261","severity":1,"message":"262","line":168,"column":17,"nodeType":"263","messageId":"264","endLine":181,"endColumn":18},{"ruleId":"261","severity":1,"message":"262","line":231,"column":13,"nodeType":"263","messageId":"264","endLine":258,"endColumn":14},{"ruleId":"251","severity":1,"message":"257","line":321,"column":199,"nodeType":"253","messageId":"254","endLine":321,"endColumn":201},{"ruleId":"234","severity":1,"message":"244","line":1,"column":17,"nodeType":"236","messageId":"237","endLine":1,"endColumn":27},{"ruleId":"234","severity":1,"message":"245","line":1,"column":50,"nodeType":"236","messageId":"237","endLine":1,"endColumn":59},{"ruleId":"234","severity":1,"message":"243","line":4,"column":19,"nodeType":"236","messageId":"237","endLine":4,"endColumn":30},{"ruleId":"234","severity":1,"message":"271","line":4,"column":58,"nodeType":"236","messageId":"237","endLine":4,"endColumn":69},{"ruleId":"234","severity":1,"message":"273","line":36,"column":13,"nodeType":"236","messageId":"237","endLine":36,"endColumn":22},{"ruleId":"258","severity":1,"message":"259","line":66,"column":15,"nodeType":"260","endLine":68,"endColumn":6},{"ruleId":"251","severity":1,"message":"252","line":98,"column":30,"nodeType":"253","messageId":"254","endLine":98,"endColumn":32},{"ruleId":"258","severity":1,"message":"277","line":49,"column":5,"nodeType":"236","endLine":49,"endColumn":14,"suggestions":"288"},{"ruleId":"258","severity":1,"message":"259","line":49,"column":15,"nodeType":"260","endLine":71,"endColumn":6},{"ruleId":"234","severity":1,"message":"279","line":87,"column":9,"nodeType":"236","messageId":"237","endLine":87,"endColumn":16},{"ruleId":"251","severity":1,"message":"252","line":139,"column":50,"nodeType":"253","messageId":"254","endLine":139,"endColumn":52},{"ruleId":"251","severity":1,"message":"252","line":147,"column":70,"nodeType":"253","messageId":"254","endLine":147,"endColumn":72},{"ruleId":"251","severity":1,"message":"252","line":150,"column":37,"nodeType":"253","messageId":"254","endLine":150,"endColumn":39},{"ruleId":"251","severity":1,"message":"252","line":154,"column":51,"nodeType":"253","messageId":"254","endLine":154,"endColumn":53},{"ruleId":"251","severity":1,"message":"257","line":171,"column":32,"nodeType":"253","messageId":"254","endLine":171,"endColumn":34},{"ruleId":"251","severity":1,"message":"257","line":216,"column":32,"nodeType":"253","messageId":"254","endLine":216,"endColumn":34},{"ruleId":"234","severity":1,"message":"282","line":1,"column":23,"nodeType":"236","messageId":"237","endLine":1,"endColumn":39},{"ruleId":"251","severity":1,"message":"257","line":62,"column":106,"nodeType":"253","messageId":"254","endLine":62,"endColumn":108},{"ruleId":"234","severity":1,"message":"282","line":1,"column":23,"nodeType":"236","messageId":"237","endLine":1,"endColumn":39},{"ruleId":"234","severity":1,"message":"281","line":1,"column":10,"nodeType":"236","messageId":"237","endLine":1,"endColumn":20},"no-unused-vars","'App' is defined but never used.","Identifier","unusedVar","no-native-reassign",["289"],"no-negated-in-lhs",["290"],"'axios' is defined but never used.","'MDBCardBody' is defined but never used.","'useContext' is defined but never used.","'Component' is defined but never used.","'MDBCardTitle' is defined but never used.","'getAssignments' is defined but never used.","'setRedirect' is assigned a value but never used.","'setAssignmentState' is assigned a value but never used.","'exerciseList' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'dueByChoices' is assigned a value but never used.","'frequenceyChoices' is assigned a value but never used.","Expected '===' and instead saw '=='.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'formatDateToString' is assigned a value but never used.","'bonelliPicture' is defined but never used.","'setPatientList' is assigned a value but never used.","React Hook useEffect contains a call to 'setFetchedTherapistClientInfo'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [fetchedTherapistClientInfo, updateTherapistStore] as a second argument to the useEffect Hook.",["291"],"'FormControl' is defined but never used.","'MDBCardText' is defined but never used.","'openClient' is defined but never used.","'therapist' is assigned a value but never used.","'postAssignmentToClient' is assigned a value but never used.","'assignAssignment' is defined but never used.","'toUpdate' is assigned a value but never used.","React Hook useEffect contains a call to 'setAssignmentsFetched'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [assignmentsFetched, assignments] as a second argument to the useEffect Hook.",["292"],"'dueDate' is assigned a value but never used.","'CustomToggle' is assigned a value but never used.","'__esModule' is defined but never used.","'createAsyncThunk' is defined but never used.","'closeAssignment' is defined but never used.",["289"],["290"],"'acasterPicture' is defined but never used.",["293"],["294"],"no-global-assign","no-unsafe-negation",{"desc":"295","fix":"296"},{"desc":"297","fix":"298"},{"desc":"295","fix":"299"},{"desc":"297","fix":"300"},"Add dependencies array: [fetchedTherapistClientInfo, updateTherapistStore]",{"range":"301","text":"302"},"Add dependencies array: [assignmentsFetched, assignments]",{"range":"303","text":"304"},{"range":"305","text":"302"},{"range":"306","text":"304"},[2927,2927],", [fetchedTherapistClientInfo, updateTherapistStore]",[2884,2884],", [assignmentsFetched, assignments]",[2923,2923],[2985,2985]]