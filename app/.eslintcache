[{"/Users/ngattuso/dev/Mira/senior-design-2020/app/src/views/AssignmentFormFn.js":"1","/Users/ngattuso/dev/Mira/senior-design-2020/app/src/index.js":"2","/Users/ngattuso/dev/Mira/senior-design-2020/app/src/App.js":"3","/Users/ngattuso/dev/Mira/senior-design-2020/app/src/reportWebVitals.js":"4","/Users/ngattuso/dev/Mira/senior-design-2020/app/src/redux/configureStore.js":"5","/Users/ngattuso/dev/Mira/senior-design-2020/app/src/views/ClientViewFn.js":"6","/Users/ngattuso/dev/Mira/senior-design-2020/app/src/views/PracticeView.js":"7","/Users/ngattuso/dev/Mira/senior-design-2020/app/src/views/ExerciseFormFn.js":"8","/Users/ngattuso/dev/Mira/senior-design-2020/app/src/redux/slices/clientSlice.js":"9","/Users/ngattuso/dev/Mira/senior-design-2020/app/src/api/clientAPI.js":"10"},{"size":9242,"mtime":1618268884870,"results":"11","hashOfConfig":"12"},{"size":1441,"mtime":1618272708789,"results":"13","hashOfConfig":"12"},{"size":3282,"mtime":1618273341227,"results":"14","hashOfConfig":"12"},{"size":362,"mtime":1618268452129,"results":"15","hashOfConfig":"12"},{"size":770,"mtime":1618273367017,"results":"16","hashOfConfig":"12"},{"size":15716,"mtime":1618268884871,"results":"17","hashOfConfig":"12"},{"size":5949,"mtime":1618273356887,"results":"18","hashOfConfig":"12"},{"size":14135,"mtime":1618268884871,"results":"19","hashOfConfig":"12"},{"size":1813,"mtime":1618273337748,"results":"20","hashOfConfig":"12"},{"size":838,"mtime":1618268884860,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"25"},"8g9r0z",{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"25"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"25"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"25"},"/Users/ngattuso/dev/Mira/senior-design-2020/app/src/views/AssignmentFormFn.js",["47","48","49","50","51","52","53","54","55"],"import React, { useContext, useState, useEffect, Component } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { FormControl } from '@material-ui/core';\nimport '../css/ExerciseForm.css'; //tf \nimport { MDBCard, MDBCardBody, MDBContainer,MDBCardTitle,MDBCardText } from \"mdbreact\";\nimport logo from '../Mira.jpg';\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Container from 'react-bootstrap/Container'\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../css/AssignmentForm.css'\nimport EditIcon from '@material-ui/icons/Edit';\nimport { Link } from \"react-router-dom\";\n\n\n\n/*function SetUpNextSession(){\n    const [startDate, setStartDate] = useState(new Date());\n}*/\nfunction AssignmentForm() {\n    var today = new Date();\n    var dd = String(today.getDate()).padStart(2, '0');\n    var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n    var yyyy = today.getFullYear();\n    today = mm + '/' + dd + '/' + yyyy;\n\n    const [dateState, setDateState] = useState({\n        startDate: new Date()\n    })\n\n    const [setAssignment, setAssignmentState] = useState({\n        dateAssigned: today,\n        visitNumber: 0,\n        therapistName: \"\",\n        patientId: \"\",\n        clientName: \"\",\n        due: '',\n        status: '',\n        nextSession: \"\",\n        exercises: [\n            {\n                exerciseTitle: \"\",\n                exerciseType: \"\",\n                dueDate: new Date(),\n                frequency: \"\",\n                patientName: \"\",\n                patientId: \"\",\n                progress: 0,\n                specialInstructions: \"\",\n                goal: 0\n            },\n            \n        ]\n    })\n    \n\n    \n    \n    /*const assignment = //should be updated based on store somehow (once the user comes back from editing/adding an exercise)\n    {\n        dateAssigned: today,\n        visitNumber: 0,\n        therapistName: \"\",\n        clientName: \"\",\n        due: '',\n        status: '',\n        nextSession: \"\",\n        exercises: [\n            {\n                type: \"\",\n                name: \"\",\n                due: '',\n                completionStatus: \"\",\n                completionAmount: 0,\n                frequency: \"\",\n                specialInstructions: \"\"\n            },\n            \n        ]\n    }*/\n\nasync function getAssignments(patientID){\n    let assignments = await fetch(`http://localhost:3080/assignments/patient/${patientID}`)\n    assignments = await assignments.json()\n    assignments.sort((a, b) => a.visitNumber - b.visitNumber)\n    return assignments;\n}\n\n    useEffect(async () => {\n        var data = await getAssignments('PjohnDoe1');\n        // update the state with the assignments in the right order\n        // make the assignment that's visible to the therapist the most recent one\n        //this.setState((state) => ({selectedAssignment: state.patient.assignments[state.patient.assignments.length - 1]}))\n        //setSelectedAssignment(data[data.length - 1])\n        setAssignmentState({\n            dateAssigned: today,\n            visitNumber: data[data.length].visitNumber + 1,\n            therapistName: data[data.length].therapistName,\n            patientId: data[data.length].patientId,\n            clientName: data[data.length].clientName,\n            due: new Date(),\n            status: 0,\n            nextSession: new Date(),\n            exercises: [\n                {\n                    exerciseTitle: \"\",\n                    exerciseType: \"\",\n                    dueDate: new Date(),\n                    frequency: \"\",\n                    patientName: \"\",\n                    patientId: \"\",\n                    progress: 0,\n                    specialInstructions: \"\",\n                    goal: 0\n                },\n    \n            ]\n        });\n        \n    });\nfunction getExercises(exercises, next) {\n    \n    const result = exercises.map((exercise) =>\n    <Row>\n        <div className = \"Exercise-card-row\">\n            <MDBCard className = \"Exercise-card-body\">\n                <p className=\"exerciseTitle\">{exercise.name} <Link to = {{\n                    pathname: \"/ExerciseForm\",\n                    data: {editExercise: exercise,\n                            addedExercises: exercises,\n                            nextSessionDate: [String(next.getMonth() + 1), String(next.getDate()), String(next.getFullYear())]}}}><EditIcon className = \"Edit-icon\"/></Link></p>\n                <p className=\"exerciseCard\">{exercise.frequency}</p>\n                <p className=\"exerciseCard\">Due By: {exercise.due}</p>\n                <p className=\"exerciseCard\">Special Instructions: {exercise.specialInstructions}</p>\n            </MDBCard>\n        </div>\n    </Row>\n    );\n    return result;\n            \n}\n\n\n\n    \nreturn(\n<div>\n    <div className = \"App-logo-container\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n    </div>\n    <div className = \"Client-view-title-container\">\n        <p className = \"Client-view-title-text\">Assignment Form</p> {/*Get this from previous page*/}\n    </div>\n    <Container fluid className = \"Assignment-information-background-container\">\n        <Row className = \"Assignment-information-background\">\n        <div className = \"Assignment-information-container\">\n            <Col>\n            <MDBContainer className = \"Assignment-information-card\">\n                <MDBCard className = \"Assignment-information-body\">\n                    <p className = \"Assignment-information-top\">Date Created: {setAssignment.dateAssigned} Visit Number: {setAssignment.visitNumber}</p>\n                    <p className = \"Assignment-information-top\">Next Session: \n                        \n                            <div>\n                                <DatePicker\n                                    selected={dateState.startDate}\n                                    onSelect={selected => setDateState({startDate: new Date(selected.getFullYear(), selected.getMonth(), selected.getDate())})}\n                                    \n                                    //onChange={selected => this.setState({startDate: selected})}\n                                    name=\"startDate\"\n                                />\n                                {console.log(dateState.startDate)}\n                            </div>\n                        \n                    </p>\n                    <p className = \"Assignment-information-top\">Therapist: {setAssignment.therapistName}</p>\n                    <p className = \"Assignment-information-top\">Client Name: {setAssignment.clientName}</p>\n                    <h2>Exercises</h2>\n                    <div className = \"Exercise-card-container\">\n                    {console.log(dateState.startDate)}\n                    {getExercises(setAssignment.exercises, dateState.startDate)}\n                        <Row>\n                            <MDBCard className = \"Add-exercise\">\n                                \n                                <Link to = {{ \n                                    pathname: \"/ExerciseForm\",\n                                    data: {addedExercises: setAssignment.exercises,\n                                            nextSessionDate: [String(dateState.startDate.getMonth() + 1), String(dateState.startDate.getDate()), String(dateState.startDate.getFullYear())] }\n                                    }}>\n                                    <Button variant=\"link\" size=\"lg\">\n                                        Add Exercise\n                                    </Button>\n                                </Link>\n                            </MDBCard>\n                        </Row>\n                    </div>\n                </MDBCard>          \n            </MDBContainer>\n            </Col>\n        </div>\n        <div className = \"Overall-instructions-container\">\n            <Col>\n                <MDBContainer className = \"Overall-instructions-card\">\n                    <MDBCard className = \"Overall-instructions-body\">\n                        <MDBCardTitle className = \"Overall-instructions-title\">Overall Instructions</MDBCardTitle>\n                            <Form>\n                                <Form.Group controlId=\"exerciseTitle\">\n                                    <Form.Control placeholder=\"\" />\n                                </Form.Group>\n                                <div className = \"Assignment-form-finish-button\">\n                                    <Link to = \"/ClientView\">\n                                        <Button variant=\"primary\" type=\"submit\" >\n                                            Assign {/*Need to make sure this button submits for all the user-inputted data on screen (next session for ex) */}\n                                        </Button>\n                                    </Link>\n                                </div>\n                            </Form>\n                    </MDBCard>          \n                </MDBContainer>\n            </Col>\n        </div>\n        </Row>\n    </Container> \n</div>\n)\n\n}\n\nexport default AssignmentForm;",["56","57"],"/Users/ngattuso/dev/Mira/senior-design-2020/app/src/index.js",["58"],"/Users/ngattuso/dev/Mira/senior-design-2020/app/src/App.js",["59","60"],"/Users/ngattuso/dev/Mira/senior-design-2020/app/src/reportWebVitals.js",[],"/Users/ngattuso/dev/Mira/senior-design-2020/app/src/redux/configureStore.js",[],"/Users/ngattuso/dev/Mira/senior-design-2020/app/src/views/ClientViewFn.js",["61","62","63","64","65","66","67","68","69","70","71","72","73"],"import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from \"react-redux\"\nimport '../css/ClientView.css';\nimport { MDBCard, MDBCardTitle } from \"mdbreact\";\nimport logo from '../mira-new-medium.png';\nimport {Row, Col, Container, Image, Card, /*Button*/} from 'react-bootstrap'\nimport picture from '../Bonelli-RECT.jpg';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {\n  CircularProgressbar,\n  buildStyles\n} from \"react-circular-progressbar\";\nimport \"react-circular-progressbar/dist/styles.css\";\nimport { LinearProgress } from '@material-ui/core';\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nimport {closeAssignment, getAssignments} from \"../api/clientAPI\"\n\n\nfunction ClientView() {\n\n    const [client, setClient] = useState({\n      name: \"Eddie Spaghetti\",\n      id: \"PjohnDoe1\",\n      nextSession: '1/1/2021',\n      clientSince: '1/1/2020',\n    })\n\n    const clientFromStore = useSelector((state) => state)\n\n    const [assignments, setAssignments] = useState([{\n      due: '',\n      status: 0,\n      exercises: []\n    }])\n\n    const [selectedAssignment, setSelectedAssignment] = useState({\n      due: \"\"\n    })\n\n    const [assignmentCompletionDialogOpen, setAssignmentCompletionDialogOpen] = useState(false)\n\n    const [assignmentsFetched, setAssignmentsFetched] = useState(false)\n\n    const dispatch = useDispatch()\n\n    useEffect(async () => {\n      if (!assignmentsFetched) {\n        let assignments = await getAssignments('PjohnDoe1')\n            // add an extra assignment to allow for a new one to be created if the most recent assignment has been closed\n            if (assignments[assignments.length - 1].completedByTherapist) {\n              let newAssignmentForNewBubble = {\n                visitNumber: assignments.length + 1,\n                due: undefined,\n                assignmentProgress: 0,\n                status: 0 \n                }\n\n                assignments.push(newAssignmentForNewBubble)\n            }\n            // update the state with the assignments in the right order\n            setAssignmentsFetched(true)\n            setAssignments(assignments)\n            setSelectedAssignment(assignments[assignments.length - 1])\n      }\n    });\n    \n\n// Take in an exercise and calculate expected progress. Due date is in model, assigned date is in exercise\n// Use the frequency to see how many times it should have been done by now\nfunction calculateExpectedExerciseProgress(exercise) {\n  // Return 100 if past the due date\n  if (new Date().getTime() > new Date(exercise.dueDate).getTime()) return 100\n  const millisecondsInADay = 1000*60*60*42\n  // frequency is included in the model. Will be Daily, Weekly, Bi-Weekly, or X times per week\n  const frequency = exercise.frequency\n  // progress is included in the model. It indicates how many times the exercise has been completed\n  const totalCompletions = exercise.goal\n  // Get the day the exercise was assigned\n  const assignmentDate = new Date(selectedAssignment.dateAssigned)\n  // Get the day the exercise is due\n  const dueDate = new Date(exercise.dueDate)\n  // Get today's date as a reference point\n  const today = new Date()\n  // Calculate how many days have passed since the exercise was assigned\n  let daysSinceAssignment;\n  daysSinceAssignment = (today.getTime() - assignmentDate.getTime()) / millisecondsInADay\n  // Calculate how many days there were to complete the assignment\n  let daysToCompleteExercise;\n  daysToCompleteExercise = (dueDate.getTime() - assignmentDate.getTime()) / millisecondsInADay\n  // Will indicate how many times the exercise should have been completed\n  let expectedCompletions = 0\n  switch (frequency) {\n    case \"Daily\":\n      expectedCompletions = daysSinceAssignment\n      break\n    case \"Weekly\":\n      expectedCompletions = daysSinceAssignment/7\n      break\n    case \"Bi-Weekly\":\n      expectedCompletions = daysSinceAssignment/3.5\n      break\n    default:\n      // X per week case\n      const completionsPerWeek = frequency.split(\" \")[0]\n      expectedCompletions = daysSinceAssignment/(7/completionsPerWeek)\n      break\n  }\n\n  // Return it as a percent\n  return 100 * expectedCompletions/totalCompletions\n\n}\n\n\nfunction completeAssignmentButton() {\n\n  const handleClickOpen = () => {\n      setAssignmentCompletionDialogOpen(true)\n  }\n\n  const handleClose = () => {\n      setAssignmentCompletionDialogOpen(false)\n  }\n\n\n  return (<div className = \"Complete-assignment-button-div\">\n  <Button className = \"Complete-assignment-button\" variant=\"outlined\" color=\"primary\" onClick={handleClickOpen} disabled = {selectedAssignment.completedByTherapist}>\n        {selectedAssignment.completedByTherapist != undefined ? \"Complete Assignment\" : \"Create Assignment\"}\n      </Button>\n      <Dialog\n        open = {assignmentCompletionDialogOpen}\n        onClose={handleClose}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">{selectedAssignment.due != undefined ? \"Complete Assignment?\" : \"Create Assignment?\"}</DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n            {selectedAssignment.due != undefined ? \"Are you sure you want to complete the selected assignment?\" : \"Would you like to create a new assignment?\"}\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={selectedAssignment.due != undefined ? completeAssignment : (() => {alert(\"You want to make a new assignment\"); setAssignmentCompletionDialogOpen(false)})} color=\"primary\">\n            Yes\n          </Button>\n          <Button onClick={handleClose} color=\"primary\" autoFocus>\n            No\n          </Button>\n        </DialogActions>\n      </Dialog>\n      </div>)\n}\n\nfunction completeAssignment() {\n  // Assignments are sorted in descending order of visitNumber (whatever nth visit during which they were assigned)\n  // change status of selected assignment to \"Complete\"\n  let targetVisitNumber = selectedAssignment.visitNumber\n  let data = assignments\n  for (let assignment of data) {\n    if (assignment.visitNumber == targetVisitNumber) {\n      closeAssignment(assignment)\n    }\n  }\n\n  // Check if the newest assignment is an actual assignment. If not, make a new barebones assignment so that a new bubbble can be made. Just exists with required fields for visuals\n  if (data[data.length - 1].completedByTherapist) {\n    let newAssignmentForNewBubble = {\n    visitNumber: data.length + 1,\n    due: undefined,\n    assignmentProgress: 0,\n    status: 0\n    \n    }\n    data.push(newAssignmentForNewBubble)\n  }\n    setAssignments(data)\n    setSelectedAssignment(data[data.length - 1])\n    setAssignmentCompletionDialogOpen(false)\n}\n\nfunction changeVisibleAssignment(visitNumber) {\n  // change the assignment being shown to a new one based on the visitNumber provided by the assignment bubble\n  for (let assignment of assignments) {\n    if (assignment.visitNumber == visitNumber) {\n      setSelectedAssignment(assignment)\n      break\n    }\n  }\n\n  \n\n}\n\n// Take in an assignment. Return the total progress as a percent. Divide assignment progress (completions so far) by total amount of completions expected\nfunction calculateAssignmentProgressAsPercent(assignment) {\n  if (assignment.due) {\n    let totalCompletions = 0;\n    for (let exercise of assignment.exerciseList) {\n      totalCompletions += exercise.goal\n    }\n    return 100 * assignment.assignmentProgress / totalCompletions\n  }\n  return 0\n}\n\nfunction getBubbleInfo(assignmentsList) {\n  const ongoingBubbleColor = '#00b5d9'\n  const completedBubbleColor = '#20315f'\n  const completedBubblePathColor = '#FFFFFF'\n  const ongoingBubblePathColor = '#ac6ef3'\n    let progressBubbleComponents = []\n    // 7 Assignments on the row at a time\n    for (let assignmentIndex = 0; assignmentIndex < 7; assignmentIndex++) {\n      // Make an invisible assignment bubble so the spacing still works out\n      if (assignmentsList.length <= assignmentIndex) {\n        progressBubbleComponents.push(\n          <div className = \"Progress-bubble-column-hidden\">\n            <CircularProgressbar  className = \"Progress-bubbles\"\n            background\n            backgroundPadding={6}/>\n          </div>\n        )\n      } else {\n        let targetIndex = assignmentsList.length - assignmentIndex - 1\n        let targetAssignment = assignmentsList[targetIndex]\n        progressBubbleComponents.unshift(\n          <div className = \"Progress-bubble-column\" onClick = {() => changeVisibleAssignment(targetAssignment.visitNumber)}>\n            <CircularProgressbar  className = \"Progress-bubbles\" value={calculateAssignmentProgressAsPercent(targetAssignment)}\n            text={targetAssignment.due ? `${new Date(targetAssignment.due).getMonth()+1}/${new Date(targetAssignment.due).getDate()}` : 'New'}\n            background\n            backgroundPadding={6}\n            styles={buildStyles({\n              backgroundColor: `${targetAssignment.completedByTherapist ? completedBubbleColor : ongoingBubbleColor}`,\n              textColor: \"#fff\",\n              pathColor: `${targetAssignment.completedByTherapist ? completedBubblePathColor : ongoingBubblePathColor}`,\n              trailColor: \"transparent\"\n            })}/>\n          </div>)\n      }\n    }\n  return (<div className = \"Progress-bubbles-container\">\n    {progressBubbleComponents}\n  </div>)\n}\n\nfunction getClientInfo(client) {\n  const result = \n    <Row>\n      <MDBCard className = \"Client-information\">\n        <Image src={picture} roundedCircle className=\"picture\"/>\n        <div className=\"clientInfoCardContainer\">\n          <p className=\"clientInfoCard\">{client.name}</p>\n          <p className=\"clientInfoCard\">Client Since: {client.clientSince}</p>\n          <p className=\"clientInfoCard\">Next Session: {client.nextSession}</p>\n        </div>\n      </MDBCard>\n    </Row>\n  return result;\n}\n\n function getExercises(exercises) {\n      if (exercises) \n      {\n        const ActualLinearProgress = withStyles((theme) => ({\n          root: {\n            height: 30,\n            borderRadius: 10\n          },\n          colorPrimary: {\n            backgroundColor: \"#FFFFFF\"\n          },\n          bar: {\n            backgroundColor: \"#ac6ef3\"\n          }\n        }))(LinearProgress);\n\n        const ExpectedLinearProgress = withStyles((theme) => ({\n          root: {\n            height: 30,\n            borderRadius: 10\n          },\n          colorPrimary: {\n            backgroundColor: \"#FFFFFF\"\n          },\n          bar: {\n            backgroundColor: \"#20315f\"\n          }\n        }))(LinearProgress);\n        \n      const result = exercises.map((exercise) =>\n      <div className = \"Exercise-data\">\n        <Row>\n            <Col>\n              <ActualLinearProgress className = \"Linear-progress-bar\" variant = {\"determinate\"} value = {100*exercise.progress/exercise.goal} color = \"primary\" thickness={5}/>\n              <ExpectedLinearProgress className = \"Linear-progress-bar\" variant = {\"determinate\"} value = {calculateExpectedExerciseProgress(exercise)} color = \"primary\"/>\n            </Col>\n            <Col>\n                <p>{exercise.exerciseTitle}<br></br>{`${new Date(exercise.dueDate).getMonth()+1}/${new Date(exercise.dueDate).getDate()}`}</p>\n            </Col>\n        </Row>\n        <br></br>\n      </div>\n      );\n      return result;\n      }\n    }\n\n    return(\n      <div>\n          <div className = \"App-logo-container\">\n              <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          </div>\n          <div className = \"Client-view-title-container\">\n              <p className = \"Client-view-title-text\">  {client.name}</p> {/*Get this from previous page*/}\n          </div>\n            \n          <Container fluid className = \"background-container\">\n            <Row className = \"background\">\n              <div className = \"Client-information-container\">\n                <Col>\n                  {getClientInfo(client)}\n                </Col>\n              </div>\n              {/*<Col>\n                <MDBCard className=\"Exercise-preview-body\">\n                  <MDBCardTitle className=\"Exercise-preview-placeholder-text\">-Exercise Preview-</MDBCardTitle>\n                </MDBCard>         \n              </Col>*/} \n              <Col>\n                    <Row>\n                    </Row>\n                    <Row>\n                      {getBubbleInfo(assignments)}\n                    </Row>\n                    <Row>\n                        <Col>\n                        <Card className=\"Assignment-completion-body\">\n                            <Card.Body>\n                                <Row>\n                                    <Col>\n                                      <div className = \"Assignment-completion-status-text-container\">\n                                        <MDBCardTitle className=\"Assignment-completion-status-text\">{selectedAssignment.completedByTherapist ? 'Completed' : 'Ongoing'}</MDBCardTitle> {/*Get this from patient data*/}\n                                      </div>\n                                    </Col>\n                                    <Col className = \"Assignment-due-date-col\">\n                                      <div className = \"Assignment-due-date-container\">\n                                        <MDBCardTitle className=\"Assignment-due-date-text\">\n                                          Due by: <u>{selectedAssignment.due ? `${new Date(selectedAssignment.due).getMonth() + 1}/${new Date(selectedAssignment.due).getDate()}` : ''}</u>\n                                        </MDBCardTitle> {/*Get this from patient data*/}\n                                      </div>\n                                    </Col>\n                                    <Col className = \"Complete-assignment-button-col\">\n                                      {completeAssignmentButton()}\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col>\n                                      <div className = \"Assignment-progress-container\">\n                                        <MDBCardTitle className=\"Assignment-completion-title-text\">Assignment Completion</MDBCardTitle>\n                                        <div className=\"Exercise-data-container\">\n                                          {/*getExercises(this.state.patient.assignments[this.state.selectedAssignment].exerciseList)  until selectedAssignment being an object works*/}\n                                          {getExercises(selectedAssignment.exerciseList)}\n                                        </div>\n                                      </div>\n                                    </Col>\n                                </Row>\n                            </Card.Body>\n                        </Card>\n                        </Col>\n                    </Row>      \n              </Col>\n            </Row>\n          </Container> \n     </div>\n     )\n\n}\n\n\n  //#region Exercise Type Dropdown\n  const CustomToggle = React.forwardRef(({ children, onClick }, ref) => (\n    <a\n      href=\"./ClientView\"\n      ref={ref}\n      onClick={(e) => {\n        e.preventDefault();\n        onClick(e);\n      }}\n    >\n      {children}\n      &#x25bc;\n    </a>\n  ));\n\n  \n//#endregion  \n\n\nexport default ClientView;","/Users/ngattuso/dev/Mira/senior-design-2020/app/src/views/PracticeView.js",["74","75","76"],"/Users/ngattuso/dev/Mira/senior-design-2020/app/src/views/ExerciseFormFn.js",["77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92"],"\nimport React, { useContext, useState, useEffect, Component } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\"\nimport '../css/ExerciseForm.css';\nimport { MDBCard, MDBCardTitle } from \"mdbreact\";\nimport logo from '../Mira.jpg';\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Container from 'react-bootstrap/Container'\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {Link, Redirect} from 'react-router-dom';\n\n\nfunction ExerciseForm() {\n    /*\n    this.state = {\n        chosenExercise: {\n            type: \"\",\n            name: \"\",\n            due: '',\n            frequency: '',\n            specialInstructions: ''\n        },\n        exerciseToEdit: props.location.data.editExercise,\n        added: props.location.data.addedExercises,\n        nextSession: props.location.data.nextSessionDate\n    \n    }*/\n    const [exerciseState, setExerciseState] = useState({\n        chosenExercise: {\n            exerciseTitle: \"\",\n            exerciseType: \"\",\n            dueDate: new Date(),\n            frequency: \"\",\n            patientName: \"\",\n            patientId: \"\",\n            progress: 0,\n            specialInstructions: \"\",\n            goal: 0\n        },\n        exerciseToEdit: [],/*{//props.location.data.editExercise,\n            exerciseTitle: \"\",\n            exerciseType: \"\",\n            dueDate: new Date(),\n            frequency: \"\",\n            patientName: \"\",\n            patientId: \"\",\n            progress: 0,\n            specialInstructions: \"\",\n            goal: 0\n        }*/\n        added: [{//props.location.data.addedExercises,\n            exerciseTitle: \"\",\n            exerciseType: \"\",\n            dueDate: new Date(),\n            frequency: \"\",\n            patientName: \"\",\n            patientId: \"\",\n            progress: 0,\n            specialInstructions: \"\",\n            goal: 0\n        }],\n        nextSession: new Date()//props.location.data.nextSessionDate\n    })\n\n    /*const [assignments, setAssignments] = useState([{\n        due: '',\n        status: 0,\n        exercises: []\n    }])\n\n    const [selectedExercise, setSelectedExercise] = useState({\n        //they pick the date on this page, \n        //would this then set the default or update the state with the chosen date?\n        //*can i get the date you generate from the previous page? because all the local\n        //*state is is startDate which begins as a new Date() object and is updated with the chosen date.\n        due: new Date()\n    })\n\n    const [selectedEditedExercise, setSelectedEditedExercise] = useState({\n        //when they press the edit button, \n        //it should send the exercise info here to be sent to the store\n        //so that the exerciseform can access it from the store and perform editing\n        //Does this selectedxyz thing in the state just select the object FOR editing or does it update it too?\n    })*/\n    console.log(exerciseState.added);\n    var exercises = [];\n    const exerciseTypes = {\n        \"Grounding\": [\"Flashback Grounding\", \"Color Finder\", \"Breathing Exercise\", \"Vibration Tool\", \"Bilateral Simulation\", \"5, 4, 3, 2, 1 Grounding\", \"Any\", \"All\"],\n        \"Reading\": [\"PTSD Content\", \"Trauma Story\"],\n        \"Writing\": [\"Write About Trauma\", \"Free Writing\"],\n        \"Worksheets\": [\"CPT Worksheet\", \"PTP Worksheet\", \"Upload Your Own\"],\n        \"Assessments\": [\"PCL-5 Questionnaire\", \"PHQ-9 Questionnaire\"],\n        \"Lists\": [\"Gratefullness List\", \"Self-Care\", \"Stuck Points\", \"Create Your Own List\", \"Track Symptoms\", \"Track Triggers\"]      \n    }\n    const dueByChoices = [\"Next Session\", \"Custom Days\", \"Custom Weeks\", \"Choose Date\"];\n    const frequenceyChoices = [\"Daily\", \"Weekly\", \"Bi-Weekly\", \"Custom per Week\"];\n    if (exerciseState.added == [] || !exerciseState.added){\n        exercises = [];\n    } else {\n        exercises = exerciseState.added;\n    }\n    console.log(exerciseState.exerciseToEdit)\n    if (exerciseState.exerciseToEdit == [] || exerciseState.exerciseToEdit == undefined){\n        exerciseState.chosenExercise = {\n            exerciseTitle: \"Flashback Grounding\",\n            exerciseType: \"Grounding\",\n            dueDate: \"Next Session\",\n            frequency: \"Daily\",\n            patientName: \"\",\n            patientId: \"\",\n            progress: 0,\n            specialInstructions: \"\",\n            goal: 0\n        };\n    } else {\n        exerciseState.chosenExercise = {\n            exerciseTitle: exerciseState.exerciseToEdit.exerciseTitle,\n            exerciseType: exerciseState.exerciseToEdit.exerciseType,            \n            dueDate: exerciseState.exerciseToEdit.dueDate,\n            frequency: exerciseState.exerciseToEdit.frequency,\n            patientName: exerciseState.exerciseToEdit.patientName,\n            patientId: exerciseState.exerciseToEdit.patientId,\n            progress: exerciseState.exerciseToEdit.progress,\n            specialInstructions: exerciseState.exerciseToEdit.specialInstructions,\n            goal: exerciseState.exerciseToEdit.goal\n        }\n    }\n    console.log(exerciseState.chosenExercise)\n    useEffect(() => {\n        fetch(\"http://localhost:3080/assignments/patient/PjohnDoe1\")\n            .then(res => res.json())\n            .then(data => {\n            // sort the assignments based on the number of the visit during which they were assigned\n            data.sort((a, b) => a.visitNumber - b.visitNumber)\n            // add an extra assignment to allow for a new one to be created\n            // update the state with the assignments in the right order\n            /*setExerciseState({\n                chosenExercise: {\n                    exerciseTitle: \"\",\n                    exerciseType: \"\",\n                    dueDate: new Date(),\n                    frequency: \"\",\n                    patientName: \"\",\n                    patientId: \"\",\n                    progress: 0,\n                    specialInstructions: \"\",\n                    goal: 0\n                },\n                exerciseToEdit: {//props.location.data.editExercise,\n                    exerciseTitle: \"\",\n                    exerciseType: \"\",\n                    dueDate: new Date(),\n                    frequency: \"\",\n                    patientName: \"\",\n                    patientId: \"\",\n                    progress: 0,\n                    specialInstructions: \"\",\n                    goal: 0\n                },\n                added: [{//props.location.data.addedExercises,\n                    exerciseTitle: \"\",\n                    exerciseType: \"\",\n                    dueDate: new Date(),\n                    frequency: \"\",\n                    patientName: \"\",\n                    patientId: \"\",\n                    progress: 0,\n                    specialInstructions: \"\",\n                    goal: 0\n                }],\n                nextSession: new Date()\n\n            })*/\n            // make the assignment that's visible to the therapist the most recent one\n            //this.setState((state) => ({selectedAssignment: state.patient.assignments[state.patient.assignments.length - 1]}))\n            //setSelectedAssignment(data[data.length - 1])\n        });\n    });    \n    function bigFilter(exerciseList, exercise){\n        const converted = [];\n        for (let i = 0; i < exerciseList.length; i++){\n            if (exerciseList[i].exerciseType == exercise.exerciseType && exerciseList[i].exerciseTitle == exercise.exerciseTitle && exerciseList[i].dueDate == exercise.dueDate && exerciseList[i].frequency == exercise.frequency && exerciseList[i].specialInstructions == exercise.specialInstructions){\n                exerciseList.splice(i, 1);\n                i--;\n                //delete exerciseList[i];\n            }\n        }\n        for (let j = 0; j < exerciseList.length; j++){\n            converted.push(Object.values(exerciseList[j]));\n        }\n        exerciseList = converted; \n        \n\n        //delete exerciseList[exerc]\n        //var filtered = exerciseList.filter(function(value, index, arr))\n        console.log(exerciseList);\n        console.log(exerciseState.added);\n        console.log(exercise);\n        return exerciseList;\n    }\n    function getExercises(exercises) {\n        const result = exercises.map((exercise) =>\n        <Row>\n            <div className = \"Exercise-card-row\">\n                <MDBCard className = \"Exercise-card-body\">\n                    <p className=\"exerciseTitle\">{exercise[1]}</p>\n                    <p className=\"exerciseCard\">{exercise[5]}</p>\n                    <p className=\"exerciseCard\">Due By: {exercise[2]}</p>\n                    <p className=\"exerciseCard\">Special Instructions: {exercise[6]}</p >\n                </MDBCard>\n            </div>\n        </Row>\n        );\n        return result;\n    }\n    function getExerciseFormData(data){\n        const result = Object.keys(data).map((d) =>\n            <option>{d}</option>\n        );      \n        return result;\n    }\n    function getExerciseTitle(data, choice){\n        const result = data[choice].map((d) =>\n            <option>{d}</option>\n        );\n        return result;\n    }\n    function getGoal(dueDate,frequency){\n        var today = new Date();\n        const difference = Math.abs(dueDate - today);\n        let dayDiff =  difference / (1000 * 60 * 60 * 24);\n        dayDiff = Math.ceil(dayDiff);\n        switch(frequency) {\n            case \"Daily\":\n                return dayDiff;\n            case \"Weekly\":\n              // code block\n                return Math.floor(dayDiff/7);\n            case \"Bi-Weekly\":\n              // code block\n                return Math.floor(dayDiff/3.5);\n            default:\n                return Math.floor(dayDiff/(7/frequency));\n        } \n    }\n    function setRedirect(){\n        this.setState({\n            redirect: true\n        });\n    }\n    function doRedirect(){\n        if(this.state.redirect){\n            return <Redirect to='/AssignmentForm'/>\n        } \n    }\n\nreturn(\n    <div>\n    {/* <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"></meta> */}\n        <div className = \"App-logo-container\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        </div>\n        <div className = \"Exercise-form-title-container\">\n            <p className = \"Exercise-form-title-text\">Exercise Form</p>\n        </div> \n        <Container fluid className = \"background-container\">\n        <Row className = \"background\">\n            <Col className = \"Added-exercise-list\">\n                <Row className = \"Added-exercise-list-text\">Added Exercises:</Row>\n                {getExercises(bigFilter(exercises, exerciseState.chosenExercise))}\n            </Col>\n            {/*<Col>\n            <MDBCard className=\"Exercise-preview-body\">\n                <MDBCardTitle className=\"Exercise-preview-placeholder-text\">-Exercise Preview-</MDBCardTitle>\n            </MDBCard>          \n            </Col>*/}\n            <Col>\n            <div className = \"Exercise-form-container\">\n                <Form>\n                <Form.Group controlId=\"exerciseType\">\n                    <Form.Label>Exercise Type</Form.Label>\n                    <Form.Control  onChange = {event => setExerciseState({chosenExercise: {exerciseType: event.target.value}})} as=\"select\" defaultValue = {exerciseState.chosenExercise.exerciseType} custom>\n                    {getExerciseFormData(exerciseTypes)}\n                    </Form.Control>\n                </Form.Group>\n                <Form.Group controlId=\"exerciseTitle\">\n                    <Form.Label>Exercise Title</Form.Label>\n                    <Form.Control onChange = {event => setExerciseState({chosenExercise: {exerciseTitle: event.target.value}})} as=\"select\" defaultValue = {exerciseState.chosenExercise.exerciseTitle} custom>\n                    {getExerciseTitle(exerciseTypes, exerciseState.chosenExercise.exerciseType)}\n                    </Form.Control>\n                </Form.Group>\n                <Form.Group>\n                    <Form.Label>Due By</Form.Label>\n                    <Form.Control onChange = {event => setExerciseState({chosenExercise: {dueDate: event.target.value}})} as=\"select\" defaultValue = {\"Next Session:\" + toString(exerciseState.nextSession)} custom>\n                    <option>{`Next Session: ${exerciseState.nextSession[0]}/${exerciseState.nextSession[1]}/${exerciseState.nextSession[2]}`}</option>\n                    <option>Days</option>\n                    <option>Weeks</option>\n                    <option>Choose Date</option>\n                    </Form.Control>\n                </Form.Group>\n                <Form.Group controlId=\"frequency\">\n                    <Form.Label>Frequency</Form.Label>\n                    <Form.Control onChange = {event => setExerciseState({chosenExercise: {frequency: event.target.value}})} as=\"select\" defaultValue = {exerciseState.chosenExercise.frequency} custom>\n                    <option>Daily</option>\n                    <option>Weekly</option>\n                    <option>Bi-Weekly</option>\n                    <option>[x] per week</option>\n                    </Form.Control>\n                </Form.Group>\n                \n                <Form.Group controlId=\"specialInstructions\">\n                    <Form.Label>Special Instructions</Form.Label>\n                    <Form.Control onChange = {event => setExerciseState({chosenExercise: {specialInstructions: event.target.value}})} as = \"textarea\" placeholder=\"Enter Special Instructions\"  rows = {4} />\n                </Form.Group>\n                <Link to = {{\n                    pathname: \"/AssignmentForm\",\n                    data: {editedExerciseList: exercises,\n                            nextSession: exerciseState.nextSession} \n                }}>\n                    <Button onClick={setRedirect()} variant=\"primary\" type=\"Submit\">\n                    \n                    Add\n                    </Button>\n                </Link>\n                </Form>\n            </div>\n            </Col>\n        </Row>\n        </Container> \n    {doRedirect()}\n</div>\n)\n}\nexport default ExerciseForm;\n","/Users/ngattuso/dev/Mira/senior-design-2020/app/src/redux/slices/clientSlice.js",[],"/Users/ngattuso/dev/Mira/senior-design-2020/app/src/api/clientAPI.js",["93"],"import { __esModule } from \"redux-persist/lib/storage/createWebStorage\"\n\nexport const getAssignments = async (patientID) => {\n    let assignments = await fetch(`http://localhost:3080/assignments/patient/${patientID}`)\n    assignments = await assignments.json()\n    assignments.sort((a, b) => a.visitNumber - b.visitNumber)\n    return assignments\n}\n\nexport const closeAssignment = async (assignmentObject) => {\n    // mark the assignment as completed by the therapist\n    assignmentObject.completedByTherapist = true\n    const postSettings = {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(assignmentObject),\n      }\n\n      await fetch(`http://localhost:3080/assignments/${assignmentObject._id}/edit`, postSettings)\n}",{"ruleId":"94","severity":1,"message":"95","line":1,"column":17,"nodeType":"96","messageId":"97","endLine":1,"endColumn":27},{"ruleId":"94","severity":1,"message":"98","line":1,"column":50,"nodeType":"96","messageId":"97","endLine":1,"endColumn":59},{"ruleId":"94","severity":1,"message":"99","line":2,"column":10,"nodeType":"96","messageId":"97","endLine":2,"endColumn":21},{"ruleId":"94","severity":1,"message":"100","line":2,"column":23,"nodeType":"96","messageId":"97","endLine":2,"endColumn":34},{"ruleId":"94","severity":1,"message":"101","line":3,"column":10,"nodeType":"96","messageId":"97","endLine":3,"endColumn":21},{"ruleId":"94","severity":1,"message":"102","line":5,"column":19,"nodeType":"96","messageId":"97","endLine":5,"endColumn":30},{"ruleId":"94","severity":1,"message":"103","line":5,"column":58,"nodeType":"96","messageId":"97","endLine":5,"endColumn":69},{"ruleId":"104","severity":1,"message":"105","line":93,"column":5,"nodeType":"96","endLine":93,"endColumn":14,"suggestions":"106"},{"ruleId":"104","severity":1,"message":"107","line":93,"column":15,"nodeType":"108","endLine":124,"endColumn":6},{"ruleId":"109","replacedBy":"110"},{"ruleId":"111","replacedBy":"112"},{"ruleId":"94","severity":1,"message":"113","line":6,"column":8,"nodeType":"96","messageId":"97","endLine":6,"endColumn":11},{"ruleId":"94","severity":1,"message":"114","line":6,"column":8,"nodeType":"96","messageId":"97","endLine":6,"endColumn":13},{"ruleId":"94","severity":1,"message":"102","line":11,"column":3,"nodeType":"96","messageId":"97","endLine":11,"endColumn":14},{"ruleId":"94","severity":1,"message":"115","line":28,"column":20,"nodeType":"96","messageId":"97","endLine":28,"endColumn":29},{"ruleId":"94","severity":1,"message":"116","line":35,"column":11,"nodeType":"96","messageId":"97","endLine":35,"endColumn":26},{"ruleId":"94","severity":1,"message":"117","line":51,"column":11,"nodeType":"96","messageId":"97","endLine":51,"endColumn":19},{"ruleId":"104","severity":1,"message":"118","line":53,"column":5,"nodeType":"96","endLine":53,"endColumn":14,"suggestions":"119"},{"ruleId":"104","severity":1,"message":"107","line":53,"column":15,"nodeType":"108","endLine":72,"endColumn":6},{"ruleId":"94","severity":1,"message":"120","line":96,"column":3,"nodeType":"96","messageId":"97","endLine":96,"endColumn":25},{"ruleId":"121","severity":1,"message":"122","line":135,"column":50,"nodeType":"123","messageId":"124","endLine":135,"endColumn":52},{"ruleId":"121","severity":1,"message":"122","line":143,"column":70,"nodeType":"123","messageId":"124","endLine":143,"endColumn":72},{"ruleId":"121","severity":1,"message":"122","line":146,"column":37,"nodeType":"123","messageId":"124","endLine":146,"endColumn":39},{"ruleId":"121","severity":1,"message":"122","line":150,"column":51,"nodeType":"123","messageId":"124","endLine":150,"endColumn":53},{"ruleId":"121","severity":1,"message":"125","line":167,"column":32,"nodeType":"123","messageId":"124","endLine":167,"endColumn":34},{"ruleId":"121","severity":1,"message":"125","line":191,"column":32,"nodeType":"123","messageId":"124","endLine":191,"endColumn":34},{"ruleId":"94","severity":1,"message":"126","line":388,"column":9,"nodeType":"96","messageId":"97","endLine":388,"endColumn":21},{"ruleId":"94","severity":1,"message":"127","line":10,"column":8,"nodeType":"96","messageId":"97","endLine":10,"endColumn":22},{"ruleId":"121","severity":1,"message":"125","line":23,"column":12,"nodeType":"123","messageId":"124","endLine":23,"endColumn":14},{"ruleId":"94","severity":1,"message":"128","line":36,"column":23,"nodeType":"96","messageId":"97","endLine":36,"endColumn":37},{"ruleId":"94","severity":1,"message":"95","line":2,"column":17,"nodeType":"96","messageId":"97","endLine":2,"endColumn":27},{"ruleId":"94","severity":1,"message":"98","line":2,"column":50,"nodeType":"96","messageId":"97","endLine":2,"endColumn":59},{"ruleId":"94","severity":1,"message":"99","line":3,"column":10,"nodeType":"96","messageId":"97","endLine":3,"endColumn":21},{"ruleId":"94","severity":1,"message":"100","line":3,"column":23,"nodeType":"96","messageId":"97","endLine":3,"endColumn":34},{"ruleId":"94","severity":1,"message":"129","line":5,"column":19,"nodeType":"96","messageId":"97","endLine":5,"endColumn":31},{"ruleId":"94","severity":1,"message":"130","line":98,"column":11,"nodeType":"96","messageId":"97","endLine":98,"endColumn":23},{"ruleId":"94","severity":1,"message":"131","line":99,"column":11,"nodeType":"96","messageId":"97","endLine":99,"endColumn":28},{"ruleId":"121","severity":1,"message":"125","line":100,"column":29,"nodeType":"123","messageId":"124","endLine":100,"endColumn":31},{"ruleId":"121","severity":1,"message":"125","line":106,"column":38,"nodeType":"123","messageId":"124","endLine":106,"endColumn":40},{"ruleId":"121","severity":1,"message":"125","line":106,"column":76,"nodeType":"123","messageId":"124","endLine":106,"endColumn":78},{"ruleId":"121","severity":1,"message":"125","line":185,"column":46,"nodeType":"123","messageId":"124","endLine":185,"endColumn":48},{"ruleId":"121","severity":1,"message":"125","line":185,"column":104,"nodeType":"123","messageId":"124","endLine":185,"endColumn":106},{"ruleId":"121","severity":1,"message":"125","line":185,"column":157,"nodeType":"123","messageId":"124","endLine":185,"endColumn":159},{"ruleId":"121","severity":1,"message":"125","line":185,"column":206,"nodeType":"123","messageId":"124","endLine":185,"endColumn":208},{"ruleId":"121","severity":1,"message":"125","line":185,"column":267,"nodeType":"123","messageId":"124","endLine":185,"endColumn":269},{"ruleId":"94","severity":1,"message":"132","line":231,"column":14,"nodeType":"96","messageId":"97","endLine":231,"endColumn":21},{"ruleId":"94","severity":1,"message":"133","line":1,"column":10,"nodeType":"96","messageId":"97","endLine":1,"endColumn":20},"no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'Component' is defined but never used.","'useDispatch' is defined but never used.","'useSelector' is defined but never used.","'FormControl' is defined but never used.","'MDBCardBody' is defined but never used.","'MDBCardText' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setAssignmentState'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [today] as a second argument to the useEffect Hook.",["134"],"Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","no-native-reassign",["135"],"no-negated-in-lhs",["136"],"'App' is defined but never used.","'axios' is defined but never used.","'setClient' is assigned a value but never used.","'clientFromStore' is assigned a value but never used.","'dispatch' is assigned a value but never used.","React Hook useEffect contains a call to 'setAssignmentsFetched'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [assignmentsFetched] as a second argument to the useEffect Hook.",["137"],"'daysToCompleteExercise' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","'CustomToggle' is assigned a value but never used.","'bonelliPicture' is defined but never used.","'setPatientList' is assigned a value but never used.","'MDBCardTitle' is defined but never used.","'dueByChoices' is assigned a value but never used.","'frequenceyChoices' is assigned a value but never used.","'getGoal' is defined but never used.","'__esModule' is defined but never used.",{"desc":"138","fix":"139"},"no-global-assign","no-unsafe-negation",{"desc":"140","fix":"141"},"Add dependencies array: [today]",{"range":"142","text":"143"},"Add dependencies array: [assignmentsFetched]",{"range":"144","text":"145"},[4001,4001],", [today]",[2560,2560],", [assignmentsFetched]"]