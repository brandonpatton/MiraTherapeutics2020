[{"D:\\STEVENS\\STEVENS\\SPRING + FALL + WINTER 2020\\FALL 2020\\CS 423 Senior Design I\\project\\senior-design-2020\\app\\src\\index.js":"1","D:\\STEVENS\\STEVENS\\SPRING + FALL + WINTER 2020\\FALL 2020\\CS 423 Senior Design I\\project\\senior-design-2020\\app\\src\\reportWebVitals.js":"2","D:\\STEVENS\\STEVENS\\SPRING + FALL + WINTER 2020\\FALL 2020\\CS 423 Senior Design I\\project\\senior-design-2020\\app\\src\\App.js":"3","D:\\STEVENS\\STEVENS\\SPRING + FALL + WINTER 2020\\FALL 2020\\CS 423 Senior Design I\\project\\senior-design-2020\\app\\src\\redux\\configureStore.js":"4","D:\\STEVENS\\STEVENS\\SPRING + FALL + WINTER 2020\\FALL 2020\\CS 423 Senior Design I\\project\\senior-design-2020\\app\\src\\views\\ExerciseFormFn.js":"5","D:\\STEVENS\\STEVENS\\SPRING + FALL + WINTER 2020\\FALL 2020\\CS 423 Senior Design I\\project\\senior-design-2020\\app\\src\\views\\PracticeView.js":"6","D:\\STEVENS\\STEVENS\\SPRING + FALL + WINTER 2020\\FALL 2020\\CS 423 Senior Design I\\project\\senior-design-2020\\app\\src\\views\\AssignmentFormFn.js":"7","D:\\STEVENS\\STEVENS\\SPRING + FALL + WINTER 2020\\FALL 2020\\CS 423 Senior Design I\\project\\senior-design-2020\\app\\src\\views\\ClientViewFn.js":"8","D:\\STEVENS\\STEVENS\\SPRING + FALL + WINTER 2020\\FALL 2020\\CS 423 Senior Design I\\project\\senior-design-2020\\app\\src\\redux\\reducer.js":"9","D:\\STEVENS\\STEVENS\\SPRING + FALL + WINTER 2020\\FALL 2020\\CS 423 Senior Design I\\project\\senior-design-2020\\app\\src\\api\\clientAPI.js":"10","D:\\STEVENS\\STEVENS\\SPRING + FALL + WINTER 2020\\FALL 2020\\CS 423 Senior Design I\\project\\senior-design-2020\\app\\src\\redux\\slices\\therapistSlice.js":"11","D:\\STEVENS\\STEVENS\\SPRING + FALL + WINTER 2020\\FALL 2020\\CS 423 Senior Design I\\project\\senior-design-2020\\app\\src\\redux\\slices\\clientSlice.js":"12","D:\\STEVENS\\STEVENS\\SPRING + FALL + WINTER 2020\\FALL 2020\\CS 423 Senior Design I\\project\\senior-design-2020\\app\\src\\redux\\slices\\assignmentSlice.js":"13"},{"size":1478,"mtime":1618851887613,"results":"14","hashOfConfig":"15"},{"size":375,"mtime":1606947846587,"results":"16","hashOfConfig":"15"},{"size":3410,"mtime":1618851887551,"results":"17","hashOfConfig":"15"},{"size":746,"mtime":1618851887631,"results":"18","hashOfConfig":"15"},{"size":12710,"mtime":1618858212552,"results":"19","hashOfConfig":"15"},{"size":7130,"mtime":1618851887692,"results":"20","hashOfConfig":"15"},{"size":9966,"mtime":1618858747137,"results":"21","hashOfConfig":"15"},{"size":17058,"mtime":1618855253541,"results":"22","hashOfConfig":"15"},{"size":246,"mtime":1618852412362,"results":"23","hashOfConfig":"15"},{"size":1341,"mtime":1618853975172,"results":"24","hashOfConfig":"15"},{"size":2107,"mtime":1618853401585,"results":"25","hashOfConfig":"15"},{"size":1884,"mtime":1618851887634,"results":"26","hashOfConfig":"15"},{"size":2642,"mtime":1618856355156,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"31"},"18j4x0w",{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"31"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"31"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"31"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"31"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"31"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\STEVENS\\STEVENS\\SPRING + FALL + WINTER 2020\\FALL 2020\\CS 423 Senior Design I\\project\\senior-design-2020\\app\\src\\index.js",["61"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Provider} from \"react-redux\"\r\nimport {store, persistor} from \"./redux/configureStore\"\r\nimport './css/index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\nimport { PersistGate } from 'redux-persist/integration/react'\r\nimport Page1 from \"./App\";\r\nimport PracticeView from \"./views/PracticeView\";\r\nimport ExerciseForm from \"./views/ExerciseFormFn\";\r\nimport ClientView from \"./views/ClientViewFn\";\r\nimport AssignmentForm from \"./views/AssignmentFormFn\";\r\nconst rootElement = document.getElementById(\"root\");\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <PersistGate loading={null} persistor={persistor}>\r\n      <BrowserRouter>\r\n        <Switch>\r\n          <Route exact path=\"/\" component={Page1} />\r\n          <Route path=\"/PracticeView\" component={PracticeView} />\r\n          <Route path=\"/ExerciseForm\" component={ExerciseForm} />\r\n          <Route path=\"/ClientView\" component={ClientView} />\r\n          <Route path=\"/AssignmentForm\" component={AssignmentForm} />\r\n        </Switch>\r\n      </BrowserRouter>\r\n    </PersistGate>\r\n </Provider>,\r\n rootElement\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n",["62","63"],"D:\\STEVENS\\STEVENS\\SPRING + FALL + WINTER 2020\\FALL 2020\\CS 423 Senior Design I\\project\\senior-design-2020\\app\\src\\reportWebVitals.js",[],"D:\\STEVENS\\STEVENS\\SPRING + FALL + WINTER 2020\\FALL 2020\\CS 423 Senior Design I\\project\\senior-design-2020\\app\\src\\App.js",["64","65"],"import React, { Component } from \"react\";\r\nimport logo from \"./Mira.jpg\";\r\nimport banner from \"./MiraBanner.png\";\r\nimport bubble from \"./bubbles.png\";\r\nimport \"./css/App.css\";\r\nimport axios from \"axios\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport {\r\n  MDBCard,\r\n  MDBCardBody,\r\n  MDBContainer,\r\n  MDBCardTitle,\r\n  MDBCardText,\r\n} from \"mdbreact\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { apiResponse: \"\" };\r\n  }\r\n\r\n  callAPI() {\r\n    fetch(\"http://localhost:3080/\")\r\n      .then((res) => res.text())\r\n      .then((res) => this.setState({ apiResponse: res }));\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.callAPI();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"Mira-site-header\">\r\n          <img src={banner} className=\"Mira-banner\" alt=\"banner\" />\r\n        </header>\r\n\r\n        <div className=\"App-logo-container\">\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        </div>\r\n\r\n        <body>\r\n          <div className=\"App-background-container\">\r\n            <div className=\"bg\"></div>\r\n          </div>\r\n        </body>\r\n\r\n        <div className=\"Username-bubble-image\">\r\n          <img src={bubble} className=\"bubble1\" alt=\"bubble\" />\r\n        </div>\r\n\r\n        <div className=\"Password-bubble-image\">\r\n          <img src={bubble} className=\"bubble2\" alt=\"bubble\" />\r\n        </div>\r\n\r\n        <div className=\"Login-container\">\r\n          <form>\r\n            <input\r\n              className=\"Username\"\r\n              type=\"text\"\r\n              placeholder=\"Username\"\r\n              id=\"unamee\"\r\n              name=\"username\"\r\n            ></input>\r\n            <input\r\n              className=\"Password\"\r\n              type=\"text\"\r\n              placeholder=\"Password\"\r\n              id=\"pword\"\r\n              name=\"password\"\r\n            ></input>\r\n          </form>\r\n        </div>\r\n\r\n        <Link to=\"/PracticeView\">\r\n          <Button\r\n            className=\"Button\"\r\n            onClick=\"window.location.href='/PracticeView'\"\r\n            type=\"button\"\r\n          >\r\n            Log In\r\n          </Button>\r\n        </Link>\r\n\r\n        <div className=\"New-user-container\">\r\n          <a href=\"www.google.com\" className=\"user\">\r\n            New User?\r\n          </a>\r\n        </div>\r\n\r\n        <div className=\"Forgot-password-container\">\r\n          <a href=\"www.google.com\" className=\"pword\">\r\n            Forgot Password?\r\n          </a>\r\n        </div>\r\n\r\n        <div>\r\n          <MDBContainer className=\"Card\">\r\n            <MDBCard className=\"card-body\">\r\n              <MDBCardTitle className=\"Card1-title\">\r\n                Miratx Articles\r\n              </MDBCardTitle>\r\n              <MDBCardText>Articles from Miratx</MDBCardText>\r\n            </MDBCard>\r\n          </MDBContainer>\r\n        </div>\r\n\r\n        <div>\r\n          <MDBContainer className=\"Card-2\">\r\n            <MDBCard className=\"card-body-2\">\r\n              <MDBCardTitle className=\"Card2-title\">\r\n                Miratx Articles\r\n              </MDBCardTitle>\r\n              <MDBCardText>Articles from Miratx</MDBCardText>\r\n            </MDBCard>\r\n          </MDBContainer>\r\n        </div>\r\n\r\n        <p className=\"App-intro\">{this.state.apiResponse}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","D:\\STEVENS\\STEVENS\\SPRING + FALL + WINTER 2020\\FALL 2020\\CS 423 Senior Design I\\project\\senior-design-2020\\app\\src\\redux\\configureStore.js",[],"D:\\STEVENS\\STEVENS\\SPRING + FALL + WINTER 2020\\FALL 2020\\CS 423 Senior Design I\\project\\senior-design-2020\\app\\src\\views\\ExerciseFormFn.js",["66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84"],"D:\\STEVENS\\STEVENS\\SPRING + FALL + WINTER 2020\\FALL 2020\\CS 423 Senior Design I\\project\\senior-design-2020\\app\\src\\views\\PracticeView.js",["85","86","87","88"],"import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport green from \"../Green.PNG\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport bonelliPicture from \"../Bonelli-RECT.jpg\";\r\nimport acasterPicture from \"../james-acaster.jpg\";\r\nimport Image from \"react-bootstrap/Image\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"../css/PracticeView.css\";\r\nimport { openClient } from \"../redux/slices/clientSlice\";\r\nimport { updateTherapistClientList } from \"../redux/slices/therapistSlice\"\r\n\r\nconst PracticeView = () => {\r\n  \r\n  const dispatch = useDispatch();\r\n\r\n\r\n\r\n  const { client } = useSelector((state) => state.client);\r\n\r\n  const [patient, setPatient] = useState(\r\n    client.name.length == 0\r\n      ? {\r\n          name: \"Bruce Wayne\",\r\n          id: \"PjohnDoe1\",\r\n          trackedSymptoms: 3,\r\n          groundingExercises: 5,\r\n          assignments: [true, false],\r\n          nextSession: \"3/4\",\r\n          status: \"Ongoing\",\r\n        }\r\n      : client\r\n  );\r\n\r\n  const [patientList, setPatientList] = useState([\r\n    {\r\n      name: \"Bruce Wayne\",\r\n      id: \"PjohnDoe1\",\r\n      trackedSymptoms: 3,\r\n      groundingExercises: 5,\r\n      assignments: [true, false],\r\n      nextSession: \"3/4\",\r\n      status: \"Ongoing\",\r\n    },\r\n    {\r\n      name: \"Craig Ferguson\",\r\n      id: \"PcraigFerguson1\",\r\n      trackedSymptoms: 3,\r\n      groundingExercises: 5,\r\n      assignments: [true, false],\r\n      nextSession: \"2/8\",\r\n      status: \"Ongoing\",\r\n    },\r\n    {\r\n      name: \"Eduardo Bonelli\",\r\n      id: \"PeddyBonelli1\",\r\n      trackedSymptoms: 3,\r\n      groundingExercises: 5,\r\n      assignments: [true, false],\r\n      nextSession: \"12/24\",\r\n      status: \"Ongoing\",\r\n    },\r\n    {\r\n      name: \"James Acaster\",\r\n      id: \"PjamesAcaster1\",\r\n      trackedSymptoms: 3,\r\n      groundingExercises: 5,\r\n      assignments: [true, true],\r\n      nextSession: \"11/20\",\r\n      status: \"Completed\",\r\n    },\r\n    {\r\n      name: \"Scooby Doo\",\r\n      id: \"PscoobyDoo1\",\r\n      trackedSymptoms: 3,\r\n      groundingExercises: 5,\r\n      assignments: [true, false],\r\n      nextSession: \"3/14\",\r\n      status: \"Ongoing\",\r\n    },\r\n  ]);\r\n\r\n  const [fetchedTherapistClientInfo, setFetchedTherapistClientInfo] = useState(false)\r\n\r\n  useEffect(() => {\r\n    // Only set the therapist slice once\r\n    if (!fetchedTherapistClientInfo){\r\n      updateTherapistStore()\r\n      setFetchedTherapistClientInfo(true)\r\n    }\r\n    // window.onpopstate = function(event) {\r\n    //   // Allows back and forth action by refreshing the page if it was reached using the browser's back button\r\n    //   if (event.currentTarget.location.pathname == \"/PracticeView\") window.location.reload()\r\n    // }\r\n  });\r\n\r\n  // Updates the client slice by fetching all client assignment lists from the database\r\n   const updateTherapistStore = async () => {\r\n    const postSettings = {\r\n      method: 'POST',\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({patientIds: [\"PjohnDoe1\"]})\r\n    }\r\n  \r\n    let clientInfoObj = await fetch(`http://localhost:3080/assignments/patient/batch/`, postSettings)\r\n    clientInfoObj = await clientInfoObj.json()\r\n\r\n    dispatch(\r\n      updateTherapistClientList({\r\n        clientInfo: clientInfoObj\r\n      })\r\n    )\r\n  \r\n  }\r\n\r\n  function clientClick(client) {\r\n    setPatient(client);\r\n  }\r\n\r\n  const updateCurrentClient = (client) => {\r\n    dispatch(\r\n      openClient({\r\n        id: client.id,\r\n        name: client.name,\r\n        nextSession: client.nextSession,\r\n        status: client.status,\r\n      })\r\n    );\r\n  };\r\n\r\n  function getRow(patients) {\r\n    const rowItems = patients.map((patient) => (\r\n      <tr onClick={() => clientClick(patient)}>\r\n        <td className=\"Patient-name\">Client: {patient.name}</td>\r\n        <p className=\"Tab\"></p>\r\n        <td className=\"Tracked-symptoms\">\r\n          Tracked Symptoms {patient.trackedSymptoms} times\r\n        </td>\r\n        <p className=\"Tab\"></p>\r\n        <td className=\"Exercise-use\">\r\n          Grounding Exercises used {patient.groundingExercises} times\r\n        </td>\r\n        <p className=\"Tab\"></p>\r\n        <td className=\"Completion\">\r\n          Completed {getCompleted(patient.assignments)}/\r\n          {patient.assignments.length} homework assignments\r\n        </td>\r\n        <p className=\"Tab\"></p>\r\n        <td className=\"Completion-indicator\">\r\n          <Image src={green} Green />\r\n        </td>\r\n      </tr>\r\n    ));\r\n    return rowItems;\r\n  }\r\n\r\n  function getCompleted(assignments) {\r\n    let count = 0;\r\n    for (let assignment of assignments) {\r\n      if (assignment) {\r\n        count++;\r\n      }\r\n    }\r\n    return count;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Container className=\"Profile\">\r\n        <Row>\r\n          <Col>\r\n            <div className=\"border\">\r\n              <div className=\"Profile-info\">\r\n                <Row className=\"Name-Row justify-content-md-center\">\r\n                  <Image\r\n                    src={acasterPicture}\r\n                    roundedCircle\r\n                    className=\"picture\"\r\n                  />\r\n                </Row>\r\n                <Row className=\"Name-Row justify-content-md-center\">\r\n                  <Card className=\"Name-Card\">{patient.name}</Card>\r\n                </Row>\r\n                <Row className=\"Name-Row justify-content-md-center\">\r\n                  <Card className=\"Next-Session-Date\">\r\n                    {patient.nextSession}\r\n                  </Card>\r\n                </Row>\r\n                <Row className=\"Name-Row justify-content-md-center\">\r\n                  <Card className=\"Status\">{patient.status}</Card>\r\n                </Row>\r\n                <Row className=\"Name-Row justify-content-md-center\">\r\n                  <Link\r\n                    to={{\r\n                      pathname: \"/ClientView\",\r\n                      data: { name: patient.name }, // your data array of objects\r\n                    }}\r\n                  >\r\n                    <Button\r\n                      onClick={() => updateCurrentClient(patient)}\r\n                      variant=\"info\"\r\n                      className=\"Client-View-Button\"\r\n                    >\r\n                      Go To Client View\r\n                    </Button>\r\n                  </Link>\r\n                </Row>\r\n              </div>\r\n            </div>\r\n          </Col>\r\n\r\n          <Col xs={8}>\r\n            <h1 className=\"Practice-view-title\">Practice View</h1>\r\n            <Table className=\"Table\">\r\n              <tbody>\r\n                {/*<TableRow className = \"Patients\" patients = {this.patients} />*/}\r\n                {getRow(patientList)}\r\n              </tbody>\r\n            </Table>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n\r\n      {/* <NumberList numbers = {this.numbers} /> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PracticeView;\r\n","D:\\STEVENS\\STEVENS\\SPRING + FALL + WINTER 2020\\FALL 2020\\CS 423 Senior Design I\\project\\senior-design-2020\\app\\src\\views\\AssignmentFormFn.js",["89","90","91","92","93","94","95","96","97","98","99","100","101","102","103"],"D:\\STEVENS\\STEVENS\\SPRING + FALL + WINTER 2020\\FALL 2020\\CS 423 Senior Design I\\project\\senior-design-2020\\app\\src\\views\\ClientViewFn.js",["104","105","106","107","108","109","110","111","112","113","114"],"import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport '../css/ClientView.css';\r\nimport { completeClientAssignment } from \"../redux/slices/therapistSlice\";\r\nimport { MDBCard, MDBCardTitle } from \"mdbreact\";\r\nimport logo from '../mira-new-medium.png';\r\nimport {Row, Col, Container, Image, Card, /*Button*/} from 'react-bootstrap'\r\nimport picture from '../Bonelli-RECT.jpg';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {\r\n  CircularProgressbar,\r\n  buildStyles\r\n} from \"react-circular-progressbar\";\r\nimport \"react-circular-progressbar/dist/styles.css\";\r\nimport { LinearProgress } from '@material-ui/core';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\nimport {closeAssignment, getAssignments} from \"../api/clientAPI\"\r\nimport { useHistory } from 'react-router';\r\n\r\nfunction ClientView() {\r\n\r\n  let history = useHistory();\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const [{client}] = useState(\r\n    useSelector((state) => state.client)\r\n  )\r\n\r\n\r\n  //let stateCheck = useSelector((state) => console.log(state.therapist.therapist))\r\n\r\n  const {therapist} = useSelector((state) => state.therapist)\r\n\r\n  const [assignments, setAssignments] = useState(therapist.clientInfo['PjohnDoe1'])\r\n\r\n  const [selectedAssignment, setSelectedAssignment] = useState({\r\n    due: \"\"\r\n  })\r\n\r\n\r\n    const [assignmentCompletionDialogOpen, setAssignmentCompletionDialogOpen] = useState(false)\r\n\r\n    const [assignmentsFetched, setAssignmentsFetched] = useState(false)\r\n\r\n    useEffect(async () => {\r\n      // Sort assignments once\r\n      if (!assignmentsFetched) {\r\n        //let assignments = useSelector((state) => state.therapist['PjohnDoe1'])\r\n            // add an extra assignment to allow for a new one to be created if the most recent assignment has been closed\r\n            if (assignments[assignments.length - 1].completedByTherapist) {\r\n              let newAssignmentForNewBubble = {\r\n                visitNumber: assignments.length + 1,\r\n                due: undefined,\r\n                assignmentProgress: 0,\r\n                status: 0 \r\n                }\r\n\r\n                let newAssignmentList = assignments.slice()\r\n                newAssignmentList.push(newAssignmentForNewBubble)\r\n                setAssignments(newAssignmentList)\r\n            }\r\n            // update the state with the assignments in the right order\r\n            setAssignmentsFetched(true)\r\n            setSelectedAssignment(assignments[assignments.length - 1])\r\n          }\r\n      \r\n    });\r\n    \r\n\r\n// Take in an exercise and calculate expected progress. Due date is in model, assigned date is in exercise\r\n// Use the frequency to see how many times it should have been done by now\r\nfunction calculateExpectedExerciseProgress(exercise) {\r\n  // Return 100 if past the due date\r\n  if (new Date().getTime() > new Date(exercise.dueDate).getTime()) return 100\r\n  const millisecondsInADay = 1000*60*60*42\r\n  // frequency is included in the model. Will be Daily, Weekly, Bi-Weekly, or X times per week\r\n  const frequency = exercise.frequency\r\n  // progress is included in the model. It indicates how many times the exercise has been completed\r\n  const totalCompletions = exercise.goal\r\n  // Get the day the exercise was assigned\r\n  const assignmentDate = new Date(selectedAssignment.dateAssigned)\r\n  // Get the day the exercise is due\r\n  const dueDate = new Date(exercise.dueDate)\r\n  // Get today's date as a reference point\r\n  const today = new Date()\r\n  // Calculate how many days have passed since the exercise was assigned\r\n  let daysSinceAssignment;\r\n  daysSinceAssignment = (today.getTime() - assignmentDate.getTime()) / millisecondsInADay\r\n  // Calculate how many days there were to complete the assignment\r\n  // let daysToCompleteExercise;\r\n  // daysToCompleteExercise = (dueDate.getTime() - assignmentDate.getTime()) / millisecondsInADay\r\n  // Will indicate how many times the exercise should have been completed\r\n  let expectedCompletions = 0\r\n  switch (frequency) {\r\n    case \"Daily\":\r\n      expectedCompletions = daysSinceAssignment\r\n      break\r\n    case \"Weekly\":\r\n      expectedCompletions = daysSinceAssignment/7\r\n      break\r\n    case \"Bi-Weekly\":\r\n      expectedCompletions = daysSinceAssignment/3.5\r\n      break\r\n    default:\r\n      // X per week case\r\n      const completionsPerWeek = Number(frequency)\r\n      expectedCompletions = daysSinceAssignment/(7/completionsPerWeek)\r\n      break\r\n  }\r\n\r\n  // Return it as a percent\r\n  return 100 * expectedCompletions/totalCompletions\r\n\r\n}\r\n\r\n\r\nfunction completeAssignmentButton() {\r\n\r\n  const handleClickOpen = () => {\r\n      setAssignmentCompletionDialogOpen(true)\r\n  }\r\n\r\n  const handleClose = () => {\r\n      setAssignmentCompletionDialogOpen(false)\r\n  }\r\n\r\n  // if flag to redirect to assignment form is true, redirect to assignment form. Otherwise, render the page\r\n  \r\n  \r\n  return (\r\n  <div className = \"Complete-assignment-button-div\">\r\n  <Button className = \"Complete-assignment-button\" variant=\"outlined\" color=\"primary\" onClick={handleClickOpen} disabled = {selectedAssignment.completedByTherapist}>\r\n        {selectedAssignment.completedByTherapist != undefined ? \"Complete Assignment\" : \"Create Assignment\"}\r\n      </Button>\r\n      <Dialog\r\n        open = {assignmentCompletionDialogOpen}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n      >\r\n        <DialogTitle id=\"alert-dialog-title\">{selectedAssignment.due != undefined ? \"Complete Assignment?\" : \"Create Assignment?\"}</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id=\"alert-dialog-description\">\r\n            {selectedAssignment.due != undefined ? \"Are you sure you want to complete the selected assignment?\" : \"Would you like to create a new assignment?\"}\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={selectedAssignment.due != undefined ? completeAssignment : createAssignment} color=\"primary\">\r\n            Yes\r\n          </Button>\r\n          <Button onClick={handleClose} color=\"primary\" autoFocus>\r\n            No\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n      </div>)\r\n}\r\n\r\nasync function completeAssignment() {\r\n  // Assignments are sorted in descending order of visitNumber (whatever nth visit during which they were assigned)\r\n  // change status of selected assignment to \"Complete\"\r\n  let targetVisitNumber = selectedAssignment.visitNumber\r\n  let data = assignments.slice()\r\n  for (let assignment of data) {\r\n    if (assignment.visitNumber == targetVisitNumber) {\r\n      // Update database\r\n      await closeAssignment(assignment)\r\n      console.log(\"Updating global store\")\r\n      // Update global store\r\n      dispatch(\r\n        completeClientAssignment({\r\n          assignment: assignment\r\n        })\r\n      )\r\n      \r\n      let completedAssignment = Object.assign({}, data[targetVisitNumber - 1])\r\n      completedAssignment.completedByTherapist = true\r\n      data[targetVisitNumber - 1] = completedAssignment\r\n\r\n      break;\r\n    }\r\n  }\r\n\r\n\r\n  // Check if the newest assignment is an actual assignment. If not, make a new barebones assignment so that a new bubbble can be made. Just exists with required fields for visuals\r\n  if (data[data.length - 1].completedByTherapist) {\r\n    let newAssignmentForNewBubble = {\r\n    visitNumber: data.length + 1,\r\n    due: undefined,\r\n    assignmentProgress: 0,\r\n    status: 0\r\n    \r\n    }\r\n    data.push(newAssignmentForNewBubble)\r\n  }\r\n    setAssignments(data)\r\n    setSelectedAssignment(data[data.length - 1])\r\n    setAssignmentCompletionDialogOpen(false)\r\n}\r\n\r\n// Sets up redirect to assignment form if therapist wants to make new assignment\r\nconst createAssignment = () => {\r\n  // setRedirectToAssignmentForm(true)\r\n  history.push('/AssignmentForm')\r\n}\r\n\r\nfunction changeVisibleAssignment(visitNumber) {\r\n  // change the assignment being shown to a new one based on the visitNumber provided by the assignment bubble\r\n  for (let assignment of assignments) {\r\n    if (assignment.visitNumber == visitNumber) {\r\n      setSelectedAssignment(assignment)\r\n      break\r\n    }\r\n  }\r\n\r\n  \r\n\r\n}\r\n\r\n// Take in an assignment. Return the total progress as a percent. Divide assignment progress (completions so far) by total amount of completions expected\r\nfunction calculateAssignmentProgressAsPercent(assignment) {\r\n  if (assignment.due) {\r\n    let totalCompletions = 0;\r\n    for (let exercise of assignment.exerciseList) {\r\n      totalCompletions += exercise.goal\r\n    }\r\n    return 100 * assignment.assignmentProgress / totalCompletions\r\n  }\r\n  return 0\r\n}\r\n\r\nfunction getBubbleInfo(assignmentsList) {\r\n  const ongoingBubbleColor = '#00b5d9'\r\n  const completedBubbleColor = '#20315f'\r\n  const completedBubblePathColor = '#FFFFFF'\r\n  const ongoingBubblePathColor = '#ac6ef3'\r\n    let progressBubbleComponents = []\r\n    // 7 Assignments on the row at a time\r\n    for (let assignmentIndex = 0; assignmentIndex < 7; assignmentIndex++) {\r\n      // Make an invisible assignment bubble so the spacing still works out\r\n      if (assignmentsList.length <= assignmentIndex) {\r\n        progressBubbleComponents.push(\r\n          <div className = \"Progress-bubble-column-hidden\">\r\n            <CircularProgressbar  className = \"Progress-bubbles\"\r\n            background\r\n            backgroundPadding={6}/>\r\n          </div>\r\n        )\r\n      } else {\r\n        let targetIndex = assignmentsList.length - assignmentIndex - 1\r\n        let targetAssignment = assignmentsList[targetIndex]\r\n        progressBubbleComponents.unshift(\r\n          <div className = \"Progress-bubble-column\" onClick = {() => changeVisibleAssignment(targetAssignment.visitNumber)}>\r\n            <CircularProgressbar  className = \"Progress-bubbles\" value={calculateAssignmentProgressAsPercent(targetAssignment)}\r\n            text={targetAssignment.due ? `${new Date(targetAssignment.due).getMonth()+1}/${new Date(targetAssignment.due).getDate()}` : 'New'}\r\n            background\r\n            backgroundPadding={6}\r\n            styles={buildStyles({\r\n              backgroundColor: `${targetAssignment.completedByTherapist ? completedBubbleColor : ongoingBubbleColor}`,\r\n              textColor: \"#fff\",\r\n              pathColor: `${targetAssignment.completedByTherapist ? completedBubblePathColor : ongoingBubblePathColor}`,\r\n              trailColor: \"transparent\"\r\n            })}/>\r\n          </div>)\r\n      }\r\n    }\r\n  return (<div className = \"Progress-bubbles-container\">\r\n    {progressBubbleComponents}\r\n  </div>)\r\n}\r\n\r\nfunction getClientInfo(client) {\r\n  const result = \r\n    <Row>\r\n      <MDBCard className = \"Client-information\">\r\n        <Image src={picture} roundedCircle className=\"picture\"/>\r\n        <div className=\"clientInfoCardContainer\">\r\n          <p className=\"clientInfoCard\">{client.name}</p>\r\n          <p className=\"clientInfoCard\">Client Since: {client.clientSince}</p>\r\n          <p className=\"clientInfoCard\">Next Session: {client.nextSession}</p>\r\n        </div>\r\n      </MDBCard>\r\n    </Row>\r\n  return result;\r\n}\r\n\r\n function getExercises(exercises) {\r\n      if (exercises) \r\n      {\r\n        const ActualLinearProgress = withStyles((theme) => ({\r\n          root: {\r\n            height: 30,\r\n            borderRadius: 10\r\n          },\r\n          colorPrimary: {\r\n            backgroundColor: \"#FFFFFF\"\r\n          },\r\n          bar: {\r\n            backgroundColor: \"#ac6ef3\"\r\n          }\r\n        }))(LinearProgress);\r\n\r\n        const ExpectedLinearProgress = withStyles((theme) => ({\r\n          root: {\r\n            height: 30,\r\n            borderRadius: 10\r\n          },\r\n          colorPrimary: {\r\n            backgroundColor: \"#FFFFFF\"\r\n          },\r\n          bar: {\r\n            backgroundColor: \"#20315f\"\r\n          }\r\n        }))(LinearProgress);\r\n        \r\n      const result = exercises.map((exercise) =>\r\n      <div className = \"Exercise-data\">\r\n        <Row>\r\n            <Col>\r\n              <ActualLinearProgress className = \"Linear-progress-bar\" variant = {\"determinate\"} value = {100*exercise.progress/exercise.goal} color = \"primary\" thickness={5}/>\r\n              <ExpectedLinearProgress className = \"Linear-progress-bar\" variant = {\"determinate\"} value = {calculateExpectedExerciseProgress(exercise)} color = \"primary\"/>\r\n            </Col>\r\n            <Col>\r\n                <p>{exercise.exerciseTitle}<br></br>{`${new Date(exercise.dueDate).getMonth()+1}/${new Date(exercise.dueDate).getDate()}`}</p>\r\n            </Col>\r\n        </Row>\r\n        <br></br>\r\n      </div>\r\n      );\r\n      return result;\r\n      }\r\n    }\r\n\r\n    return(\r\n      <div>\r\n          <div className = \"App-logo-container\">\r\n              <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n          </div>\r\n          <div className = \"Client-view-title-container\">\r\n              <p className = \"Client-view-title-text\">  {client.name}</p> {/*Get this from previous page*/}\r\n          </div>\r\n            \r\n          <Container fluid className = \"background-container\">\r\n            <Row className = \"background\">\r\n              <div className = \"Client-information-container\">\r\n                <Col>\r\n                  {getClientInfo(client)}\r\n                </Col>\r\n              </div>\r\n              {/*<Col>\r\n                <MDBCard className=\"Exercise-preview-body\">\r\n                  <MDBCardTitle className=\"Exercise-preview-placeholder-text\">-Exercise Preview-</MDBCardTitle>\r\n                </MDBCard>         \r\n              </Col>*/} \r\n              <Col>\r\n                    <Row>\r\n                    </Row>\r\n                    <Row>\r\n                      {getBubbleInfo(assignments)}\r\n                    </Row>\r\n                    <Row>\r\n                        <Col>\r\n                        <Card className=\"Assignment-completion-body\">\r\n                            <Card.Body>\r\n                                <Row>\r\n                                    <Col>\r\n                                      <div className = \"Assignment-completion-status-text-container\">\r\n                                        <MDBCardTitle className=\"Assignment-completion-status-text\">{selectedAssignment.completedByTherapist ? 'Completed' : 'Ongoing'}</MDBCardTitle> {/*Get this from patient data*/}\r\n                                      </div>\r\n                                    </Col>\r\n                                    <Col className = \"Assignment-due-date-col\">\r\n                                      <div className = \"Assignment-due-date-container\">\r\n                                        <MDBCardTitle className=\"Assignment-due-date-text\">\r\n                                          Due by: <u>{selectedAssignment.due ? `${new Date(selectedAssignment.due).getMonth() + 1}/${new Date(selectedAssignment.due).getDate()}` : ''}</u>\r\n                                        </MDBCardTitle> {/*Get this from patient data*/}\r\n                                      </div>\r\n                                    </Col>\r\n                                    <Col className = \"Complete-assignment-button-col\">\r\n                                      {completeAssignmentButton()}\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row>\r\n                                    <Col>\r\n                                      <div className = \"Assignment-progress-container\">\r\n                                        <MDBCardTitle className=\"Assignment-completion-title-text\">Assignment Completion</MDBCardTitle>\r\n                                        <div className=\"Exercise-data-container\">\r\n                                          {/*getExercises(this.state.patient.assignments[this.state.selectedAssignment].exerciseList)  until selectedAssignment being an object works*/}\r\n                                          {getExercises(selectedAssignment.exerciseList)}\r\n                                        </div>\r\n                                      </div>\r\n                                    </Col>\r\n                                </Row>\r\n                            </Card.Body>\r\n                        </Card>\r\n                        </Col>\r\n                    </Row>      \r\n              </Col>\r\n            </Row>\r\n          </Container> \r\n     </div>\r\n     )\r\n\r\n}\r\n\r\n\r\n  //#region Exercise Type Dropdown\r\n  const CustomToggle = React.forwardRef(({ children, onClick }, ref) => (\r\n    <a\r\n      href=\"./ClientView\"\r\n      ref={ref}\r\n      onClick={(e) => {\r\n        e.preventDefault();\r\n        onClick(e);\r\n      }}\r\n    >\r\n      {children}\r\n      &#x25bc;\r\n    </a>\r\n  ));\r\n\r\n  \r\n//#endregion  \r\n\r\n\r\nexport default ClientView;","D:\\STEVENS\\STEVENS\\SPRING + FALL + WINTER 2020\\FALL 2020\\CS 423 Senior Design I\\project\\senior-design-2020\\app\\src\\redux\\reducer.js",[],"D:\\STEVENS\\STEVENS\\SPRING + FALL + WINTER 2020\\FALL 2020\\CS 423 Senior Design I\\project\\senior-design-2020\\app\\src\\api\\clientAPI.js",["115"],"import { __esModule } from \"redux-persist/lib/storage/createWebStorage\"\r\n\r\nexport const getAssignments = async (patientID) => {\r\n    let assignments = await fetch(`http://localhost:3080/assignments/patient/${patientID}`)\r\n    assignments = await assignments.json()\r\n    assignments.sort((a, b) => a.visitNumber - b.visitNumber)\r\n    return assignments\r\n}\r\n\r\nexport const closeAssignment = async (assignmentObject) => {\r\n    // mark the assignment as completed by the therapist\r\n    let closedAssignment = Object.assign({}, assignmentObject);\r\n    console.log(`Read only property: ${closedAssignment.completedByTherapist}`)\r\n    closedAssignment.completedByTherapist = true\r\n    const postSettings = {\r\n        method: 'POST',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(closedAssignment),\r\n      }\r\n\r\n      await fetch(`http://localhost:3080/assignments/${assignmentObject._id}/edit`, postSettings)\r\n}\r\n\r\nexport const postAssignment = async (assignmentObject) => {\r\n  const postSettings = {\r\n    method: 'POST',\r\n    headers: {\r\n      'Accept': 'application/json',\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify(assignmentObject),\r\n  }\r\n\r\n  await fetch(`http://localhost:3080/assignments/`, postSettings)\r\n}","D:\\STEVENS\\STEVENS\\SPRING + FALL + WINTER 2020\\FALL 2020\\CS 423 Senior Design I\\project\\senior-design-2020\\app\\src\\redux\\slices\\therapistSlice.js",["116","117"],"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\n//import { postRecord } from \"../../utils/lssApi\";\r\n// create postClient equivalent of this\r\n\r\n\r\n/*\r\n    id: \"\",\r\n    name: \"initial name\",\r\n    clientSince: \"\",\r\n    nextSession: \"\",\r\n    loading: \"idle\",\r\n    currentRequestId: undefined\r\n\r\n    {\r\n        \"PjohnDoe1\": [\r\n            {\r\n                Assignment1\r\n            },\r\n            {\r\n                Assignment2\r\n            }\r\n        ],\r\n\r\n        \"PpattyPancakes1\": [\r\n            {\r\n                Assignment1\r\n            },\r\n            {\r\n                Assignment2\r\n            }\r\n        ]\r\n    }\r\n\r\n*/\r\n\r\n\r\nconst therapistSlice = createSlice({\r\n  name: \"therapist\",\r\n  initialState: {\r\n    therapist: {\r\n      id: \"\",\r\n      clientInfo: {} //client list mapped by patient ids\r\n    },\r\n  },\r\n  reducers: {\r\n    updateTherapistClientList: (state, action) => {\r\n      state.therapist.clientInfo = action.payload.clientInfo;\r\n    },\r\n\r\n    addAssignmentToClient: (state, action) => {\r\n        let patientId = action.payload.assignment.patientId;\r\n        let assignment = action.payload.assignment;\r\n        state.therapist.clientInfo[patientId].push(assignment)\r\n    },\r\n\r\n    completeClientAssignment: (state, action) => {\r\n        let patientId = action.payload.assignment.patientId;\r\n        // Find the index of the assignment that matches the supplied assignment ID for the supplied patient ID\r\n        console.log(state.therapist.therapist)\r\n        console.log(action.payload)\r\n        let targetIndex = state.therapist.clientInfo[patientId].findIndex((assignment) => assignment._id == action.payload.assignment._id);\r\n        // Update the completedByTherapist field of the assignment at targetIndex to indicate that the therapist marked it as completed\r\n        state.therapist.clientInfo[patientId][targetIndex].completedByTherapist = true;\r\n\r\n    }\r\n  },\r\n  extraReducers: {\r\n    \r\n  },\r\n});\r\n\r\nexport const { updateTherapistClientList, addAssignmentToClient, completeClientAssignment } = therapistSlice.actions;\r\n\r\nexport default therapistSlice.reducer;\r\n","D:\\STEVENS\\STEVENS\\SPRING + FALL + WINTER 2020\\FALL 2020\\CS 423 Senior Design I\\project\\senior-design-2020\\app\\src\\redux\\slices\\clientSlice.js",[],"D:\\STEVENS\\STEVENS\\SPRING + FALL + WINTER 2020\\FALL 2020\\CS 423 Senior Design I\\project\\senior-design-2020\\app\\src\\redux\\slices\\assignmentSlice.js",["118","119"],{"ruleId":"120","severity":1,"message":"121","line":6,"column":8,"nodeType":"122","messageId":"123","endLine":6,"endColumn":11},{"ruleId":"124","replacedBy":"125"},{"ruleId":"126","replacedBy":"127"},{"ruleId":"120","severity":1,"message":"128","line":6,"column":8,"nodeType":"122","messageId":"123","endLine":6,"endColumn":13},{"ruleId":"120","severity":1,"message":"129","line":11,"column":3,"nodeType":"122","messageId":"123","endLine":11,"endColumn":14},{"ruleId":"120","severity":1,"message":"130","line":2,"column":17,"nodeType":"122","messageId":"123","endLine":2,"endColumn":27},{"ruleId":"120","severity":1,"message":"131","line":2,"column":50,"nodeType":"122","messageId":"123","endLine":2,"endColumn":59},{"ruleId":"120","severity":1,"message":"132","line":3,"column":23,"nodeType":"122","messageId":"123","endLine":3,"endColumn":34},{"ruleId":"120","severity":1,"message":"133","line":5,"column":19,"nodeType":"122","messageId":"123","endLine":5,"endColumn":31},{"ruleId":"120","severity":1,"message":"134","line":14,"column":10,"nodeType":"122","messageId":"123","endLine":14,"endColumn":24},{"ruleId":"120","severity":1,"message":"135","line":17,"column":11,"nodeType":"122","messageId":"123","endLine":17,"endColumn":19},{"ruleId":"120","severity":1,"message":"136","line":62,"column":11,"nodeType":"122","messageId":"123","endLine":62,"endColumn":23},{"ruleId":"120","severity":1,"message":"137","line":63,"column":11,"nodeType":"122","messageId":"123","endLine":63,"endColumn":28},{"ruleId":"138","severity":1,"message":"139","line":64,"column":29,"nodeType":"140","messageId":"141","endLine":64,"endColumn":31},{"ruleId":"138","severity":1,"message":"139","line":71,"column":38,"nodeType":"140","messageId":"141","endLine":71,"endColumn":40},{"ruleId":"138","severity":1,"message":"139","line":71,"column":76,"nodeType":"140","messageId":"141","endLine":71,"endColumn":78},{"ruleId":"142","severity":1,"message":"143","line":97,"column":15,"nodeType":"144","endLine":124,"endColumn":6},{"ruleId":"138","severity":1,"message":"139","line":129,"column":46,"nodeType":"140","messageId":"141","endLine":129,"endColumn":48},{"ruleId":"138","severity":1,"message":"139","line":129,"column":104,"nodeType":"140","messageId":"141","endLine":129,"endColumn":106},{"ruleId":"138","severity":1,"message":"139","line":129,"column":157,"nodeType":"140","messageId":"141","endLine":129,"endColumn":159},{"ruleId":"138","severity":1,"message":"139","line":129,"column":206,"nodeType":"140","messageId":"141","endLine":129,"endColumn":208},{"ruleId":"138","severity":1,"message":"139","line":129,"column":267,"nodeType":"140","messageId":"141","endLine":129,"endColumn":269},{"ruleId":"138","severity":1,"message":"139","line":174,"column":25,"nodeType":"140","messageId":"141","endLine":174,"endColumn":27},{"ruleId":"120","severity":1,"message":"145","line":183,"column":14,"nodeType":"122","messageId":"123","endLine":183,"endColumn":21},{"ruleId":"120","severity":1,"message":"146","line":10,"column":8,"nodeType":"122","messageId":"123","endLine":10,"endColumn":22},{"ruleId":"138","severity":1,"message":"139","line":27,"column":24,"nodeType":"140","messageId":"141","endLine":27,"endColumn":26},{"ruleId":"120","severity":1,"message":"147","line":40,"column":23,"nodeType":"122","messageId":"123","endLine":40,"endColumn":37},{"ruleId":"142","severity":1,"message":"148","line":90,"column":3,"nodeType":"122","endLine":90,"endColumn":12,"suggestions":"149"},{"ruleId":"120","severity":1,"message":"130","line":1,"column":17,"nodeType":"122","messageId":"123","endLine":1,"endColumn":27},{"ruleId":"120","severity":1,"message":"131","line":1,"column":50,"nodeType":"122","messageId":"123","endLine":1,"endColumn":59},{"ruleId":"120","severity":1,"message":"150","line":3,"column":10,"nodeType":"122","messageId":"123","endLine":3,"endColumn":21},{"ruleId":"120","severity":1,"message":"129","line":5,"column":19,"nodeType":"122","messageId":"123","endLine":5,"endColumn":30},{"ruleId":"120","severity":1,"message":"151","line":5,"column":58,"nodeType":"122","messageId":"123","endLine":5,"endColumn":69},{"ruleId":"120","severity":1,"message":"152","line":19,"column":10,"nodeType":"122","messageId":"123","endLine":19,"endColumn":24},{"ruleId":"120","severity":1,"message":"153","line":20,"column":10,"nodeType":"122","messageId":"123","endLine":20,"endColumn":20},{"ruleId":"120","severity":1,"message":"154","line":54,"column":9,"nodeType":"122","messageId":"123","endLine":54,"endColumn":19},{"ruleId":"120","severity":1,"message":"155","line":56,"column":12,"nodeType":"122","messageId":"123","endLine":56,"endColumn":29},{"ruleId":"120","severity":1,"message":"156","line":62,"column":27,"nodeType":"122","messageId":"123","endLine":62,"endColumn":45},{"ruleId":"142","severity":1,"message":"143","line":109,"column":15,"nodeType":"144","endLine":111,"endColumn":6},{"ruleId":"120","severity":1,"message":"157","line":126,"column":7,"nodeType":"122","messageId":"123","endLine":126,"endColumn":29},{"ruleId":"138","severity":1,"message":"158","line":136,"column":19,"nodeType":"140","messageId":"141","endLine":136,"endColumn":21},{"ruleId":"120","severity":1,"message":"159","line":159,"column":16,"nodeType":"122","messageId":"123","endLine":159,"endColumn":32},{"ruleId":"120","severity":1,"message":"160","line":170,"column":16,"nodeType":"122","messageId":"123","endLine":170,"endColumn":24},{"ruleId":"120","severity":1,"message":"134","line":24,"column":26,"nodeType":"122","messageId":"123","endLine":24,"endColumn":40},{"ruleId":"142","severity":1,"message":"161","line":53,"column":5,"nodeType":"122","endLine":53,"endColumn":14,"suggestions":"162"},{"ruleId":"142","severity":1,"message":"143","line":53,"column":15,"nodeType":"144","endLine":75,"endColumn":6},{"ruleId":"120","severity":1,"message":"163","line":91,"column":9,"nodeType":"122","messageId":"123","endLine":91,"endColumn":16},{"ruleId":"138","severity":1,"message":"158","line":141,"column":50,"nodeType":"140","messageId":"141","endLine":141,"endColumn":52},{"ruleId":"138","severity":1,"message":"158","line":149,"column":70,"nodeType":"140","messageId":"141","endLine":149,"endColumn":72},{"ruleId":"138","severity":1,"message":"158","line":152,"column":37,"nodeType":"140","messageId":"141","endLine":152,"endColumn":39},{"ruleId":"138","severity":1,"message":"158","line":156,"column":51,"nodeType":"140","messageId":"141","endLine":156,"endColumn":53},{"ruleId":"138","severity":1,"message":"139","line":173,"column":32,"nodeType":"140","messageId":"141","endLine":173,"endColumn":34},{"ruleId":"138","severity":1,"message":"139","line":218,"column":32,"nodeType":"140","messageId":"141","endLine":218,"endColumn":34},{"ruleId":"120","severity":1,"message":"164","line":415,"column":9,"nodeType":"122","messageId":"123","endLine":415,"endColumn":21},{"ruleId":"120","severity":1,"message":"165","line":1,"column":10,"nodeType":"122","messageId":"123","endLine":1,"endColumn":20},{"ruleId":"120","severity":1,"message":"166","line":1,"column":23,"nodeType":"122","messageId":"123","endLine":1,"endColumn":39},{"ruleId":"138","severity":1,"message":"139","line":61,"column":106,"nodeType":"140","messageId":"141","endLine":61,"endColumn":108},{"ruleId":"120","severity":1,"message":"166","line":1,"column":23,"nodeType":"122","messageId":"123","endLine":1,"endColumn":39},{"ruleId":"120","severity":1,"message":"167","line":2,"column":10,"nodeType":"122","messageId":"123","endLine":2,"endColumn":25},"no-unused-vars","'App' is defined but never used.","Identifier","unusedVar","no-native-reassign",["168"],"no-negated-in-lhs",["169"],"'axios' is defined but never used.","'MDBCardBody' is defined but never used.","'useContext' is defined but never used.","'Component' is defined but never used.","'useSelector' is defined but never used.","'MDBCardTitle' is defined but never used.","'getAssignments' is defined but never used.","'dispatch' is assigned a value but never used.","'dueByChoices' is assigned a value but never used.","'frequenceyChoices' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","'getGoal' is defined but never used.","'bonelliPicture' is defined but never used.","'setPatientList' is assigned a value but never used.","React Hook useEffect contains a call to 'setFetchedTherapistClientInfo'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [fetchedTherapistClientInfo, updateTherapistStore] as a second argument to the useEffect Hook.",["170"],"'FormControl' is defined but never used.","'MDBCardText' is defined but never used.","'openAssignment' is defined but never used.","'openClient' is defined but never used.","'stateCheck' is assigned a value but never used.","'currentAssignment' is assigned a value but never used.","'setAssignmentState' is assigned a value but never used.","'postAssignmentToClient' is assigned a value but never used.","Expected '!==' and instead saw '!='.","'assignAssignment' is defined but never used.","'toUpdate' is assigned a value but never used.","React Hook useEffect contains a call to 'setAssignmentsFetched'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [assignmentsFetched, assignments] as a second argument to the useEffect Hook.",["171"],"'dueDate' is assigned a value but never used.","'CustomToggle' is assigned a value but never used.","'__esModule' is defined but never used.","'createAsyncThunk' is defined but never used.","'closeAssignment' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"172","fix":"173"},{"desc":"174","fix":"175"},"Add dependencies array: [fetchedTherapistClientInfo, updateTherapistStore]",{"range":"176","text":"177"},"Add dependencies array: [assignmentsFetched, assignments]",{"range":"178","text":"179"},[2944,2944],", [fetchedTherapistClientInfo, updateTherapistStore]",[2884,2884],", [assignmentsFetched, assignments]"]