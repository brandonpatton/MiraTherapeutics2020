[{"D:\\2021S\\Mira\\senior-design-2020\\app\\src\\index.js":"1","D:\\2021S\\Mira\\senior-design-2020\\app\\src\\App.js":"2","D:\\2021S\\Mira\\senior-design-2020\\app\\src\\reportWebVitals.js":"3","D:\\2021S\\Mira\\senior-design-2020\\app\\src\\views\\PracticeView.js":"4","D:\\2021S\\Mira\\senior-design-2020\\app\\src\\views\\ClientView.js":"5","D:\\2021S\\Mira\\senior-design-2020\\app\\src\\views\\ExerciseForm.js":"6","D:\\2021S\\Mira\\senior-design-2020\\app\\src\\views\\AssignmentForm.js":"7"},{"size":1139,"mtime":1615350894891,"results":"8","hashOfConfig":"9"},{"size":3131,"mtime":1615350894822,"results":"10","hashOfConfig":"9"},{"size":375,"mtime":1615350894897,"results":"11","hashOfConfig":"9"},{"size":5917,"mtime":1615351463940,"results":"12","hashOfConfig":"9"},{"size":19376,"mtime":1615501405154,"results":"13","hashOfConfig":"9"},{"size":9938,"mtime":1615350909034,"results":"14","hashOfConfig":"9"},{"size":10618,"mtime":1615350909023,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18","usedDeprecatedRules":"19"},"14p404c",{"filePath":"20","messages":"21","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"19"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"19"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"19"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"19"},"D:\\2021S\\Mira\\senior-design-2020\\app\\src\\index.js",["36"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\nimport Page1 from \"./App\";\r\nimport PracticeView from \"./views/PracticeView\";\r\nimport ExerciseForm from \"./views/ExerciseForm\";\r\nimport ClientView from \"./views/ClientView\";\r\nimport AssignmentForm from \"./views/AssignmentForm\";\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n  <Switch>\r\n   <Route exact path=\"/\" component={Page1} />\r\n   <Route path=\"/PracticeView\" component={PracticeView} />\r\n   <Route path=\"/ExerciseForm\" component={ExerciseForm} />\r\n   <Route path=\"/ClientView\" component={ClientView} />\r\n   <Route path=\"/AssignmentForm\" component={AssignmentForm} />\r\n\r\n </Switch>\r\n </BrowserRouter>,\r\n rootElement\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n",["37","38"],"D:\\2021S\\Mira\\senior-design-2020\\app\\src\\App.js",["39","40"],"import React, { Component } from \"react\";\r\nimport logo from './Mira.jpg';\r\nimport banner from './MiraBanner.png';\r\nimport bubble from './bubbles.png';\r\nimport './css/App.css';\r\nimport axios from 'axios';\r\nimport Button from 'react-bootstrap/Button';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { MDBCard, MDBCardBody, MDBContainer,MDBCardTitle,MDBCardText } from \"mdbreact\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { apiResponse: \"\" };\r\n  }\r\n\r\n  callAPI() {\r\n      fetch(\"http://localhost:3080/\")\r\n          .then(res => res.text())\r\n          .then(res => this.setState({ apiResponse: res }));\r\n  }\r\n\r\n  componentDidMount() {\r\n      this.callAPI();\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <div className=\"App\">\r\n\r\n        <header className = \"Mira-site-header\">\r\n            <img src={banner} className=\"Mira-banner\" alt=\"banner\"/>\r\n        </header>\r\n\r\n        <div className = \"App-logo-container\">\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        </div>\r\n\r\n        <body>\r\n          <div className = \"App-background-container\">\r\n            <div className = \"bg\"></div>\r\n          </div> \r\n        </body>\r\n\r\n\r\n        <div className = \"Username-bubble-image\">\r\n          <img src={bubble} className=\"bubble1\" alt=\"bubble\" />\r\n        </div>\r\n\r\n        <div className = \"Password-bubble-image\">\r\n          <img src={bubble} className=\"bubble2\" alt=\"bubble\" />\r\n        </div>\r\n\r\n        <div className = \"Login-container\">\r\n          <form>\r\n            <input className = \"Username\" type=\"text\" placeholder=\"Username\" id=\"unamee\" name=\"username\"></input>\r\n            <input className = \"Password\" type=\"text\" placeholder=\"Password\"id=\"pword\" name=\"password\"></input>\r\n         </form>\r\n        </div>\r\n\r\n\r\n        <Link to = \"/PracticeView\"><Button  className = \"Button\" onClick=\"window.location.href='/PracticeView'\"type=\"button\">Log In</Button></Link>\r\n\r\n        <div className = \"New-user-container\">\r\n          <a href = \"www.google.com\" className = \"user\">New User?</a>\r\n        </div>             \r\n        \r\n        <div className = \"Forgot-password-container\">\r\n          <a href = \"www.google.com\" className= \"pword\">Forgot Password?</a>\r\n        </div>\r\n\r\n        <div>  \r\n        <MDBContainer className = \"Card\">\r\n          <MDBCard className=\"card-body\">\r\n            <MDBCardTitle className = \"Card1-title\">Miratx Articles</MDBCardTitle>\r\n            <MDBCardText>\r\n              Articles from Miratx\r\n            </MDBCardText>\r\n          </MDBCard>          \r\n        </MDBContainer>\r\n        </div>\r\n\r\n        <div>\r\n        <MDBContainer className = \"Card-2\">\r\n          <MDBCard className=\"card-body-2\">\r\n            <MDBCardTitle className = \"Card2-title\">Miratx Articles</MDBCardTitle>\r\n            <MDBCardText>\r\n              Articles from Miratx\r\n            </MDBCardText>\r\n          </MDBCard>          \r\n        </MDBContainer>\r\n        </div>\r\n\r\n        <p className=\"App-intro\">{this.state.apiResponse}</p>\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default App;\r\n","D:\\2021S\\Mira\\senior-design-2020\\app\\src\\reportWebVitals.js",[],"D:\\2021S\\Mira\\senior-design-2020\\app\\src\\views\\PracticeView.js",["41","42","43","44"],"import React from \"react\";\r\nimport green from '../Green.PNG';\r\nimport Table from 'react-bootstrap/Table';\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Container from 'react-bootstrap/Container'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Card from 'react-bootstrap/Card'\r\nimport { Component } from \"react\";\r\nimport bonelliPicture from '../Bonelli-RECT.jpg';\r\nimport acasterPicture from '../james-acaster.jpg'\r\nimport Image from 'react-bootstrap/Image';\r\nimport { Link } from \"react-router-dom\";\r\nimport { Redirect } from 'react-router-dom'\r\nimport '../css/PracticeView.css'\r\n\r\n\r\nfunction patientClick(patient) {\r\n  this.setState(() => ({\r\n    selectedPatient: patient\r\n  }));\r\n}\r\n\r\n  class PracticeView extends Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = { selectedPatient: {\r\n                      name: 'Bruce Wayne',\r\n                      trackedSymptoms: 3,\r\n                      groundingExercises: 5,\r\n                      assignments: [true, false],\r\n                      nextSession: '3/4',\r\n                      status: 'Ongoing',\r\n                    } };\r\n      this.listItems = []\r\n      this.patients = [\r\n        {\r\n          name: 'Bruce Wayne',\r\n          trackedSymptoms: 3,\r\n          groundingExercises: 5,\r\n          assignments: [true, false],\r\n          nextSession: '3/4',\r\n          status: 'Ongoing'\r\n        },\r\n        {\r\n          name: 'Craig Ferguson',\r\n          trackedSymptoms: 3,\r\n          groundingExercises: 5,\r\n          assignments: [true, false],\r\n          nextSession: '2/8',\r\n          status: 'Ongoing'\r\n        },\r\n        {\r\n          name: 'Eduardo Bonelli',\r\n          trackedSymptoms: 3,\r\n          groundingExercises: 5,\r\n          assignments: [true, false],\r\n          nextSession: '12/24',\r\n          status: 'Ongoing'\r\n        },\r\n        {\r\n          name: 'James Acaster',\r\n          trackedSymptoms: 3,\r\n          groundingExercises: 5,\r\n          assignments: [true, true],\r\n          nextSession: '11/20',\r\n          status: 'Completed'\r\n        },\r\n        {\r\n          name: 'Scooby Doo',\r\n          trackedSymptoms: 3,\r\n          groundingExercises: 5,\r\n          assignments: [true, false],\r\n          nextSession: '3/14',\r\n          status: 'Ongoing'\r\n        }\r\n      ];\r\n\r\n      patientClick = patientClick.bind(this);\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n      window.onpopstate = function(event) {\r\n        // Allows back and forth action by refreshing the page if it was reached using the browser's back button\r\n        if (event.currentTarget.location.pathname == \"/PracticeView\") window.location.reload()\r\n    }\r\n  }\r\n\r\n    render(){\r\n      return(\r\n        <div>\r\n          <Container className = \"Profile\">\r\n            <Row>\r\n              <Col>\r\n                <div className = \"border\">\r\n                  <div className = \"Profile-info\">\r\n                    <Row className = \"Name-Row justify-content-md-center\">\r\n                      <Image src={acasterPicture} roundedCircle className=\"picture\"/>\r\n                    </Row>\r\n                    <Row className = \"Name-Row justify-content-md-center\">\r\n                      <Card className = \"Name-Card\">{this.state.selectedPatient.name}</Card>\r\n                    </Row>\r\n                    <Row className= \"Name-Row justify-content-md-center\">\r\n                      <Card className = \"Next-Session-Date\">{this.state.selectedPatient.nextSession}</Card>\r\n                    </Row>\r\n                    <Row className = \"Name-Row justify-content-md-center\">\r\n                      <Card className = \"Status\">{this.state.selectedPatient.status}</Card>\r\n                    </Row>\r\n                    <Row className = \"Name-Row justify-content-md-center\">\r\n                      <Link to = {{\r\n                          pathname: \"/ClientView\",\r\n                          data: {name: this.state.selectedPatient.name} // your data array of objects\r\n                        }}><Button variant=\"info\" className = \"Client-View-Button\">Go To Client View</Button></Link>\r\n                    </Row> \r\n                  </div>  \r\n                </div>             \r\n              </Col>\r\n              \r\n              <Col xs={8}>\r\n                <h1 className = \"Practice-view-title\">Practice View</h1>\r\n                <Table className = \"Table\">\r\n                <tbody>\r\n                  <TableRow className = \"Patients\" patients = {this.patients} />\r\n                </tbody>\r\n                </Table>\r\n              </Col>\r\n            </Row>\r\n          </Container>\r\n          \r\n          {/* <NumberList numbers = {this.numbers} /> */}\r\n        </div>\r\n      )\r\n    }\r\n  };\r\n      \r\nclass TableRow extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.patients = props.patients;\r\n  }\r\n\r\n  getRow(patients) {\r\n    const rowItems = patients.map((patient) =>\r\n      <tr onClick = {() => patientClick(patient)}>\r\n        <td className = \"Patient-name\" >Client: {patient.name}</td>\r\n        <p className = \"Tab\"></p>\r\n        <td className = \"Tracked-symptoms\">Tracked Symptoms {patient.trackedSymptoms} times</td>\r\n        <p className = \"Tab\"></p>\r\n        <td className = \"Exercise-use\">Grounding Exercises used {patient.groundingExercises} times</td>\r\n        <p className = \"Tab\"></p>\r\n        <td className = \"Completion\">Completed {this.getCompleted(patient.assignments)}/{patient.assignments.length} homework assignments</td>\r\n        <p className = \"Tab\"></p>\r\n        <td className = \"Completion-indicator\"><Image src={green} Green/></td>\r\n      </tr>\r\n    );\r\n    return rowItems;\r\n  } \r\n\r\n  getCompleted(assignments) {\r\n    let count = 0;\r\n    for (let assignment of assignments) {\r\n      if (assignment) {\r\n        count++;\r\n      }\r\n    }\r\n    return count;\r\n  }\r\n\r\n  render() {\r\n    return(this.getRow(this.patients))\r\n  }\r\n\r\n};\r\nexport default PracticeView","D:\\2021S\\Mira\\senior-design-2020\\app\\src\\views\\ClientView.js",["45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60"],"D:\\2021S\\Mira\\senior-design-2020\\app\\src\\views\\ExerciseForm.js",["61","62","63","64","65","66","67","68","69"],"import React from \"react\";\r\nimport { Component } from \"react\";\r\nimport '../css/ExerciseForm.css';\r\nimport { MDBCard, MDBCardTitle } from \"mdbreact\";\r\nimport logo from '../Mira.jpg';\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Container from 'react-bootstrap/Container'\r\nimport Form from 'react-bootstrap/Form'\r\nimport Button from 'react-bootstrap/Button'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {Link, Redirect} from 'react-router-dom';\r\n\r\n\r\n\r\n\r\nclass ExerciseForm extends Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        chosenExercise: {\r\n          type: \"\",\r\n          name: \"\",\r\n          due: '',\r\n          frequency: '',\r\n          specialInstructions: ''\r\n        },\r\n        exerciseToEdit: props.location.data.editExercise,\r\n        added: props.location.data.addedExercises,\r\n        nextSession: props.location.data.nextSessionDate\r\n        \r\n      }\r\n      \r\n      console.log(this.state.added);\r\n\r\n      this.exerciseTypes = {\r\n        \"Grounding\": [\"Flashback Grounding\", \"Color Finder\", \"Breathing Exercise\", \"Vibration Tool\", \"Bilateral Simulation\", \"5, 4, 3, 2, 1 Grounding\", \"Any\", \"All\"],\r\n        \"Reading\": [\"PTSD Content\", \"Trauma Story\"],\r\n        \"Writing\": [\"Write About Trauma\", \"Free Writing\"],\r\n        \"Worksheets\": [\"CPT Worksheet\", \"PTP Worksheet\", \"Upload Your Own\"],\r\n        \"Assessments\": [\"PCL-5 Questionnaire\", \"PHQ-9 Questionnaire\"],\r\n        \"Lists\": [\"Gratefullness List\", \"Self-Care\", \"Stuck Points\", \"Create Your Own List\", \"Track Symptoms\", \"Track Triggers\"]      \r\n      }\r\n      this.dueByChoices = [\"Next Session\", \"Custom Days\", \"Custom Weeks\", \"Choose Date\"];\r\n      this.frequenceyChoices = [\"Daily\", \"Weekly\", \"Bi-Weekly\", \"Custom per Week\"];\r\n      if (this.state.added == [] || !this.state.added){\r\n        this.exercises = [];\r\n      } else {\r\n        this.exercises = this.state.added;\r\n      }\r\n      \r\n      if (this.state.exerciseToEdit == [] || this.state.exerciseToEdit == undefined){\r\n        this.state.chosenExercise = {\r\n          type: \"Grounding\",\r\n          name: \"Flashback Grounding\",\r\n          due: 'Next Session',\r\n          frequency: 'Daily',\r\n          specialInstructions: ''\r\n      };\r\n      } else {\r\n        this.state.chosenExercise = {\r\n          type: this.state.exerciseToEdit.type,\r\n          name: this.state.exerciseToEdit.name,\r\n          due: this.state.exerciseToEdit.due,\r\n          frequency: this.state.exerciseToEdit.frequency,\r\n          specialInstructions: this.state.exerciseToEdit.specialInstructions\r\n      }\r\n    }\r\n    }\r\n    \r\n    bigFilter(exerciseList, exercise){\r\n      const converted = [];\r\n      for (let i = 0; i < exerciseList.length; i++){\r\n        if (exerciseList[i].type == exercise.type && exerciseList[i].name == exercise.name && exerciseList[i].due == exercise.due && exerciseList[i].frequency == exercise.frequency && exerciseList[i].specialInstructions == exercise.specialInstructions){\r\n            exerciseList.splice(i, 1);\r\n            i--;\r\n            //delete exerciseList[i];\r\n        }\r\n      }\r\n      for (let j = 0; j < exerciseList.length; j++){\r\n        converted.push(Object.values(exerciseList[j]));\r\n      }\r\n      exerciseList = converted; \r\n      \r\n\r\n      //delete exerciseList[exerc]\r\n      //var filtered = exerciseList.filter(function(value, index, arr))\r\n      console.log(exerciseList);\r\n      console.log(this.state.added);\r\n      console.log(exercise);\r\n      return exerciseList;\r\n    }\r\n\r\n    getExercises(exercises) {\r\n      const result = exercises.map((exercise) =>\r\n      <Row>\r\n          <div className = \"Exercise-card-row\">\r\n              <MDBCard className = \"Exercise-card-body\">\r\n                  <p className=\"exerciseTitle\">{exercise[1]}</p>\r\n                  <p className=\"exerciseCard\">{exercise[5]}</p>\r\n                  <p className=\"exerciseCard\">Due By: {exercise[2]}</p>\r\n                  <p className=\"exerciseCard\">Special Instructions: {exercise[6]}</p >\r\n              </MDBCard>\r\n          </div>\r\n      </Row>\r\n      );\r\n      return result;\r\n    }\r\n    getExerciseFormData(data){\r\n      const result = Object.keys(data).map((d) =>\r\n        <option>{d}</option>\r\n      );      \r\n      return result;\r\n    }\r\n    getExerciseTitle(data, choice){\r\n      const result = data[choice].map((d) =>\r\n        <option>{d}</option>\r\n      );\r\n      return result;\r\n    }\r\n    setRedirect = () => {\r\n      this.setState({\r\n        redirect: true\r\n      });\r\n    }\r\n    doRedirect = () => {\r\n      if(this.state.redirect){\r\n          return <Redirect to='/AssignmentForm'/>\r\n      } \r\n    }\r\n    \r\n    render(){\r\n      return(\r\n        <div>\r\n          {/* <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"></meta> */}\r\n            <div className = \"App-logo-container\">\r\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n            </div>\r\n            <div className = \"Exercise-form-title-container\">\r\n                <p className = \"Exercise-form-title-text\">Exercise Form</p>\r\n            </div> \r\n            <Container fluid className = \"background-container\">\r\n              <Row className = \"background\">\r\n                <Col className = \"Added-exercise-list\">\r\n                    <Row className = \"Added-exercise-list-text\">Added Exercises:</Row>\r\n                    {this.getExercises(this.bigFilter(this.exercises, this.state.chosenExercise))}\r\n                </Col>\r\n                {/*<Col>\r\n                  <MDBCard className=\"Exercise-preview-body\">\r\n                    <MDBCardTitle className=\"Exercise-preview-placeholder-text\">-Exercise Preview-</MDBCardTitle>\r\n                  </MDBCard>          \r\n                </Col>*/}\r\n                <Col>\r\n                  <div className = \"Exercise-form-container\">\r\n                    <Form>\r\n                      <Form.Group controlId=\"exerciseType\">\r\n                        <Form.Label>Exercise Type</Form.Label>\r\n                        <Form.Control  onChange = {event => this.setState(()=>({chosenExercise: {type: event.target.value}}))} as=\"select\" defaultValue = {this.state.chosenExercise.type} custom>\r\n                          {this.getExerciseFormData(this.exerciseTypes)}\r\n                        </Form.Control>\r\n                      </Form.Group>\r\n                      <Form.Group controlId=\"exerciseTitle\">\r\n                        <Form.Label>Exercise Title</Form.Label>\r\n                        <Form.Control onChange = {event => this.setState(()=>({chosenExercise: {name: event.target.value}}))} as=\"select\" defaultValue = {this.state.chosenExercise.name} custom>\r\n                          {this.getExerciseTitle(this.exerciseTypes, this.state.chosenExercise.type)}\r\n                        </Form.Control>\r\n                      </Form.Group>\r\n                      <Form.Group>\r\n                        <Form.Label>Due By</Form.Label>\r\n                        <Form.Control onChange = {event => this.setState(()=>({chosenExercise: {due: event.target.value}}))} as=\"select\" defaultValue = {\"Next Session:\" + toString(this.state.nextSession)} custom>\r\n                          <option>{`Next Session: ${this.state.nextSession[0]}/${this.state.nextSession[1]}/${this.state.nextSession[2]}`}</option>\r\n                          <option>Days</option>\r\n                          <option>Weeks</option>\r\n                          <option>Choose Date</option>\r\n                        </Form.Control>\r\n                      </Form.Group>\r\n                      <Form.Group controlId=\"frequency\">\r\n                        <Form.Label>Frequency</Form.Label>\r\n                        <Form.Control onChange = {event => this.setState(()=>({chosenExercise: {due: event.target.value}}))} as=\"select\" defaultValue = {this.state.chosenExercise.frequency} custom>\r\n                          <option>Daily</option>\r\n                          <option>Weekly</option>\r\n                          <option>Bi-Weekly</option>\r\n                          <option>[x] per week</option>\r\n                        </Form.Control>\r\n                      </Form.Group>\r\n                      \r\n                      <Form.Group controlId=\"specialInstructions\">\r\n                        <Form.Label>Special Instructions</Form.Label>\r\n                        <Form.Control onChange = {event => this.setState(()=>({chosenExercise: {specialInstructions: event.target.value}}))} as = \"textarea\" placeholder=\"Enter Special Instructions\"  rows = {4} />\r\n                      </Form.Group>\r\n                      <Link to = {{\r\n                        pathname: \"/AssignmentForm\",\r\n                        data: {editedExerciseList: this.exercises,\r\n                                nextSession: this.state.nextSession} \r\n                      }}>\r\n                        <Button onClick={this.setRedirect} variant=\"primary\" type=\"Submit\">\r\n                          \r\n                          Add\r\n                        </Button>\r\n                      </Link>\r\n                    </Form>\r\n                  </div>\r\n                </Col>\r\n              </Row>\r\n            </Container> \r\n          {this.doRedirect()}\r\n       </div>\r\n       )\r\n    }\r\n  }\r\n\r\n/*class ExerciseRow extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.exercises = props.exercises;\r\n  }\r\n\r\n  getExercises(exercises) {\r\n    const result = exercises.map((exercise) =>\r\n      <Row>\r\n        <MDBCard>\r\n          <p className=\"exerciseCard\">{exercise.name}</p>\r\n          <p className=\"exerciseCard\">{exercise.frequency}</p>\r\n          <p className=\"exerciseCard\">{exercise.due}</p>\r\n          <p className=\"exerciseCard\">{exercise.specialInstructions}</p>\r\n          <p className=\"added\">Added</p>\r\n        </MDBCard>\r\n      </Row>\r\n    );\r\n    return result;\r\n  }\r\n  \r\n  render() {\r\n    return(this.getExercises(this.exercises))\r\n  }\r\n}*/\r\n \r\n\r\nexport default ExerciseForm;","D:\\2021S\\Mira\\senior-design-2020\\app\\src\\views\\AssignmentForm.js",["70","71","72","73"],"import React, { useContext } from \"react\";\r\nimport { Component, useState } from \"react\";\r\nimport '../css/ExerciseForm.css';\r\nimport { MDBCard, MDBCardBody, MDBContainer,MDBCardTitle,MDBCardText } from \"mdbreact\";\r\nimport logo from '../Mira.jpg';\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Container from 'react-bootstrap/Container'\r\nimport Form from 'react-bootstrap/Form'\r\nimport Button from 'react-bootstrap/Button'\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport '../css/AssignmentForm.css'\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport { Link } from \"react-router-dom\";\r\n\r\n\r\n\r\n/*function SetUpNextSession(){\r\n    const [startDate, setStartDate] = useState(new Date());\r\n}*/\r\n\r\nclass AssignmentForm extends Component {\r\n    \r\n  \r\n    constructor(props) {\r\n        super(props);\r\n        this.onFormSubmit = this.onFormSubmit.bind(this);\r\n        var today = new Date();\r\n        var dd = String(today.getDate()).padStart(2, '0');\r\n        var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\r\n        var yyyy = today.getFullYear();\r\n        today = mm + '/' + dd + '/' + yyyy;\r\n\r\n        \r\n        \r\n        this.state = {\r\n            startDate: new Date()\r\n          };\r\n        \r\n        this.assignment = \r\n        {\r\n            dateAssigned: today,\r\n            visitNumber: 3,\r\n            therapistName: \"Miranda Cosgrove\",\r\n            clientName: \"Eduardo Bonelli\",\r\n            due: '11/17',\r\n            status: 'Ongoing',\r\n            nextSession: \"\",\r\n            exercises: [\r\n                {\r\n                    type: \"Grounding\",\r\n                    name: \"Breathing Exercise\",\r\n                    due: '11/12',\r\n                    completionStatus: \"Danger\",\r\n                    completionAmount: 75,\r\n                    frequency: 'Daily',\r\n                    specialInstructions: 'Yes'\r\n                },\r\n                {\r\n                    type: \"Assessments\",\r\n                    name: \"PHQ-9 Questionnaire\",\r\n                    due: '11/15',\r\n                    completionStatus: \"Success\",\r\n                    completionAmount: 100,\r\n                    frequency: 'Weekly',\r\n                    specialInstructions: 'Yes'\r\n                },\r\n                {\r\n                    type: \"Reading\",\r\n                    name: \"Trauma Story\",\r\n                    due: '11/17',\r\n                    completionStatus: \"Ongoing\",\r\n                    completionAmount: 50,\r\n                    frequency: 'Daily',\r\n                    specialInstructions: 'Yes'\r\n                    \r\n                }\r\n            ]\r\n        }\r\n    }\r\n\r\n    \r\n\r\n\r\n    getExercises(exercises, next) {\r\n        \r\n        const result = exercises.map((exercise) =>\r\n        <Row>\r\n            <div className = \"Exercise-card-row\">\r\n                <MDBCard className = \"Exercise-card-body\">\r\n                    <p className=\"exerciseTitle\">{exercise.name} <Link to = {{\r\n                        pathname: \"/ExerciseForm\",\r\n                        data: {editExercise: exercise,\r\n                                addedExercises: exercises,\r\n                                nextSessionDate: [String(next.getMonth() + 1), String(next.getDate()), String(next.getFullYear())]}}}><EditIcon className = \"Edit-icon\"/></Link></p>\r\n                    <p className=\"exerciseCard\">{exercise.frequency}</p>\r\n                    <p className=\"exerciseCard\">Due By: {exercise.due}</p>\r\n                    <p className=\"exerciseCard\">Special Instructions: {exercise.specialInstructions}</p>\r\n                </MDBCard>\r\n            </div>\r\n        </Row>\r\n        );\r\n        return result;\r\n    }\r\n\r\n\r\n    onFormSubmit(e) {\r\n        e.preventDefault();\r\n    }\r\n     \r\n    render(){\r\n        \r\n        return(\r\n        <div>\r\n            <div className = \"App-logo-container\">\r\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n            </div>\r\n            <div className = \"Client-view-title-container\">\r\n                <p className = \"Client-view-title-text\">Assignment Form</p> {/*Get this from previous page*/}\r\n            </div>\r\n            <Container fluid className = \"Assignment-information-background-container\">\r\n              <Row className = \"Assignment-information-background\">\r\n                <div className = \"Assignment-information-container\">\r\n                  <Col>\r\n                    <MDBContainer className = \"Assignment-information-card\">\r\n                        <MDBCard className = \"Assignment-information-body\">\r\n                            <p className = \"Assignment-information-top\">Date Created: {this.assignment.dateAssigned} Visit Number: {this.assignment.visitNumber}</p>\r\n                            <p className = \"Assignment-information-top\">Next Session: \r\n                                \r\n                                    <div>\r\n                                        <DatePicker\r\n                                            selected={this.state.startDate}\r\n                                            onSelect={selected => this.setState(() => ({startDate: new Date(selected.getFullYear(), selected.getMonth(), selected.getDate())}))}\r\n                                            \r\n                                            //onChange={selected => this.setState({startDate: selected})}\r\n                                            name=\"startDate\"\r\n                                        />\r\n                                        {console.log(this.state.startDate)}\r\n                                    </div>\r\n                                \r\n                            </p>\r\n                            <p className = \"Assignment-information-top\">Therapist: {this.assignment.therapistName}</p>\r\n                            <p className = \"Assignment-information-top\">Client Name: {this.assignment.clientName}</p>\r\n                            <h2>Exercises</h2>\r\n                            <div className = \"Exercise-card-container\">\r\n                            {console.log(this.state.startDate)}\r\n                            {this.getExercises(this.assignment.exercises, this.state.startDate)}\r\n                                <Row>\r\n                                    <MDBCard className = \"Add-exercise\">\r\n                                        \r\n                                        <Link to = {{ \r\n                                            pathname: \"/ExerciseForm\",\r\n                                            data: {addedExercises: this.assignment.exercises,\r\n                                                    nextSessionDate: [String(this.state.startDate.getMonth() + 1), String(this.state.startDate.getDate()), String(this.state.startDate.getFullYear())] }\r\n                                            }}>\r\n                                            <Button variant=\"link\" size=\"lg\">\r\n                                                Add Exercise\r\n                                            </Button>\r\n                                        </Link>\r\n                                    </MDBCard>\r\n                                </Row>\r\n                            </div>\r\n                        </MDBCard>          \r\n                    </MDBContainer>\r\n                  </Col>\r\n                </div>\r\n                <div className = \"Overall-instructions-container\">\r\n                    <Col>\r\n                        <MDBContainer className = \"Overall-instructions-card\">\r\n                            <MDBCard className = \"Overall-instructions-body\">\r\n                                <MDBCardTitle className = \"Overall-instructions-title\">Overall Instructions</MDBCardTitle>\r\n                                    <Form>\r\n                                        <Form.Group controlId=\"exerciseTitle\">\r\n                                            <Form.Control placeholder=\"\" />\r\n                                        </Form.Group>\r\n                                        <div className = \"Assignment-form-finish-button\">\r\n                                            <Link to = \"/ClientView\">\r\n                                                <Button variant=\"primary\" type=\"submit\" >\r\n                                                    Assign {/*Need to make sure this button submits for all the user-inputted data on screen (next session for ex) */}\r\n                                                </Button>\r\n                                            </Link>\r\n                                        </div>\r\n                                    </Form>\r\n                            </MDBCard>          \r\n                        </MDBContainer>\r\n                    </Col>\r\n                </div>\r\n              </Row>\r\n            </Container> \r\n        </div>\r\n        )\r\n       \r\n    }\r\n  }\r\n\r\n  /*class ExerciseRow extends Component {\r\n    \r\n    constructor(props) {\r\n      super(props);\r\n      console.log(props);\r\n      this.exercises = props.exercises;\r\n      this.nextSession = props.nextSession;\r\n    }\r\n    \r\n    getExercises(exercises) {\r\n        console.log(props);\r\n        const result = exercises.map((exercise) =>\r\n        <Row>\r\n            <div className = \"Exercise-card-row\">\r\n                <MDBCard className = \"Exercise-card-body\">\r\n                    <p className=\"exerciseTitle\">{exercise.name} <Link to = {{\r\n                        pathname: \"/ExerciseForm\",\r\n                        data: {editExercise: exercise,\r\n                                addedExercises: this.exercises,\r\n                                nextSessionDate: this.nextSession}}}><EditIcon className = \"Edit-icon\"/></Link></p>\r\n                    <p className=\"exerciseCard\">{exercise.frequency}</p>\r\n                    <p className=\"exerciseCard\">Due By: {exercise.due}</p>\r\n                    <p className=\"exerciseCard\">Special Instructions: {exercise.specialInstructions}</p>\r\n                </MDBCard>\r\n            </div>\r\n        </Row>\r\n        );\r\n        return result;\r\n    }\r\n    \r\n    render() {\r\n        return(this.getExercises(this.exercises))\r\n    }\r\n}*/\r\n  /*class NextSession extends Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        \r\n    }\r\n    setNextSession() {\r\n        \r\n        <div>\r\n            <p>Next Visit:</p>\r\n            <DatePicker \r\n            value = {value}\r\n            onSelect = {this.handleDate}\r\n            onChange = {date => setStartDate(date)}\r\n            />\r\n        </div>\r\n        \r\n    }\r\n    }*/\r\n\r\n    export default AssignmentForm;",{"ruleId":"74","severity":1,"message":"75","line":4,"column":8,"nodeType":"76","messageId":"77","endLine":4,"endColumn":11},{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","replacedBy":"81"},{"ruleId":"74","severity":1,"message":"82","line":6,"column":8,"nodeType":"76","messageId":"77","endLine":6,"endColumn":13},{"ruleId":"74","severity":1,"message":"83","line":9,"column":19,"nodeType":"76","messageId":"77","endLine":9,"endColumn":30},{"ruleId":"74","severity":1,"message":"84","line":10,"column":8,"nodeType":"76","messageId":"77","endLine":10,"endColumn":22},{"ruleId":"74","severity":1,"message":"85","line":14,"column":10,"nodeType":"76","messageId":"77","endLine":14,"endColumn":18},{"ruleId":"86","severity":1,"message":"87","line":79,"column":7,"nodeType":"76","messageId":"88","endLine":79,"endColumn":19},{"ruleId":"89","severity":1,"message":"90","line":86,"column":51,"nodeType":"91","messageId":"92","endLine":86,"endColumn":53},{"ruleId":"74","severity":1,"message":"93","line":2,"column":10,"nodeType":"76","messageId":"77","endLine":2,"endColumn":21},{"ruleId":"74","severity":1,"message":"94","line":2,"column":23,"nodeType":"76","messageId":"77","endLine":2,"endColumn":34},{"ruleId":"86","severity":1,"message":"95","line":61,"column":7,"nodeType":"76","messageId":"88","endLine":61,"endColumn":30},{"ruleId":"86","severity":1,"message":"96","line":62,"column":7,"nodeType":"76","messageId":"88","endLine":62,"endColumn":31},{"ruleId":"86","severity":1,"message":"97","line":63,"column":7,"nodeType":"76","messageId":"88","endLine":63,"endColumn":25},{"ruleId":"86","severity":1,"message":"98","line":64,"column":7,"nodeType":"76","messageId":"88","endLine":64,"endColumn":40},{"ruleId":"74","severity":1,"message":"99","line":191,"column":3,"nodeType":"76","messageId":"77","endLine":191,"endColumn":25},{"ruleId":"89","severity":1,"message":"100","line":234,"column":44,"nodeType":"91","messageId":"92","endLine":234,"endColumn":46},{"ruleId":"89","severity":1,"message":"100","line":242,"column":81,"nodeType":"91","messageId":"92","endLine":242,"endColumn":83},{"ruleId":"89","severity":1,"message":"100","line":245,"column":48,"nodeType":"91","messageId":"92","endLine":245,"endColumn":50},{"ruleId":"89","severity":1,"message":"100","line":249,"column":62,"nodeType":"91","messageId":"92","endLine":249,"endColumn":64},{"ruleId":"89","severity":1,"message":"90","line":266,"column":32,"nodeType":"91","messageId":"92","endLine":266,"endColumn":34},{"ruleId":"89","severity":1,"message":"90","line":304,"column":32,"nodeType":"91","messageId":"92","endLine":304,"endColumn":34},{"ruleId":"101","severity":1,"message":"102","line":347,"column":64,"nodeType":"103","messageId":"104","endLine":347,"endColumn":123},{"ruleId":"74","severity":1,"message":"105","line":442,"column":9,"nodeType":"76","messageId":"77","endLine":442,"endColumn":21},{"ruleId":"74","severity":1,"message":"106","line":456,"column":9,"nodeType":"76","messageId":"77","endLine":456,"endColumn":19},{"ruleId":"74","severity":1,"message":"107","line":4,"column":19,"nodeType":"76","messageId":"77","endLine":4,"endColumn":31},{"ruleId":"89","severity":1,"message":"90","line":46,"column":28,"nodeType":"91","messageId":"92","endLine":46,"endColumn":30},{"ruleId":"89","severity":1,"message":"90","line":52,"column":37,"nodeType":"91","messageId":"92","endLine":52,"endColumn":39},{"ruleId":"89","severity":1,"message":"90","line":52,"column":72,"nodeType":"91","messageId":"92","endLine":52,"endColumn":74},{"ruleId":"89","severity":1,"message":"90","line":74,"column":34,"nodeType":"91","messageId":"92","endLine":74,"endColumn":36},{"ruleId":"89","severity":1,"message":"90","line":74,"column":75,"nodeType":"91","messageId":"92","endLine":74,"endColumn":77},{"ruleId":"89","severity":1,"message":"90","line":74,"column":115,"nodeType":"91","messageId":"92","endLine":74,"endColumn":117},{"ruleId":"89","severity":1,"message":"90","line":74,"column":160,"nodeType":"91","messageId":"92","endLine":74,"endColumn":162},{"ruleId":"89","severity":1,"message":"90","line":74,"column":221,"nodeType":"91","messageId":"92","endLine":74,"endColumn":223},{"ruleId":"74","severity":1,"message":"108","line":1,"column":17,"nodeType":"76","messageId":"77","endLine":1,"endColumn":27},{"ruleId":"74","severity":1,"message":"109","line":2,"column":21,"nodeType":"76","messageId":"77","endLine":2,"endColumn":29},{"ruleId":"74","severity":1,"message":"83","line":4,"column":19,"nodeType":"76","messageId":"77","endLine":4,"endColumn":30},{"ruleId":"74","severity":1,"message":"110","line":4,"column":58,"nodeType":"76","messageId":"77","endLine":4,"endColumn":69},"no-unused-vars","'App' is defined but never used.","Identifier","unusedVar","no-native-reassign",["111"],"no-negated-in-lhs",["112"],"'axios' is defined but never used.","'MDBCardBody' is defined but never used.","'bonelliPicture' is defined but never used.","'Redirect' is defined but never used.","no-func-assign","'patientClick' is a function.","isAFunction","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useDispatch' is defined but never used.","'useSelector' is defined but never used.","'changeVisibleAssignment' is a function.","'completeAssignmentButton' is a function.","'completeAssignment' is a function.","'calculateExpectedExerciseProgress' is a function.","'daysToCompleteExercise' is assigned a value but never used.","Expected '!==' and instead saw '!='.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'changeVisibleAssignment'.","ArrowFunctionExpression","unsafeRefs","'CustomToggle' is assigned a value but never used.","'CustomMenu' is assigned a value but never used.","'MDBCardTitle' is defined but never used.","'useContext' is defined but never used.","'useState' is defined but never used.","'MDBCardText' is defined but never used.","no-global-assign","no-unsafe-negation"]