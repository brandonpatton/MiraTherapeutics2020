[{"D:\\STEVENS\\STEVENS\\SPRING + FALL + WINTER 2020\\FALL 2020\\CS 423 Senior Design I\\project\\senior-design-2020\\app\\src\\views\\PracticeView.js":"1","D:\\STEVENS\\STEVENS\\SPRING + FALL + WINTER 2020\\FALL 2020\\CS 423 Senior Design I\\project\\senior-design-2020\\app\\src\\views\\AssignmentForm.js":"2","D:\\STEVENS\\STEVENS\\SPRING + FALL + WINTER 2020\\FALL 2020\\CS 423 Senior Design I\\project\\senior-design-2020\\app\\src\\views\\ClientView.js":"3","D:\\STEVENS\\STEVENS\\SPRING + FALL + WINTER 2020\\FALL 2020\\CS 423 Senior Design I\\project\\senior-design-2020\\app\\src\\views\\ExerciseForm.js":"4","D:\\STEVENS\\STEVENS\\SPRING + FALL + WINTER 2020\\FALL 2020\\CS 423 Senior Design I\\project\\senior-design-2020\\app\\src\\App.js":"5","D:\\STEVENS\\STEVENS\\SPRING + FALL + WINTER 2020\\FALL 2020\\CS 423 Senior Design I\\project\\senior-design-2020\\app\\src\\reportWebVitals.js":"6"},{"size":5839,"mtime":1613620543856,"results":"7","hashOfConfig":"8"},{"size":10618,"mtime":1614223258946,"results":"9","hashOfConfig":"8"},{"size":11728,"mtime":1613620731392,"results":"10","hashOfConfig":"8"},{"size":9938,"mtime":1614230707779,"results":"11","hashOfConfig":"8"},{"size":3131,"mtime":1613011065283,"results":"12","hashOfConfig":"8"},{"size":375,"mtime":1606947846587,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},"19x3rqx",{"filePath":"17","messages":"18","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\STEVENS\\STEVENS\\SPRING + FALL + WINTER 2020\\FALL 2020\\CS 423 Senior Design I\\project\\senior-design-2020\\app\\src\\views\\PracticeView.js",["29","30","31","32"],"import React from \"react\";\r\nimport green from '../Green.PNG';\r\nimport Table from 'react-bootstrap/Table';\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Container from 'react-bootstrap/Container'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Card from 'react-bootstrap/Card'\r\nimport { Component } from \"react\";\r\nimport bonelliPicture from '../Bonelli-RECT.jpg';\r\nimport acasterPicture from '../james-acaster.jpg'\r\nimport Image from 'react-bootstrap/Image';\r\nimport { Link } from \"react-router-dom\";\r\nimport { Redirect } from 'react-router-dom'\r\nimport '../css/PracticeView.css'\r\n\r\n\r\nfunction patientClick(patient) {\r\n  this.setState(() => ({\r\n    selectedPatient: patient\r\n  }));\r\n}\r\n\r\n  class PracticeView extends Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = { selectedPatient: {\r\n                      name: 'Bruce Wayne',\r\n                      trackedSymptoms: 3,\r\n                      groundingExercises: 5,\r\n                      assignments: [true, false],\r\n                      nextSession: '3/4',\r\n                      status: 'Ongoing',\r\n                    } };\r\n      this.listItems = []\r\n      this.patients = [\r\n        {\r\n          name: 'Bruce Wayne',\r\n          trackedSymptoms: 3,\r\n          groundingExercises: 5,\r\n          assignments: [true, false],\r\n          nextSession: '3/4',\r\n          status: 'Ongoing'\r\n        },\r\n        {\r\n          name: 'Craig Ferguson',\r\n          trackedSymptoms: 3,\r\n          groundingExercises: 5,\r\n          assignments: [true, false],\r\n          nextSession: '2/8',\r\n          status: 'Ongoing'\r\n        },\r\n        {\r\n          name: 'Eduardo Bonelli',\r\n          trackedSymptoms: 3,\r\n          groundingExercises: 5,\r\n          assignments: [true, false],\r\n          nextSession: '12/24',\r\n          status: 'Ongoing'\r\n        },\r\n        {\r\n          name: 'James Acaster',\r\n          trackedSymptoms: 3,\r\n          groundingExercises: 5,\r\n          assignments: [true, true],\r\n          nextSession: '11/20',\r\n          status: 'Completed'\r\n        },\r\n        {\r\n          name: 'Scooby Doo',\r\n          trackedSymptoms: 3,\r\n          groundingExercises: 5,\r\n          assignments: [true, false],\r\n          nextSession: '3/14',\r\n          status: 'Ongoing'\r\n        }\r\n      ];\r\n\r\n      patientClick = patientClick.bind(this);\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n      window.onpopstate = function(event) {\r\n        // Allows back and forth action\r\n        if (event.currentTarget.location.pathname == \"/PracticeView\") window.location.reload()\r\n    }\r\n  }\r\n\r\n    render(){\r\n      return(\r\n        <div>\r\n          <Container className = \"Profile\">\r\n            <Row>\r\n              <Col>\r\n                <div className = \"border\">\r\n                  <div className = \"Profile-info\">\r\n                    <Row className = \"Name-Row justify-content-md-center\">\r\n                      <Image src={acasterPicture} roundedCircle className=\"picture\"/>\r\n                    </Row>\r\n                    <Row className = \"Name-Row justify-content-md-center\">\r\n                      <Card className = \"Name-Card\">{this.state.selectedPatient.name}</Card>\r\n                    </Row>\r\n                    <Row className= \"Name-Row justify-content-md-center\">\r\n                      <Card className = \"Next-Session-Date\">{this.state.selectedPatient.nextSession}</Card>\r\n                    </Row>\r\n                    <Row className = \"Name-Row justify-content-md-center\">\r\n                      <Card className = \"Status\">{this.state.selectedPatient.status}</Card>\r\n                    </Row>\r\n                    <Row className = \"Name-Row justify-content-md-center\">\r\n                      <Link to = {{\r\n                          pathname: \"/ClientView\",\r\n                          data: {name: this.state.selectedPatient} // your data array of objects\r\n                        }}><Button variant=\"info\" className = \"Client-View-Button\">Go To Client View</Button></Link>\r\n                    </Row> \r\n                  </div>  \r\n                </div>             \r\n              </Col>\r\n              \r\n              <Col xs={8}>\r\n                <h1 className = \"Practice-view-title\">Practice View</h1>\r\n                <Table className = \"Table\">\r\n                <tbody>\r\n                  <TableRow className = \"Patients\" patients = {this.patients} />\r\n                </tbody>\r\n                </Table>\r\n              </Col>\r\n            </Row>\r\n          </Container>\r\n          \r\n          {/* <NumberList numbers = {this.numbers} /> */}\r\n        </div>\r\n      )\r\n    }\r\n  };\r\n      \r\nclass TableRow extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.patients = props.patients;\r\n  }\r\n\r\n  getRow(patients) {\r\n    const rowItems = patients.map((patient) =>\r\n      <tr onClick = {() => patientClick(patient)}>\r\n        <td className = \"Patient-name\" >Client: {patient.name}</td>\r\n        <p className = \"Tab\"></p>\r\n        <td className = \"Tracked-symptoms\">Tracked Symptoms {patient.trackedSymptoms} times</td>\r\n        <p className = \"Tab\"></p>\r\n        <td className = \"Exercise-use\">Grounding Exercises used {patient.groundingExercises} times</td>\r\n        <p className = \"Tab\"></p>\r\n        <td className = \"Completion\">Completed {this.getCompleted(patient.assignments)}/{patient.assignments.length} homework assignments</td>\r\n        <p className = \"Tab\"></p>\r\n        <td className = \"Completion-indicator\"><Image src={green} Green/></td>\r\n      </tr>\r\n    );\r\n    return rowItems;\r\n  } \r\n\r\n  getCompleted(assignments) {\r\n    let count = 0;\r\n    for (let assignment of assignments) {\r\n      if (assignment) {\r\n        count++;\r\n      }\r\n    }\r\n    return count;\r\n  }\r\n\r\n  render() {\r\n    return(this.getRow(this.patients))\r\n  }\r\n\r\n};\r\nexport default PracticeView","D:\\STEVENS\\STEVENS\\SPRING + FALL + WINTER 2020\\FALL 2020\\CS 423 Senior Design I\\project\\senior-design-2020\\app\\src\\views\\AssignmentForm.js",["33","34","35","36"],"import React, { useContext } from \"react\";\r\nimport { Component, useState } from \"react\";\r\nimport '../css/ExerciseForm.css';\r\nimport { MDBCard, MDBCardBody, MDBContainer,MDBCardTitle,MDBCardText } from \"mdbreact\";\r\nimport logo from '../Mira.jpg';\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Container from 'react-bootstrap/Container'\r\nimport Form from 'react-bootstrap/Form'\r\nimport Button from 'react-bootstrap/Button'\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport '../css/AssignmentForm.css'\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport { Link } from \"react-router-dom\";\r\n\r\n\r\n\r\n/*function SetUpNextSession(){\r\n    const [startDate, setStartDate] = useState(new Date());\r\n}*/\r\n\r\nclass AssignmentForm extends Component {\r\n    \r\n  \r\n    constructor(props) {\r\n        super(props);\r\n        this.onFormSubmit = this.onFormSubmit.bind(this);\r\n        var today = new Date();\r\n        var dd = String(today.getDate()).padStart(2, '0');\r\n        var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\r\n        var yyyy = today.getFullYear();\r\n        today = mm + '/' + dd + '/' + yyyy;\r\n\r\n        \r\n        \r\n        this.state = {\r\n            startDate: new Date()\r\n          };\r\n        \r\n        this.assignment = \r\n        {\r\n            dateAssigned: today,\r\n            visitNumber: 3,\r\n            therapistName: \"Miranda Cosgrove\",\r\n            clientName: \"Eduardo Bonelli\",\r\n            due: '11/17',\r\n            status: 'Ongoing',\r\n            nextSession: \"\",\r\n            exercises: [\r\n                {\r\n                    type: \"Grounding\",\r\n                    name: \"Breathing Exercise\",\r\n                    due: '11/12',\r\n                    completionStatus: \"Danger\",\r\n                    completionAmount: 75,\r\n                    frequency: 'Daily',\r\n                    specialInstructions: 'Yes'\r\n                },\r\n                {\r\n                    type: \"Assessments\",\r\n                    name: \"PHQ-9 Questionnaire\",\r\n                    due: '11/15',\r\n                    completionStatus: \"Success\",\r\n                    completionAmount: 100,\r\n                    frequency: 'Weekly',\r\n                    specialInstructions: 'Yes'\r\n                },\r\n                {\r\n                    type: \"Reading\",\r\n                    name: \"Trauma Story\",\r\n                    due: '11/17',\r\n                    completionStatus: \"Ongoing\",\r\n                    completionAmount: 50,\r\n                    frequency: 'Daily',\r\n                    specialInstructions: 'Yes'\r\n                    \r\n                }\r\n            ]\r\n        }\r\n    }\r\n\r\n    \r\n\r\n\r\n    getExercises(exercises, next) {\r\n        \r\n        const result = exercises.map((exercise) =>\r\n        <Row>\r\n            <div className = \"Exercise-card-row\">\r\n                <MDBCard className = \"Exercise-card-body\">\r\n                    <p className=\"exerciseTitle\">{exercise.name} <Link to = {{\r\n                        pathname: \"/ExerciseForm\",\r\n                        data: {editExercise: exercise,\r\n                                addedExercises: exercises,\r\n                                nextSessionDate: [String(next.getMonth() + 1), String(next.getDate()), String(next.getFullYear())]}}}><EditIcon className = \"Edit-icon\"/></Link></p>\r\n                    <p className=\"exerciseCard\">{exercise.frequency}</p>\r\n                    <p className=\"exerciseCard\">Due By: {exercise.due}</p>\r\n                    <p className=\"exerciseCard\">Special Instructions: {exercise.specialInstructions}</p>\r\n                </MDBCard>\r\n            </div>\r\n        </Row>\r\n        );\r\n        return result;\r\n    }\r\n\r\n\r\n    onFormSubmit(e) {\r\n        e.preventDefault();\r\n    }\r\n     \r\n    render(){\r\n        \r\n        return(\r\n        <div>\r\n            <div className = \"App-logo-container\">\r\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n            </div>\r\n            <div className = \"Client-view-title-container\">\r\n                <p className = \"Client-view-title-text\">Assignment Form</p> {/*Get this from previous page*/}\r\n            </div>\r\n            <Container fluid className = \"Assignment-information-background-container\">\r\n              <Row className = \"Assignment-information-background\">\r\n                <div className = \"Assignment-information-container\">\r\n                  <Col>\r\n                    <MDBContainer className = \"Assignment-information-card\">\r\n                        <MDBCard className = \"Assignment-information-body\">\r\n                            <p className = \"Assignment-information-top\">Date Created: {this.assignment.dateAssigned} Visit Number: {this.assignment.visitNumber}</p>\r\n                            <p className = \"Assignment-information-top\">Next Session: \r\n                                \r\n                                    <div>\r\n                                        <DatePicker\r\n                                            selected={this.state.startDate}\r\n                                            onSelect={selected => this.setState(() => ({startDate: new Date(selected.getFullYear(), selected.getMonth(), selected.getDate())}))}\r\n                                            \r\n                                            //onChange={selected => this.setState({startDate: selected})}\r\n                                            name=\"startDate\"\r\n                                        />\r\n                                        {console.log(this.state.startDate)}\r\n                                    </div>\r\n                                \r\n                            </p>\r\n                            <p className = \"Assignment-information-top\">Therapist: {this.assignment.therapistName}</p>\r\n                            <p className = \"Assignment-information-top\">Client Name: {this.assignment.clientName}</p>\r\n                            <h2>Exercises</h2>\r\n                            <div className = \"Exercise-card-container\">\r\n                            {console.log(this.state.startDate)}\r\n                            {this.getExercises(this.assignment.exercises, this.state.startDate)}\r\n                                <Row>\r\n                                    <MDBCard className = \"Add-exercise\">\r\n                                        \r\n                                        <Link to = {{ \r\n                                            pathname: \"/ExerciseForm\",\r\n                                            data: {addedExercises: this.assignment.exercises,\r\n                                                    nextSessionDate: [String(this.state.startDate.getMonth() + 1), String(this.state.startDate.getDate()), String(this.state.startDate.getFullYear())] }\r\n                                            }}>\r\n                                            <Button variant=\"link\" size=\"lg\">\r\n                                                Add Exercise\r\n                                            </Button>\r\n                                        </Link>\r\n                                    </MDBCard>\r\n                                </Row>\r\n                            </div>\r\n                        </MDBCard>          \r\n                    </MDBContainer>\r\n                  </Col>\r\n                </div>\r\n                <div className = \"Overall-instructions-container\">\r\n                    <Col>\r\n                        <MDBContainer className = \"Overall-instructions-card\">\r\n                            <MDBCard className = \"Overall-instructions-body\">\r\n                                <MDBCardTitle className = \"Overall-instructions-title\">Overall Instructions</MDBCardTitle>\r\n                                    <Form>\r\n                                        <Form.Group controlId=\"exerciseTitle\">\r\n                                            <Form.Control placeholder=\"\" />\r\n                                        </Form.Group>\r\n                                        <div className = \"Assignment-form-finish-button\">\r\n                                            <Link to = \"/ClientView\">\r\n                                                <Button variant=\"primary\" type=\"submit\" >\r\n                                                    Assign {/*Need to make sure this button submits for all the user-inputted data on screen (next session for ex) */}\r\n                                                </Button>\r\n                                            </Link>\r\n                                        </div>\r\n                                    </Form>\r\n                            </MDBCard>          \r\n                        </MDBContainer>\r\n                    </Col>\r\n                </div>\r\n              </Row>\r\n            </Container> \r\n        </div>\r\n        )\r\n       \r\n    }\r\n  }\r\n\r\n  /*class ExerciseRow extends Component {\r\n    \r\n    constructor(props) {\r\n      super(props);\r\n      console.log(props);\r\n      this.exercises = props.exercises;\r\n      this.nextSession = props.nextSession;\r\n    }\r\n    \r\n    getExercises(exercises) {\r\n        console.log(props);\r\n        const result = exercises.map((exercise) =>\r\n        <Row>\r\n            <div className = \"Exercise-card-row\">\r\n                <MDBCard className = \"Exercise-card-body\">\r\n                    <p className=\"exerciseTitle\">{exercise.name} <Link to = {{\r\n                        pathname: \"/ExerciseForm\",\r\n                        data: {editExercise: exercise,\r\n                                addedExercises: this.exercises,\r\n                                nextSessionDate: this.nextSession}}}><EditIcon className = \"Edit-icon\"/></Link></p>\r\n                    <p className=\"exerciseCard\">{exercise.frequency}</p>\r\n                    <p className=\"exerciseCard\">Due By: {exercise.due}</p>\r\n                    <p className=\"exerciseCard\">Special Instructions: {exercise.specialInstructions}</p>\r\n                </MDBCard>\r\n            </div>\r\n        </Row>\r\n        );\r\n        return result;\r\n    }\r\n    \r\n    render() {\r\n        return(this.getExercises(this.exercises))\r\n    }\r\n}*/\r\n  /*class NextSession extends Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        \r\n    }\r\n    setNextSession() {\r\n        \r\n        <div>\r\n            <p>Next Visit:</p>\r\n            <DatePicker \r\n            value = {value}\r\n            onSelect = {this.handleDate}\r\n            onChange = {date => setStartDate(date)}\r\n            />\r\n        </div>\r\n        \r\n    }\r\n    }*/\r\n\r\n    export default AssignmentForm;","D:\\STEVENS\\STEVENS\\SPRING + FALL + WINTER 2020\\FALL 2020\\CS 423 Senior Design I\\project\\senior-design-2020\\app\\src\\views\\ClientView.js",["37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52"],"import React from \"react\";\r\nimport ReactDOM from 'react-dom';\r\nimport { Component } from \"react\";\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport DropdownButton from 'react-bootstrap/DropdownButton';\r\nimport useState from 'react';\r\nimport { FormControl } from '@material-ui/core';\r\nimport '../css/ClientView.css';\r\nimport { MDBCard, MDBCardTitle } from \"mdbreact\";\r\nimport {Redirect,Switch} from 'react-router-dom';\r\nimport logo from '../Mira.jpg';\r\nimport {Row, Col, Container, Image, Card, Button} from 'react-bootstrap'\r\nimport Form from 'react-bootstrap/Form';\r\nimport picture from '../Bonelli-RECT.jpg';\r\nimport { useHistory } from 'react-router-dom'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {\r\n  CircularProgressbar,\r\n  CircularProgressbarWithChildren,\r\n  buildStyles\r\n} from \"react-circular-progressbar\";\r\nimport \"react-circular-progressbar/dist/styles.css\";\r\nimport { LinearProgress } from '@material-ui/core';\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\n\r\nclass ClientView extends Component {\r\n  \r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        patient: {\r\n          name: props.location.data.name,\r\n          nextSession: '1/1/2021',\r\n          startDate: '1/1/2020',\r\n          assignments: [\r\n              {\r\n                  due: '',\r\n                  status: '',\r\n                  exercises: [\r\n                  ]\r\n              }\r\n          ]\r\n        },\r\n        selectedAssignment: 0\r\n\r\n      }\r\n      this.bubbleInfo = [\r\n        {\r\n          assignmentProgress: 100,\r\n          due: \"11/20\",\r\n          status: \"Completed\"\r\n        },\r\n        {\r\n          assignmentProgress: 50,\r\n          due: \"11/27\",\r\n          status: \"Completed\"\r\n        },\r\n        {\r\n          assignmentProgress: 100,\r\n          due: \"12/04\",\r\n          status: \"Completed\"\r\n        },\r\n        {\r\n          assignmentProgress: 100,\r\n          due: \"12/12\",\r\n          status: \"Completed\"\r\n        },\r\n        {\r\n          assignmentProgress: 100,\r\n          due: \"12/19\",\r\n          status: \"Completed\"\r\n        },\r\n        {\r\n          assignmentProgress: 100,\r\n          due: \"12/26\",\r\n          status: \"Completed\"\r\n        },\r\n        {\r\n          assignmentProgress: 100,\r\n          due: \"1/02\",\r\n          status: \"Ongoing\"\r\n        }\r\n      ]\r\n      this.clientInfo = [\r\n        {\r\n          picture: picture,\r\n          name: props.location.data.name, //Get this from previous page\r\n          clientSince: '11/10/19',\r\n          nextSession: '11/28'\r\n        }\r\n      ]\r\n\r\n      changeVisibleAssignment = changeVisibleAssignment.bind(this);\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n      fetch(\"http://localhost:3080/assignments/patient/PjohnDoe1\")\r\n          .then(res => res.json())\r\n          .then(data => {\r\n            data.sort((a, b) => a.visitNumber - b.visitNumber)\r\n            this.setState({patient: {assignments: data}})\r\n          });\r\n\r\n    }\r\n\r\n    render(){\r\n      return(\r\n        <div>\r\n            <div className = \"App-logo-container\">\r\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n            </div>\r\n            <div className = \"Client-view-title-container\">\r\n                <p className = \"Client-view-title-text\">{this.state.patient.name}</p> {/*Get this from previous page*/}\r\n            </div>\r\n              \r\n            <Container fluid className = \"background-container\">\r\n              <Row className = \"background\">\r\n                <div className = \"Client-information-container\">\r\n                  <Col>\r\n                    <ClientInfo  clientInfo={this.clientInfo} />\r\n                  </Col>\r\n                </div>\r\n                {/*<Col>\r\n                  <MDBCard className=\"Exercise-preview-body\">\r\n                    <MDBCardTitle className=\"Exercise-preview-placeholder-text\">-Exercise Preview-</MDBCardTitle>\r\n                  </MDBCard>         \r\n                </Col>*/} \r\n                <Col>\r\n                      <Row>\r\n                      </Row>\r\n                      <Row>\r\n                    {/*<MDBCard className=\"Assignment\">\r\n                      <div className = \"\">\r\n                        <MDBCardTitle className=\"t\">Ongoing</MDBCardTitle> {/*Get this from patient data}\r\n                      </div>\r\n                    </MDBCard> */}\r\n                        {getBubbleInfo(this.state.patient.assignments)}\r\n                      </Row>\r\n                      <Row>\r\n                          <Col>\r\n                          <Card className=\"Assignment-completion-body\">\r\n                              <Card.Body>\r\n                                  <Row>\r\n                                      <Col>\r\n                                        <div className = \"Assignment-completion-status-text-container\">\r\n                                          <MDBCardTitle className=\"Assignment-completion-status-text\">{this.state.patient.assignments[this.state.selectedAssignment].status}</MDBCardTitle> {/*Get this from patient data*/}\r\n                                        </div>\r\n                                      </Col>\r\n                                      <Col>\r\n                                        <div className = \"Assignment-due-date-container\">\r\n                                          <MDBCardTitle className=\"Assignment-due-date-text\">Due by: <u>{this.state.patient.assignments[this.state.selectedAssignment].due}</u> </MDBCardTitle> {/*Get this from patient data*/}\r\n                                        </div>\r\n                                      </Col>\r\n                                       \r\n                                  </Row>\r\n                                  <Row>\r\n                                      <Col>\r\n                                        <div className = \"Assignment-progress-container\">\r\n                                          <MDBCardTitle className=\"Assignment-completion-title-text\">Assignment Completion</MDBCardTitle>\r\n                                          <div className=\"Exercise-data-container\">\r\n                                            {getExercises(this.state.patient.assignments[this.state.selectedAssignment].exerciseList)}\r\n                                          </div>\r\n                                        </div>\r\n                                      </Col>\r\n                                  </Row>\r\n                              </Card.Body>\r\n                          </Card>\r\n                          </Col>\r\n                      </Row>      \r\n                </Col>\r\n              </Row>\r\n            </Container> \r\n       </div>\r\n       )\r\n    }\r\n  }\r\n\r\nfunction changeVisibleAssignment(assignmentNumber) {\r\n  this.setState(() => ({\r\n    selectedAssignment: assignmentNumber\r\n  }))\r\n}\r\n\r\nlet getBubbleInfo = (bubbleInfo) => {\r\n  const ongoingBubbleColor = '#00b5d9'\r\n  const completedBubbleColor = '#20315f'\r\n  const completedBubblePathColor = '#FFFFFF'\r\n    let progressBubbleComponents = []\r\n    // 7 Assignments visible at a time\r\n    for (let assignmentIndex = 6; assignmentIndex >= 0; assignmentIndex--) {\r\n      if (assignmentIndex >= bubbleInfo.length) {\r\n        progressBubbleComponents.unshift(\r\n          <div className = \"Progress-bubble-column-hidden\">\r\n            <CircularProgressbar  className = \"Progress-bubbles\"\r\n            background\r\n            backgroundPadding={6}/>\r\n          </div>\r\n        )\r\n      } else {\r\n        progressBubbleComponents.unshift(\r\n          <div className = \"Progress-bubble-column\" onClick = {() => changeVisibleAssignment(assignmentIndex)}>\r\n            <CircularProgressbar  className = \"Progress-bubbles\" value={bubbleInfo[assignmentIndex].assignmentProgress}\r\n            text={`${bubbleInfo[assignmentIndex].due}`}\r\n            background\r\n            backgroundPadding={6}\r\n            styles={buildStyles({\r\n              backgroundColor: `${bubbleInfo[assignmentIndex].status == \"Ongoing\" ? ongoingBubbleColor : completedBubbleColor}`,\r\n              textColor: \"#fff\",\r\n              pathColor: `${bubbleInfo[assignmentIndex].status == \"Ongoing\" ? '#000000' : completedBubblePathColor}`,\r\n              trailColor: \"transparent\"\r\n            })}/>\r\n          </div>)\r\n      }\r\n    }\r\n  return (<div className = \"Progress-bubbles-container\">\r\n    {progressBubbleComponents}\r\n  </div>)\r\n}\r\n\r\nclass ClientInfo extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.clientInfo = props.clientInfo;\r\n  }\r\n\r\n  getClientInfo(clientInfo) {\r\n    const result = clientInfo.map((client) =>\r\n      <Row>\r\n        <MDBCard className = \"Client-information\">\r\n          <Image src={picture} roundedCircle className=\"picture\"/>\r\n          <div className=\"clientInfoCardContainer\">\r\n            <p className=\"clientInfoCard\">{client.name}</p>\r\n            <p className=\"clientInfoCard\">Client Since: {client.clientSince}</p>\r\n            <p className=\"clientInfoCard\">Next Session: {client.nextSession}</p>\r\n          </div>\r\n        </MDBCard>\r\n      </Row>\r\n    );\r\n    return result;\r\n  }\r\n  \r\n  render() {\r\n    return(this.getClientInfo(this.clientInfo))\r\n  }\r\n}\r\n\r\n function getExercises(exercises) {\r\n      if (exercises) \r\n      {\r\n        const ActualLinearProgress = withStyles((theme) => ({\r\n          root: {\r\n            height: 30,\r\n            borderRadius: 10\r\n          },\r\n          colorPrimary: {\r\n            backgroundColor: \"#BBBBBB\"\r\n          },\r\n          bar: {\r\n            backgroundColor: \"#ac6ef3\"\r\n          }\r\n        }))(LinearProgress);\r\n\r\n        const ExpectedLinearProgress = withStyles((theme) => ({\r\n          root: {\r\n            height: 30,\r\n            borderRadius: 10\r\n          },\r\n          colorPrimary: {\r\n            backgroundColor: \"#BBBBBB\"\r\n          },\r\n          bar: {\r\n            backgroundColor: \"#20315f\"\r\n          }\r\n        }))(LinearProgress);\r\n        \r\n      const result = exercises.map((exercise) =>\r\n      <div className = \"Exercise-data\">\r\n        <Row>\r\n            <Col>\r\n              <ActualLinearProgress className = \"Linear-progress-bar\" variant = {\"determinate\"} value = {exercise.completionAmount} color = \"primary\" thickness={5}/>\r\n              <ExpectedLinearProgress className = \"Linear-progress-bar\" variant = {\"determinate\"} value = {exercise.completionStatus} color = \"secondary\"/>\r\n            </Col>\r\n            <Col>\r\n                <p>{exercise.name}<br></br>{exercise.due}</p>\r\n            </Col>\r\n        </Row>\r\n        <br></br>\r\n      </div>\r\n      );\r\n      return result;\r\n      }\r\n    }\r\n\r\n\r\n  //#region Exercise Type Dropdown\r\n  const CustomToggle = React.forwardRef(({ children, onClick }, ref) => (\r\n    <a\r\n      href=\"./ClientView\"\r\n      ref={ref}\r\n      onClick={(e) => {\r\n        e.preventDefault();\r\n        onClick(e);\r\n      }}\r\n    >\r\n      {children}\r\n      &#x25bc;\r\n    </a>\r\n  ));\r\n\r\n  const CustomMenu = React.forwardRef(\r\n    ({ children, style, className, 'aria-labelledby': labeledBy }, ref) => {\r\n      const [value, setValue] = useState('');\r\n  \r\n      return (\r\n        <div\r\n          ref={ref}\r\n          style={style}\r\n          className={className}\r\n          aria-labelledby={labeledBy}\r\n        >\r\n          <FormControl\r\n            autoFocus\r\n            className=\"mx-3 my-2 w-auto\"\r\n            placeholder=\"Type to filter...\"\r\n            onChange={(e) => setValue(e.target.value)}\r\n            value={value}\r\n          />\r\n          <ul className=\"list-unstyled\">\r\n            {React.Children.toArray(children).filter(\r\n              (child) =>\r\n                !value || child.props.children.toLowerCase().startsWith(value),\r\n            )}\r\n          </ul>\r\n        </div>\r\n      );\r\n    },\r\n  );\r\n//#endregion  \r\n\r\n\r\nexport default ClientView;","D:\\STEVENS\\STEVENS\\SPRING + FALL + WINTER 2020\\FALL 2020\\CS 423 Senior Design I\\project\\senior-design-2020\\app\\src\\views\\ExerciseForm.js",["53","54","55","56","57","58","59","60","61"],"D:\\STEVENS\\STEVENS\\SPRING + FALL + WINTER 2020\\FALL 2020\\CS 423 Senior Design I\\project\\senior-design-2020\\app\\src\\App.js",["62","63"],"D:\\STEVENS\\STEVENS\\SPRING + FALL + WINTER 2020\\FALL 2020\\CS 423 Senior Design I\\project\\senior-design-2020\\app\\src\\reportWebVitals.js",[],{"ruleId":"64","severity":1,"message":"65","line":10,"column":8,"nodeType":"66","messageId":"67","endLine":10,"endColumn":22},{"ruleId":"64","severity":1,"message":"68","line":14,"column":10,"nodeType":"66","messageId":"67","endLine":14,"endColumn":18},{"ruleId":"69","severity":1,"message":"70","line":79,"column":7,"nodeType":"66","messageId":"71","endLine":79,"endColumn":19},{"ruleId":"72","severity":1,"message":"73","line":86,"column":51,"nodeType":"74","messageId":"75","endLine":86,"endColumn":53},{"ruleId":"64","severity":1,"message":"76","line":1,"column":17,"nodeType":"66","messageId":"67","endLine":1,"endColumn":27},{"ruleId":"64","severity":1,"message":"77","line":2,"column":21,"nodeType":"66","messageId":"67","endLine":2,"endColumn":29},{"ruleId":"64","severity":1,"message":"78","line":4,"column":19,"nodeType":"66","messageId":"67","endLine":4,"endColumn":30},{"ruleId":"64","severity":1,"message":"79","line":4,"column":58,"nodeType":"66","messageId":"67","endLine":4,"endColumn":69},{"ruleId":"64","severity":1,"message":"80","line":2,"column":8,"nodeType":"66","messageId":"67","endLine":2,"endColumn":16},{"ruleId":"64","severity":1,"message":"81","line":4,"column":8,"nodeType":"66","messageId":"67","endLine":4,"endColumn":16},{"ruleId":"64","severity":1,"message":"82","line":5,"column":8,"nodeType":"66","messageId":"67","endLine":5,"endColumn":22},{"ruleId":"64","severity":1,"message":"68","line":10,"column":9,"nodeType":"66","messageId":"67","endLine":10,"endColumn":17},{"ruleId":"64","severity":1,"message":"83","line":10,"column":18,"nodeType":"66","messageId":"67","endLine":10,"endColumn":24},{"ruleId":"64","severity":1,"message":"84","line":12,"column":43,"nodeType":"66","messageId":"67","endLine":12,"endColumn":49},{"ruleId":"64","severity":1,"message":"85","line":13,"column":8,"nodeType":"66","messageId":"67","endLine":13,"endColumn":12},{"ruleId":"64","severity":1,"message":"86","line":15,"column":10,"nodeType":"66","messageId":"67","endLine":15,"endColumn":20},{"ruleId":"64","severity":1,"message":"87","line":19,"column":3,"nodeType":"66","messageId":"67","endLine":19,"endColumn":34},{"ruleId":"64","severity":1,"message":"88","line":24,"column":10,"nodeType":"66","messageId":"67","endLine":24,"endColumn":20},{"ruleId":"69","severity":1,"message":"89","line":93,"column":7,"nodeType":"66","messageId":"71","endLine":93,"endColumn":30},{"ruleId":"90","severity":1,"message":"91","line":202,"column":64,"nodeType":"92","messageId":"93","endLine":202,"endColumn":110},{"ruleId":"72","severity":1,"message":"73","line":208,"column":70,"nodeType":"74","messageId":"75","endLine":208,"endColumn":72},{"ruleId":"72","severity":1,"message":"73","line":210,"column":64,"nodeType":"74","messageId":"75","endLine":210,"endColumn":66},{"ruleId":"64","severity":1,"message":"94","line":297,"column":9,"nodeType":"66","messageId":"67","endLine":297,"endColumn":21},{"ruleId":"64","severity":1,"message":"95","line":311,"column":9,"nodeType":"66","messageId":"67","endLine":311,"endColumn":19},{"ruleId":"64","severity":1,"message":"96","line":4,"column":19,"nodeType":"66","messageId":"67","endLine":4,"endColumn":31},{"ruleId":"72","severity":1,"message":"73","line":46,"column":28,"nodeType":"74","messageId":"75","endLine":46,"endColumn":30},{"ruleId":"72","severity":1,"message":"73","line":52,"column":37,"nodeType":"74","messageId":"75","endLine":52,"endColumn":39},{"ruleId":"72","severity":1,"message":"73","line":52,"column":72,"nodeType":"74","messageId":"75","endLine":52,"endColumn":74},{"ruleId":"72","severity":1,"message":"73","line":74,"column":34,"nodeType":"74","messageId":"75","endLine":74,"endColumn":36},{"ruleId":"72","severity":1,"message":"73","line":74,"column":75,"nodeType":"74","messageId":"75","endLine":74,"endColumn":77},{"ruleId":"72","severity":1,"message":"73","line":74,"column":115,"nodeType":"74","messageId":"75","endLine":74,"endColumn":117},{"ruleId":"72","severity":1,"message":"73","line":74,"column":160,"nodeType":"74","messageId":"75","endLine":74,"endColumn":162},{"ruleId":"72","severity":1,"message":"73","line":74,"column":221,"nodeType":"74","messageId":"75","endLine":74,"endColumn":223},{"ruleId":"64","severity":1,"message":"97","line":6,"column":8,"nodeType":"66","messageId":"67","endLine":6,"endColumn":13},{"ruleId":"64","severity":1,"message":"78","line":9,"column":19,"nodeType":"66","messageId":"67","endLine":9,"endColumn":30},"no-unused-vars","'bonelliPicture' is defined but never used.","Identifier","unusedVar","'Redirect' is defined but never used.","no-func-assign","'patientClick' is a function.","isAFunction","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useContext' is defined but never used.","'useState' is defined but never used.","'MDBCardBody' is defined but never used.","'MDBCardText' is defined but never used.","'ReactDOM' is defined but never used.","'Dropdown' is defined but never used.","'DropdownButton' is defined but never used.","'Switch' is defined but never used.","'Button' is defined but never used.","'Form' is defined but never used.","'useHistory' is defined but never used.","'CircularProgressbarWithChildren' is defined but never used.","'makeStyles' is defined but never used.","'changeVisibleAssignment' is a function.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'changeVisibleAssignment'.","ArrowFunctionExpression","unsafeRefs","'CustomToggle' is assigned a value but never used.","'CustomMenu' is assigned a value but never used.","'MDBCardTitle' is defined but never used.","'axios' is defined but never used."]